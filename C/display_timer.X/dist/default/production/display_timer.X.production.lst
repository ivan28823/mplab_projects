

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Thu Jun 07 01:18:29 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	bitnvCOMRAM,global,bit,class=COMRAM,space=1,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1,inline
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1,inline
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1,inline
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    22                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    23                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    24                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    25                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    26  0000                     
    27                           ; Version 1.45 (B)
    28                           ; Generated 30/01/2018 GMT
    29                           ; 
    30                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    31                           ; All rights reserved.
    32                           ; 
    33                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    34                           ; 
    35                           ; Redistribution and use in source and binary forms, with or without modification, are
    36                           ; permitted provided that the following conditions are met:
    37                           ; 
    38                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    39                           ;        conditions and the following disclaimer.
    40                           ; 
    41                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    42                           ;        of conditions and the following disclaimer in the documentation and/or other
    43                           ;        materials provided with the distribution.
    44                           ; 
    45                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    46                           ;        software without specific prior written permission.
    47                           ; 
    48                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    49                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    50                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    51                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    52                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    53                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    54                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    55                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    56                           ; 
    57                           ; 
    58                           ; Code-generator required, PIC18F4550 Definitions
    59                           ; 
    60                           ; SFR Addresses
    61  0000                     
    62                           	psect	idataCOMRAM
    63  000B12                     __pidataCOMRAM:
    64                           	opt stack 0
    65                           
    66                           ;initializer for _count
    67  000B12  26DE               	dw	9950
    68                           
    69                           	psect	bitnvCOMRAM
    70  000148                     __pbitnvCOMRAM:
    71                           	opt stack 0
    72  000148                     _flag_t:
    73                           	opt stack 0
    74  000148                     	ds	1
    75  0000                     _LATD	set	3980
    76  0000                     _RCONbits	set	4048
    77  0000                     _IPR1bits	set	3999
    78  0000                     _PIE1bits	set	3997
    79  0000                     _T1CON	set	4045
    80  0000                     _INTCON2bits	set	4081
    81  0000                     _T0CON	set	4053
    82  0000                     _LATB	set	3978
    83  0000                     _LATA	set	3977
    84  0000                     _TRISB	set	3987
    85  0000                     _TRISD	set	3989
    86  0000                     _TRISA	set	3986
    87  0000                     _CMCON	set	4020
    88  0000                     _ADCON1	set	4033
    89  0000                     _TMR0H	set	4055
    90  0000                     _TMR0L	set	4054
    91  0000                     _INTCONbits	set	4082
    92  0000                     _TMR1H	set	4047
    93  0000                     _PIR1bits	set	3998
    94                           
    95                           	psect	smallconst
    96  000800                     __psmallconst:
    97                           	opt stack 0
    98  000800  00                 	db	0
    99  000801                     STR_1:
   100  000801  C0                 	db	-64
   101  000802  F9                 	db	-7
   102  000803  A4                 	db	-92
   103  000804  B0                 	db	-80
   104  000805  99                 	db	-103
   105  000806  92                 	db	-110
   106  000807  82                 	db	-126
   107  000808  F8                 	db	-8
   108  000809  80                 	db	-128
   109  00080A  98                 	db	-104
   110  00080B  BF                 	db	-65
   111  00080C  FF                 	db	-1
   112  00080D  00                 	db	0
   113                           
   114                           ; #config settings
   115  00080E  00                 	db	0	; dummy byte at the end
   116  0000                     
   117                           	psect	cinit
   118  000A58                     __pcinit:
   119                           	opt stack 0
   120  000A58                     start_initialization:
   121                           	opt stack 0
   122  000A58                     __initialization:
   123                           	opt stack 0
   124                           
   125                           ; Initialize objects allocated to COMRAM (2 bytes)
   126                           ; load TBLPTR registers with __pidataCOMRAM
   127  000A58  0E12               	movlw	low __pidataCOMRAM
   128  000A5A  6EF6               	movwf	tblptrl,c
   129  000A5C  0E0B               	movlw	high __pidataCOMRAM
   130  000A5E  6EF7               	movwf	tblptrh,c
   131  000A60  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   132  000A62  6EF8               	movwf	tblptru,c
   133  000A64  0009               	tblrd		*+	;fetch initializer
   134  000A66  CFF5 F027          	movff	tablat,__pdataCOMRAM
   135  000A6A  0009               	tblrd		*+	;fetch initializer
   136  000A6C  CFF5 F028          	movff	tablat,__pdataCOMRAM+1
   137  000A70                     end_of_initialization:
   138                           	opt stack 0
   139  000A70                     __end_of__initialization:
   140                           	opt stack 0
   141  000A70  902A               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   142  000A72  922A               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   143  000A74  0E00               	movlw	low (__Lsmallconst shr (0+16))
   144  000A76  6EF8               	movwf	tblptru,c
   145  000A78  0E08               	movlw	high __Lsmallconst
   146  000A7A  6EF7               	movwf	tblptrh,c
   147  000A7C  0100               	movlb	0
   148  000A7E  EF41  F005         	goto	_main	;jump to C main() function
   149                           tblptru	equ	0xFF8
   150                           tblptrh	equ	0xFF7
   151                           tblptrl	equ	0xFF6
   152                           tablat	equ	0xFF5
   153                           
   154                           	psect	dataCOMRAM
   155  000027                     __pdataCOMRAM:
   156                           	opt stack 0
   157  000027                     _count:
   158                           	opt stack 0
   159  000027                     	ds	2
   160                           tblptru	equ	0xFF8
   161                           tblptrh	equ	0xFF7
   162                           tblptrl	equ	0xFF6
   163                           tablat	equ	0xFF5
   164                           
   165                           	psect	cstackCOMRAM
   166  000001                     __pcstackCOMRAM:
   167                           	opt stack 0
   168  000001                     ??_ISR:
   169  000001                     
   170                           ; 1 bytes @ 0x0
   171  000001                     	ds	18
   172  000013                     ??_select_disp:
   173  000013                     ?___lwdiv:
   174                           	opt stack 0
   175  000013                     ?___lwmod:
   176                           	opt stack 0
   177  000013                     wait_timer@n:
   178                           	opt stack 0
   179  000013                     dec_to_disp@num:
   180                           	opt stack 0
   181  000013                     clrf_ptr@ptr:
   182                           	opt stack 0
   183  000013                     ___lwdiv@dividend:
   184                           	opt stack 0
   185  000013                     ___lwmod@dividend:
   186                           	opt stack 0
   187                           
   188                           ; 2 bytes @ 0x12
   189  000013                     	ds	2
   190  000015                     clrf_ptr@len:
   191                           	opt stack 0
   192  000015                     select_disp@dig:
   193                           	opt stack 0
   194  000015                     ___lwdiv@divisor:
   195                           	opt stack 0
   196  000015                     ___lwmod@divisor:
   197                           	opt stack 0
   198                           
   199                           ; 2 bytes @ 0x14
   200  000015                     	ds	1
   201  000016                     clrf_ptr@v:
   202                           	opt stack 0
   203  000016                     show_count@ptr:
   204                           	opt stack 0
   205                           
   206                           ; 2 bytes @ 0x15
   207  000016                     	ds	1
   208  000017                     ___lwmod@counter:
   209                           	opt stack 0
   210  000017                     ___lwdiv@quotient:
   211                           	opt stack 0
   212                           
   213                           ; 2 bytes @ 0x16
   214  000017                     	ds	1
   215  000018                     show_count@i:
   216                           	opt stack 0
   217                           
   218                           ; 1 bytes @ 0x17
   219  000018                     	ds	1
   220  000019                     ___lwdiv@counter:
   221                           	opt stack 0
   222                           
   223                           ; 1 bytes @ 0x18
   224  000019                     	ds	1
   225  00001A                     num_to_arr_num@ptr:
   226                           	opt stack 0
   227                           
   228                           ; 2 bytes @ 0x19
   229  00001A                     	ds	2
   230  00001C                     num_to_arr_num@num:
   231                           	opt stack 0
   232                           
   233                           ; 2 bytes @ 0x1B
   234  00001C                     	ds	2
   235  00001E                     num_to_arr_num@len:
   236                           	opt stack 0
   237                           
   238                           ; 1 bytes @ 0x1D
   239  00001E                     	ds	1
   240  00001F                     main@Display:
   241                           	opt stack 0
   242                           
   243                           ; 8 bytes @ 0x1E
   244  00001F                     	ds	8
   245                           tblptru	equ	0xFF8
   246                           tblptrh	equ	0xFF7
   247                           tblptrl	equ	0xFF6
   248                           tablat	equ	0xFF5
   249                           
   250 ;;
   251 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   252 ;;
   253 ;; *************** function _main *****************
   254 ;; Defined at:
   255 ;;		line 31 in file "main.c"
   256 ;; Parameters:    Size  Location     Type
   257 ;;		None
   258 ;; Auto vars:     Size  Location     Type
   259 ;;  Display         8   30[COMRAM] unsigned char [8]
   260 ;; Return value:  Size  Location     Type
   261 ;;                  1    wreg      void 
   262 ;; Registers used:
   263 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   264 ;; Tracked objects:
   265 ;;		On entry : 0/0
   266 ;;		On exit  : 0/0
   267 ;;		Unchanged: 0/0
   268 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   269 ;;      Params:         0       0       0       0       0       0       0       0       0
   270 ;;      Locals:         8       0       0       0       0       0       0       0       0
   271 ;;      Temps:          0       0       0       0       0       0       0       0       0
   272 ;;      Totals:         8       0       0       0       0       0       0       0       0
   273 ;;Total ram usage:        8 bytes
   274 ;; Hardware stack levels required when called:    3
   275 ;; This function calls:
   276 ;;		_num_to_arr_num
   277 ;;		_setup
   278 ;;		_show_count
   279 ;; This function is called by:
   280 ;;		Startup code after reset
   281 ;; This function uses a non-reentrant model
   282 ;;
   283                           
   284                           	psect	text0
   285  000A82                     __ptext0:
   286                           	opt stack 0
   287  000A82                     _main:
   288                           	opt stack 28
   289                           
   290                           ;main.c: 32: setup();
   291                           
   292                           ;incstack = 0
   293  000A82  ECF7  F004         	call	_setup	;wreg free
   294  000A86                     
   295                           ;main.c: 35: num_to_arr_num(Display,count,8);
   296  000A86  0E1F               	movlw	low main@Display
   297  000A88  6E1A               	movwf	num_to_arr_num@ptr,c
   298  000A8A  0E00               	movlw	high main@Display
   299  000A8C  6E1B               	movwf	num_to_arr_num@ptr+1,c
   300  000A8E  C027  F01C         	movff	_count,num_to_arr_num@num
   301  000A92  C028  F01D         	movff	_count+1,num_to_arr_num@num+1
   302  000A96  0E08               	movlw	8
   303  000A98  6E1E               	movwf	num_to_arr_num@len,c
   304  000A9A  EC6B  F004         	call	_num_to_arr_num	;wreg free
   305                           
   306                           ;main.c: 36: show_count(Display);
   307  000A9E  0E1F               	movlw	low main@Display
   308  000AA0  6E16               	movwf	show_count@ptr,c
   309  000AA2  0E00               	movlw	high main@Display
   310  000AA4  6E17               	movwf	show_count@ptr+1,c
   311  000AA6  EC12  F005         	call	_show_count	;wreg free
   312                           
   313                           ;main.c: 37: }
   314  000AAA  D7ED               	goto	l67
   315  000AAC                     __end_of_main:
   316                           	opt stack 0
   317                           tblptru	equ	0xFF8
   318                           tblptrh	equ	0xFF7
   319                           tblptrl	equ	0xFF6
   320                           tablat	equ	0xFF5
   321                           
   322 ;; *************** function _show_count *****************
   323 ;; Defined at:
   324 ;;		line 75 in file "main.c"
   325 ;; Parameters:    Size  Location     Type
   326 ;;  ptr             2   21[COMRAM] PTR unsigned char 
   327 ;;		 -> main@Display(8), 
   328 ;; Auto vars:     Size  Location     Type
   329 ;;  i               1   23[COMRAM] unsigned char 
   330 ;; Return value:  Size  Location     Type
   331 ;;                  1    wreg      void 
   332 ;; Registers used:
   333 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   334 ;; Tracked objects:
   335 ;;		On entry : 0/0
   336 ;;		On exit  : 0/0
   337 ;;		Unchanged: 0/0
   338 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   339 ;;      Params:         2       0       0       0       0       0       0       0       0
   340 ;;      Locals:         1       0       0       0       0       0       0       0       0
   341 ;;      Temps:          0       0       0       0       0       0       0       0       0
   342 ;;      Totals:         3       0       0       0       0       0       0       0       0
   343 ;;Total ram usage:        3 bytes
   344 ;; Hardware stack levels used:    1
   345 ;; Hardware stack levels required when called:    2
   346 ;; This function calls:
   347 ;;		_dec_to_disp
   348 ;;		_select_disp
   349 ;;		_wait_timer
   350 ;; This function is called by:
   351 ;;		_main
   352 ;; This function uses a non-reentrant model
   353 ;;
   354                           
   355                           	psect	text1
   356  000A24                     __ptext1:
   357                           	opt stack 0
   358  000A24                     _show_count:
   359                           	opt stack 28
   360                           
   361                           ;main.c: 76: for(unsigned char i = 0;i<8;i++){
   362                           
   363                           ;incstack = 0
   364  000A24  0E00               	movlw	0
   365  000A26  6E18               	movwf	show_count@i,c
   366  000A28                     l931:
   367  000A28  0E07               	movlw	7
   368  000A2A  6418               	cpfsgt	show_count@i,c
   369  000A2C  D001               	goto	l95
   370  000A2E  0012               	return	
   371  000A30                     l95:
   372                           
   373                           ;main.c: 77: LATB = 0xFF;
   374  000A30  688A               	setf	3978,c	;volatile
   375                           
   376                           ;main.c: 78: LATD = dec_to_disp(*ptr++);
   377  000A32  C016  FFD9         	movff	show_count@ptr,fsr2l
   378  000A36  C017  FFDA         	movff	show_count@ptr+1,fsr2h
   379  000A3A  50DF               	movf	indf2,w,c
   380  000A3C  EC72  F005         	call	_dec_to_disp
   381  000A40  6E8C               	movwf	3980,c	;volatile
   382  000A42  4A16               	infsnz	show_count@ptr,f,c
   383  000A44  2A17               	incf	show_count@ptr+1,f,c
   384                           
   385                           ;main.c: 81: LATB = select_disp(i);
   386  000A46  5018               	movf	show_count@i,w,c
   387  000A48  EC56  F005         	call	_select_disp
   388  000A4C  6E8A               	movwf	3978,c	;volatile
   389                           
   390                           ;main.c: 82: wait_timer(1);
   391  000A4E  0E01               	movlw	1
   392  000A50  EC7E  F005         	call	_wait_timer
   393  000A54  2A18               	incf	show_count@i,f,c
   394  000A56  D7E8               	goto	l931
   395  000A58                     __end_of_show_count:
   396                           	opt stack 0
   397                           tblptru	equ	0xFF8
   398                           tblptrh	equ	0xFF7
   399                           tblptrl	equ	0xFF6
   400                           tablat	equ	0xFF5
   401                           indf2	equ	0xFDF
   402                           fsr2h	equ	0xFDA
   403                           fsr2l	equ	0xFD9
   404                           
   405 ;; *************** function _wait_timer *****************
   406 ;; Defined at:
   407 ;;		line 69 in file "main.c"
   408 ;; Parameters:    Size  Location     Type
   409 ;;  n               1    wreg     unsigned char 
   410 ;; Auto vars:     Size  Location     Type
   411 ;;  n               1   18[COMRAM] unsigned char 
   412 ;; Return value:  Size  Location     Type
   413 ;;                  1    wreg      void 
   414 ;; Registers used:
   415 ;;		wreg, status,2, status,0
   416 ;; Tracked objects:
   417 ;;		On entry : 0/0
   418 ;;		On exit  : 0/0
   419 ;;		Unchanged: 0/0
   420 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   421 ;;      Params:         0       0       0       0       0       0       0       0       0
   422 ;;      Locals:         1       0       0       0       0       0       0       0       0
   423 ;;      Temps:          0       0       0       0       0       0       0       0       0
   424 ;;      Totals:         1       0       0       0       0       0       0       0       0
   425 ;;Total ram usage:        1 bytes
   426 ;; Hardware stack levels used:    1
   427 ;; Hardware stack levels required when called:    1
   428 ;; This function calls:
   429 ;;		Nothing
   430 ;; This function is called by:
   431 ;;		_show_count
   432 ;; This function uses a non-reentrant model
   433 ;;
   434                           
   435                           	psect	text2
   436  000AFC                     __ptext2:
   437                           	opt stack 0
   438  000AFC                     _wait_timer:
   439                           	opt stack 28
   440                           
   441                           ;incstack = 0
   442                           ;wait_timer@n stored from wreg
   443  000AFC  6E13               	movwf	wait_timer@n,c
   444                           
   445                           ;main.c: 70: for(;n;n--){
   446  000AFE  D005               	goto	l86
   447  000B00                     l89:
   448  000B00  F000               	nop	
   449  000B02                     l88:
   450  000B02  A029               	btfss	_flag_t/(0+8),_flag_t& (0+7),c
   451  000B04  D7FD               	goto	l89
   452                           
   453                           ;main.c: 72: flag_t = 0;
   454  000B06  9029               	bcf	_flag_t/(0+8),_flag_t& (0+7),c
   455  000B08  0613               	decf	wait_timer@n,f,c
   456  000B0A                     l86:
   457  000B0A  5013               	movf	wait_timer@n,w,c
   458  000B0C  B4D8               	btfsc	status,2,c
   459  000B0E  0012               	return	
   460  000B10  D7F8               	goto	l88
   461  000B12                     __end_of_wait_timer:
   462                           	opt stack 0
   463                           tblptru	equ	0xFF8
   464                           tblptrh	equ	0xFF7
   465                           tblptrl	equ	0xFF6
   466                           tablat	equ	0xFF5
   467                           indf2	equ	0xFDF
   468                           fsr2h	equ	0xFDA
   469                           fsr2l	equ	0xFD9
   470                           status	equ	0xFD8
   471                           
   472 ;; *************** function _select_disp *****************
   473 ;; Defined at:
   474 ;;		line 85 in file "main.c"
   475 ;; Parameters:    Size  Location     Type
   476 ;;  dig             1    wreg     unsigned char 
   477 ;; Auto vars:     Size  Location     Type
   478 ;;  dig             1   20[COMRAM] unsigned char 
   479 ;; Return value:  Size  Location     Type
   480 ;;                  1    wreg      unsigned char 
   481 ;; Registers used:
   482 ;;		wreg, status,2, status,0
   483 ;; Tracked objects:
   484 ;;		On entry : 0/0
   485 ;;		On exit  : 0/0
   486 ;;		Unchanged: 0/0
   487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   488 ;;      Params:         0       0       0       0       0       0       0       0       0
   489 ;;      Locals:         1       0       0       0       0       0       0       0       0
   490 ;;      Temps:          2       0       0       0       0       0       0       0       0
   491 ;;      Totals:         3       0       0       0       0       0       0       0       0
   492 ;;Total ram usage:        3 bytes
   493 ;; Hardware stack levels used:    1
   494 ;; Hardware stack levels required when called:    1
   495 ;; This function calls:
   496 ;;		Nothing
   497 ;; This function is called by:
   498 ;;		_show_count
   499 ;; This function uses a non-reentrant model
   500 ;;
   501                           
   502                           	psect	text3
   503  000AAC                     __ptext3:
   504                           	opt stack 0
   505  000AAC                     _select_disp:
   506                           	opt stack 28
   507                           
   508                           ;incstack = 0
   509                           ;select_disp@dig stored from wreg
   510  000AAC  6E15               	movwf	select_disp@dig,c
   511                           
   512                           ;main.c: 86: return (unsigned char)~(1<<dig);
   513  000AAE  C015  F013         	movff	select_disp@dig,??_select_disp
   514  000AB2  0E01               	movlw	1
   515  000AB4  6E14               	movwf	(??_select_disp+1)& (0+255),c
   516  000AB6  2A13               	incf	??_select_disp,f,c
   517  000AB8  D002               	goto	u34
   518  000ABA                     u35:
   519  000ABA  90D8               	bcf	status,0,c
   520  000ABC  3614               	rlcf	??_select_disp+1,f,c
   521  000ABE                     u34:
   522  000ABE  2E13               	decfsz	??_select_disp,f,c
   523  000AC0  D7FC               	goto	u35
   524  000AC2  5014               	movf	??_select_disp+1,w,c
   525  000AC4  0AFF               	xorlw	255
   526  000AC6  0012               	return	
   527  000AC8                     __end_of_select_disp:
   528                           	opt stack 0
   529                           tblptru	equ	0xFF8
   530                           tblptrh	equ	0xFF7
   531                           tblptrl	equ	0xFF6
   532                           tablat	equ	0xFF5
   533                           indf2	equ	0xFDF
   534                           fsr2h	equ	0xFDA
   535                           fsr2l	equ	0xFD9
   536                           status	equ	0xFD8
   537                           
   538 ;; *************** function _dec_to_disp *****************
   539 ;; Defined at:
   540 ;;		line 88 in file "main.c"
   541 ;; Parameters:    Size  Location     Type
   542 ;;  num             1    wreg     unsigned char 
   543 ;; Auto vars:     Size  Location     Type
   544 ;;  num             1   18[COMRAM] unsigned char 
   545 ;; Return value:  Size  Location     Type
   546 ;;                  1    wreg      unsigned char 
   547 ;; Registers used:
   548 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
   549 ;; Tracked objects:
   550 ;;		On entry : 0/0
   551 ;;		On exit  : 0/0
   552 ;;		Unchanged: 0/0
   553 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   554 ;;      Params:         0       0       0       0       0       0       0       0       0
   555 ;;      Locals:         1       0       0       0       0       0       0       0       0
   556 ;;      Temps:          0       0       0       0       0       0       0       0       0
   557 ;;      Totals:         1       0       0       0       0       0       0       0       0
   558 ;;Total ram usage:        1 bytes
   559 ;; Hardware stack levels used:    1
   560 ;; Hardware stack levels required when called:    1
   561 ;; This function calls:
   562 ;;		Nothing
   563 ;; This function is called by:
   564 ;;		_show_count
   565 ;; This function uses a non-reentrant model
   566 ;;
   567                           
   568                           	psect	text4
   569  000AE4                     __ptext4:
   570                           	opt stack 0
   571  000AE4                     _dec_to_disp:
   572                           	opt stack 28
   573                           
   574                           ;incstack = 0
   575                           ;dec_to_disp@num stored from wreg
   576  000AE4  6E13               	movwf	dec_to_disp@num,c
   577                           
   578                           ;main.c: 91: return *((unsigned char *)"\xC0\xF9\xA4\xB0\x99\x92\x82\xF8\x80\x98\xBF\xFF
      +                          " + num);
   579  000AE6  5013               	movf	dec_to_disp@num,w,c
   580  000AE8  0D01               	mullw	1
   581  000AEA  0E01               	movlw	low STR_1
   582  000AEC  24F3               	addwf	prodl,w,c
   583  000AEE  6EF6               	movwf	tblptrl,c
   584  000AF0  0E08               	movlw	high STR_1
   585  000AF2  20F4               	addwfc	prodh,w,c
   586  000AF4  6EF7               	movwf	tblptrh,c
   587  000AF6                     	if	0	;There are less than 3 active tblptr bytes
   588  000AF6                     	endif
   589  000AF6  0008               	tblrd		*
   590  000AF8  50F5               	movf	tablat,w,c
   591  000AFA  0012               	return	
   592  000AFC                     __end_of_dec_to_disp:
   593                           	opt stack 0
   594                           tblptru	equ	0xFF8
   595                           tblptrh	equ	0xFF7
   596                           tblptrl	equ	0xFF6
   597                           tablat	equ	0xFF5
   598                           prodh	equ	0xFF4
   599                           prodl	equ	0xFF3
   600                           indf2	equ	0xFDF
   601                           fsr2h	equ	0xFDA
   602                           fsr2l	equ	0xFD9
   603                           status	equ	0xFD8
   604                           
   605 ;; *************** function _setup *****************
   606 ;; Defined at:
   607 ;;		line 39 in file "main.c"
   608 ;; Parameters:    Size  Location     Type
   609 ;;		None
   610 ;; Auto vars:     Size  Location     Type
   611 ;;		None
   612 ;; Return value:  Size  Location     Type
   613 ;;                  1    wreg      void 
   614 ;; Registers used:
   615 ;;		wreg, status,2
   616 ;; Tracked objects:
   617 ;;		On entry : 0/0
   618 ;;		On exit  : 0/0
   619 ;;		Unchanged: 0/0
   620 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   621 ;;      Params:         0       0       0       0       0       0       0       0       0
   622 ;;      Locals:         0       0       0       0       0       0       0       0       0
   623 ;;      Temps:          0       0       0       0       0       0       0       0       0
   624 ;;      Totals:         0       0       0       0       0       0       0       0       0
   625 ;;Total ram usage:        0 bytes
   626 ;; Hardware stack levels used:    1
   627 ;; Hardware stack levels required when called:    1
   628 ;; This function calls:
   629 ;;		Nothing
   630 ;; This function is called by:
   631 ;;		_main
   632 ;; This function uses a non-reentrant model
   633 ;;
   634                           
   635                           	psect	text5
   636  0009EE                     __ptext5:
   637                           	opt stack 0
   638  0009EE                     _setup:
   639                           	opt stack 29
   640                           
   641                           ;main.c: 40: INTCONbits.GIEH=0;
   642                           
   643                           ;incstack = 0
   644  0009EE  9EF2               	bcf	intcon,7,c	;volatile
   645                           
   646                           ;main.c: 41: ADCON1 = 0x0F;
   647  0009F0  0E0F               	movlw	15
   648  0009F2  6EC1               	movwf	4033,c	;volatile
   649                           
   650                           ;main.c: 42: CMCON = 0x07;
   651  0009F4  0E07               	movlw	7
   652  0009F6  6EB4               	movwf	4020,c	;volatile
   653                           
   654                           ;main.c: 43: TRISA = 0xFF;
   655  0009F8  6892               	setf	3986,c	;volatile
   656                           
   657                           ;main.c: 44: TRISD = 0x00;
   658  0009FA  0E00               	movlw	0
   659  0009FC  6E95               	movwf	3989,c	;volatile
   660                           
   661                           ;main.c: 45: TRISB = 0x00;
   662  0009FE  0E00               	movlw	0
   663  000A00  6E93               	movwf	3987,c	;volatile
   664                           
   665                           ;main.c: 46: LATA = LATB = 0xFF;
   666  000A02  688A               	setf	3978,c	;volatile
   667  000A04  6889               	setf	3977,c	;volatile
   668                           
   669                           ;main.c: 47: T0CON = 0b10001000;
   670  000A06  0E88               	movlw	136
   671  000A08  6ED5               	movwf	4053,c	;volatile
   672                           
   673                           ;main.c: 48: INTCONbits.TMR0IF = 0;
   674  000A0A  94F2               	bcf	intcon,2,c	;volatile
   675                           
   676                           ;main.c: 49: INTCONbits.TMR0IE = 1;
   677  000A0C  8AF2               	bsf	intcon,5,c	;volatile
   678                           
   679                           ;main.c: 50: INTCON2bits.TMR0IP = 1;
   680  000A0E  84F1               	bsf	intcon2,2,c	;volatile
   681                           
   682                           ;main.c: 51: T1CON = 0b00001011;
   683  000A10  0E0B               	movlw	11
   684  000A12  6ECD               	movwf	4045,c	;volatile
   685                           
   686                           ;main.c: 52: PIR1bits.TMR1IF = 0;
   687  000A14  909E               	bcf	3998,0,c	;volatile
   688                           
   689                           ;main.c: 53: PIE1bits.TMR1IE = 1;
   690  000A16  809D               	bsf	3997,0,c	;volatile
   691                           
   692                           ;main.c: 54: IPR1bits.TMR1IP = 1;
   693  000A18  809F               	bsf	3999,0,c	;volatile
   694                           
   695                           ;main.c: 55: RCONbits.IPEN = 1;
   696  000A1A  8ED0               	bsf	4048,7,c	;volatile
   697                           
   698                           ;main.c: 56: INTCONbits.GIEL = 0;
   699  000A1C  9CF2               	bcf	intcon,6,c	;volatile
   700                           
   701                           ;main.c: 57: INTCONbits.GIEH = 1;
   702  000A1E  8EF2               	bsf	intcon,7,c	;volatile
   703                           
   704                           ;main.c: 58: flag_t = 1;
   705  000A20  8029               	bsf	_flag_t/(0+8),_flag_t& (0+7),c
   706  000A22  0012               	return		;funcret
   707  000A24                     __end_of_setup:
   708                           	opt stack 0
   709                           tblptru	equ	0xFF8
   710                           tblptrh	equ	0xFF7
   711                           tblptrl	equ	0xFF6
   712                           tablat	equ	0xFF5
   713                           prodh	equ	0xFF4
   714                           prodl	equ	0xFF3
   715                           intcon	equ	0xFF2
   716                           intcon2	equ	0xFF1
   717                           indf2	equ	0xFDF
   718                           fsr2h	equ	0xFDA
   719                           fsr2l	equ	0xFD9
   720                           status	equ	0xFD8
   721                           
   722 ;; *************** function _num_to_arr_num *****************
   723 ;; Defined at:
   724 ;;		line 63 in file "main.c"
   725 ;; Parameters:    Size  Location     Type
   726 ;;  ptr             2   25[COMRAM] PTR unsigned char 
   727 ;;		 -> main@Display(8), 
   728 ;;  num             2   27[COMRAM] unsigned int 
   729 ;;  len             1   29[COMRAM] unsigned char 
   730 ;; Auto vars:     Size  Location     Type
   731 ;;		None
   732 ;; Return value:  Size  Location     Type
   733 ;;                  1    wreg      void 
   734 ;; Registers used:
   735 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   736 ;; Tracked objects:
   737 ;;		On entry : 0/0
   738 ;;		On exit  : 0/0
   739 ;;		Unchanged: 0/0
   740 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   741 ;;      Params:         5       0       0       0       0       0       0       0       0
   742 ;;      Locals:         0       0       0       0       0       0       0       0       0
   743 ;;      Temps:          0       0       0       0       0       0       0       0       0
   744 ;;      Totals:         5       0       0       0       0       0       0       0       0
   745 ;;Total ram usage:        5 bytes
   746 ;; Hardware stack levels used:    1
   747 ;; Hardware stack levels required when called:    2
   748 ;; This function calls:
   749 ;;		___lwdiv
   750 ;;		___lwmod
   751 ;;		_clrf_ptr
   752 ;; This function is called by:
   753 ;;		_main
   754 ;; This function uses a non-reentrant model
   755 ;;
   756                           
   757                           	psect	text6
   758  0008D6                     __ptext6:
   759                           	opt stack 0
   760  0008D6                     _num_to_arr_num:
   761                           	opt stack 28
   762                           
   763                           ;main.c: 66: for(clrf_ptr(ptr,len,11);num>9;*ptr++ = num%10,num/=10);
   764                           
   765                           ;incstack = 0
   766  0008D6  C01A  F013         	movff	num_to_arr_num@ptr,clrf_ptr@ptr
   767  0008DA  C01B  F014         	movff	num_to_arr_num@ptr+1,clrf_ptr@ptr+1
   768  0008DE  C01E  F015         	movff	num_to_arr_num@len,clrf_ptr@len
   769  0008E2  0E0B               	movlw	11
   770  0008E4  6E16               	movwf	clrf_ptr@v,c
   771  0008E6  EC64  F005         	call	_clrf_ptr	;wreg free
   772  0008EA                     l915:
   773  0008EA  501D               	movf	num_to_arr_num@num+1,w,c
   774  0008EC  E104               	bnz	l919
   775  0008EE  0E0A               	movlw	10
   776  0008F0  5C1C               	subwf	num_to_arr_num@num,w,c
   777  0008F2  A0D8               	btfss	status,0,c
   778  0008F4  D021               	goto	u240
   779  0008F6                     l919:
   780  0008F6  C01C  F013         	movff	num_to_arr_num@num,___lwmod@dividend
   781  0008FA  C01D  F014         	movff	num_to_arr_num@num+1,___lwmod@dividend+1
   782  0008FE  0E00               	movlw	0
   783  000900  6E16               	movwf	___lwmod@divisor+1,c
   784  000902  0E0A               	movlw	10
   785  000904  6E15               	movwf	___lwmod@divisor,c
   786  000906  ECD6  F004         	call	___lwmod	;wreg free
   787  00090A  5013               	movf	?___lwmod,w,c
   788  00090C  C01A  FFD9         	movff	num_to_arr_num@ptr,fsr2l
   789  000910  C01B  FFDA         	movff	num_to_arr_num@ptr+1,fsr2h
   790  000914  6EDF               	movwf	indf2,c
   791  000916  4A1A               	infsnz	num_to_arr_num@ptr,f,c
   792  000918  2A1B               	incf	num_to_arr_num@ptr+1,f,c
   793  00091A  C01C  F013         	movff	num_to_arr_num@num,___lwdiv@dividend
   794  00091E  C01D  F014         	movff	num_to_arr_num@num+1,___lwdiv@dividend+1
   795  000922  0E00               	movlw	0
   796  000924  6E16               	movwf	___lwdiv@divisor+1,c
   797  000926  0E0A               	movlw	10
   798  000928  6E15               	movwf	___lwdiv@divisor,c
   799  00092A  ECAD  F004         	call	___lwdiv	;wreg free
   800  00092E  C013  F01C         	movff	?___lwdiv,num_to_arr_num@num
   801  000932  C014  F01D         	movff	?___lwdiv+1,num_to_arr_num@num+1
   802  000936  D7D9               	goto	l915
   803  000938                     u240:
   804                           
   805                           ;main.c: 67: *ptr = num%10;
   806  000938  C01C  F013         	movff	num_to_arr_num@num,___lwmod@dividend
   807  00093C  C01D  F014         	movff	num_to_arr_num@num+1,___lwmod@dividend+1
   808  000940  0E00               	movlw	0
   809  000942  6E16               	movwf	___lwmod@divisor+1,c
   810  000944  0E0A               	movlw	10
   811  000946  6E15               	movwf	___lwmod@divisor,c
   812  000948  ECD6  F004         	call	___lwmod	;wreg free
   813  00094C  5013               	movf	?___lwmod,w,c
   814  00094E  C01A  FFD9         	movff	num_to_arr_num@ptr,fsr2l
   815  000952  C01B  FFDA         	movff	num_to_arr_num@ptr+1,fsr2h
   816  000956  6EDF               	movwf	indf2,c
   817  000958  0012               	return		;funcret
   818  00095A                     __end_of_num_to_arr_num:
   819                           	opt stack 0
   820                           tblptru	equ	0xFF8
   821                           tblptrh	equ	0xFF7
   822                           tblptrl	equ	0xFF6
   823                           tablat	equ	0xFF5
   824                           prodh	equ	0xFF4
   825                           prodl	equ	0xFF3
   826                           intcon	equ	0xFF2
   827                           intcon2	equ	0xFF1
   828                           indf2	equ	0xFDF
   829                           fsr2h	equ	0xFDA
   830                           fsr2l	equ	0xFD9
   831                           status	equ	0xFD8
   832                           
   833 ;; *************** function _clrf_ptr *****************
   834 ;; Defined at:
   835 ;;		line 60 in file "main.c"
   836 ;; Parameters:    Size  Location     Type
   837 ;;  ptr             2   18[COMRAM] PTR unsigned char 
   838 ;;		 -> main@Display(8), 
   839 ;;  len             1   20[COMRAM] unsigned char 
   840 ;;  v               1   21[COMRAM] unsigned char 
   841 ;; Auto vars:     Size  Location     Type
   842 ;;		None
   843 ;; Return value:  Size  Location     Type
   844 ;;                  1    wreg      void 
   845 ;; Registers used:
   846 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
   847 ;; Tracked objects:
   848 ;;		On entry : 0/0
   849 ;;		On exit  : 0/0
   850 ;;		Unchanged: 0/0
   851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   852 ;;      Params:         4       0       0       0       0       0       0       0       0
   853 ;;      Locals:         0       0       0       0       0       0       0       0       0
   854 ;;      Temps:          0       0       0       0       0       0       0       0       0
   855 ;;      Totals:         4       0       0       0       0       0       0       0       0
   856 ;;Total ram usage:        4 bytes
   857 ;; Hardware stack levels used:    1
   858 ;; Hardware stack levels required when called:    1
   859 ;; This function calls:
   860 ;;		Nothing
   861 ;; This function is called by:
   862 ;;		_num_to_arr_num
   863 ;; This function uses a non-reentrant model
   864 ;;
   865                           
   866                           	psect	text7
   867  000AC8                     __ptext7:
   868                           	opt stack 0
   869  000AC8                     _clrf_ptr:
   870                           	opt stack 28
   871                           
   872                           ;main.c: 61: while(--len) *(ptr + len) = v;
   873                           
   874                           ;incstack = 0
   875  000AC8  D00A               	goto	l75
   876  000ACA  5015               	movf	clrf_ptr@len,w,c
   877  000ACC  0D01               	mullw	1
   878  000ACE  50F3               	movf	prodl,w,c
   879  000AD0  2413               	addwf	clrf_ptr@ptr,w,c
   880  000AD2  6ED9               	movwf	fsr2l,c
   881  000AD4  50F4               	movf	prodh,w,c
   882  000AD6  2014               	addwfc	clrf_ptr@ptr+1,w,c
   883  000AD8  6EDA               	movwf	fsr2h,c
   884  000ADA  C016  FFDF         	movff	clrf_ptr@v,indf2
   885  000ADE                     l75:
   886  000ADE  2E15               	decfsz	clrf_ptr@len,f,c
   887  000AE0  D7F4               	goto	l76
   888  000AE2  0012               	return	
   889  000AE4                     __end_of_clrf_ptr:
   890                           	opt stack 0
   891                           tblptru	equ	0xFF8
   892                           tblptrh	equ	0xFF7
   893                           tblptrl	equ	0xFF6
   894                           tablat	equ	0xFF5
   895                           prodh	equ	0xFF4
   896                           prodl	equ	0xFF3
   897                           intcon	equ	0xFF2
   898                           intcon2	equ	0xFF1
   899                           indf2	equ	0xFDF
   900                           fsr2h	equ	0xFDA
   901                           fsr2l	equ	0xFD9
   902                           status	equ	0xFD8
   903                           
   904 ;; *************** function ___lwmod *****************
   905 ;; Defined at:
   906 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
   907 ;; Parameters:    Size  Location     Type
   908 ;;  dividend        2   18[COMRAM] unsigned int 
   909 ;;  divisor         2   20[COMRAM] unsigned int 
   910 ;; Auto vars:     Size  Location     Type
   911 ;;  counter         1   22[COMRAM] unsigned char 
   912 ;; Return value:  Size  Location     Type
   913 ;;                  2   18[COMRAM] unsigned int 
   914 ;; Registers used:
   915 ;;		wreg, status,2, status,0
   916 ;; Tracked objects:
   917 ;;		On entry : 0/0
   918 ;;		On exit  : 0/0
   919 ;;		Unchanged: 0/0
   920 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   921 ;;      Params:         4       0       0       0       0       0       0       0       0
   922 ;;      Locals:         1       0       0       0       0       0       0       0       0
   923 ;;      Temps:          0       0       0       0       0       0       0       0       0
   924 ;;      Totals:         5       0       0       0       0       0       0       0       0
   925 ;;Total ram usage:        5 bytes
   926 ;; Hardware stack levels used:    1
   927 ;; Hardware stack levels required when called:    1
   928 ;; This function calls:
   929 ;;		Nothing
   930 ;; This function is called by:
   931 ;;		_num_to_arr_num
   932 ;; This function uses a non-reentrant model
   933 ;;
   934                           
   935                           	psect	text8
   936  0009AC                     __ptext8:
   937                           	opt stack 0
   938  0009AC                     ___lwmod:
   939                           	opt stack 28
   940                           
   941                           ;incstack = 0
   942  0009AC  5015               	movf	___lwmod@divisor,w,c
   943  0009AE  1016               	iorwf	___lwmod@divisor+1,w,c
   944  0009B0  B4D8               	btfsc	status,2,c
   945  0009B2  D018               	goto	l522
   946  0009B4  0E01               	movlw	1
   947  0009B6  6E17               	movwf	___lwmod@counter,c
   948  0009B8  D004               	goto	l517
   949  0009BA  90D8               	bcf	status,0,c
   950  0009BC  3615               	rlcf	___lwmod@divisor,f,c
   951  0009BE  3616               	rlcf	___lwmod@divisor+1,f,c
   952  0009C0  2A17               	incf	___lwmod@counter,f,c
   953  0009C2                     l517:
   954  0009C2  AE16               	btfss	___lwmod@divisor+1,7,c
   955  0009C4  D7FA               	goto	l518
   956  0009C6                     u210:
   957  0009C6  5015               	movf	___lwmod@divisor,w,c
   958  0009C8  5C13               	subwf	___lwmod@dividend,w,c
   959  0009CA  5016               	movf	___lwmod@divisor+1,w,c
   960  0009CC  5814               	subwfb	___lwmod@dividend+1,w,c
   961  0009CE  A0D8               	btfss	status,0,c
   962  0009D0  D004               	goto	l521
   963  0009D2  5015               	movf	___lwmod@divisor,w,c
   964  0009D4  5E13               	subwf	___lwmod@dividend,f,c
   965  0009D6  5016               	movf	___lwmod@divisor+1,w,c
   966  0009D8  5A14               	subwfb	___lwmod@dividend+1,f,c
   967  0009DA                     l521:
   968  0009DA  90D8               	bcf	status,0,c
   969  0009DC  3216               	rrcf	___lwmod@divisor+1,f,c
   970  0009DE  3215               	rrcf	___lwmod@divisor,f,c
   971  0009E0  2E17               	decfsz	___lwmod@counter,f,c
   972  0009E2  D7F1               	goto	u210
   973  0009E4                     l522:
   974  0009E4  C013  F013         	movff	___lwmod@dividend,?___lwmod
   975  0009E8  C014  F014         	movff	___lwmod@dividend+1,?___lwmod+1
   976  0009EC  0012               	return		;funcret
   977  0009EE                     __end_of___lwmod:
   978                           	opt stack 0
   979                           tblptru	equ	0xFF8
   980                           tblptrh	equ	0xFF7
   981                           tblptrl	equ	0xFF6
   982                           tablat	equ	0xFF5
   983                           prodh	equ	0xFF4
   984                           prodl	equ	0xFF3
   985                           intcon	equ	0xFF2
   986                           intcon2	equ	0xFF1
   987                           indf2	equ	0xFDF
   988                           fsr2h	equ	0xFDA
   989                           fsr2l	equ	0xFD9
   990                           status	equ	0xFD8
   991                           
   992 ;; *************** function ___lwdiv *****************
   993 ;; Defined at:
   994 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
   995 ;; Parameters:    Size  Location     Type
   996 ;;  dividend        2   18[COMRAM] unsigned int 
   997 ;;  divisor         2   20[COMRAM] unsigned int 
   998 ;; Auto vars:     Size  Location     Type
   999 ;;  quotient        2   22[COMRAM] unsigned int 
  1000 ;;  counter         1   24[COMRAM] unsigned char 
  1001 ;; Return value:  Size  Location     Type
  1002 ;;                  2   18[COMRAM] unsigned int 
  1003 ;; Registers used:
  1004 ;;		wreg, status,2, status,0
  1005 ;; Tracked objects:
  1006 ;;		On entry : 0/0
  1007 ;;		On exit  : 0/0
  1008 ;;		Unchanged: 0/0
  1009 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1010 ;;      Params:         4       0       0       0       0       0       0       0       0
  1011 ;;      Locals:         3       0       0       0       0       0       0       0       0
  1012 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1013 ;;      Totals:         7       0       0       0       0       0       0       0       0
  1014 ;;Total ram usage:        7 bytes
  1015 ;; Hardware stack levels used:    1
  1016 ;; Hardware stack levels required when called:    1
  1017 ;; This function calls:
  1018 ;;		Nothing
  1019 ;; This function is called by:
  1020 ;;		_num_to_arr_num
  1021 ;; This function uses a non-reentrant model
  1022 ;;
  1023                           
  1024                           	psect	text9
  1025  00095A                     __ptext9:
  1026                           	opt stack 0
  1027  00095A                     ___lwdiv:
  1028                           	opt stack 28
  1029                           
  1030                           ;incstack = 0
  1031  00095A  0E00               	movlw	0
  1032  00095C  6E18               	movwf	___lwdiv@quotient+1,c
  1033  00095E  0E00               	movlw	0
  1034  000960  6E17               	movwf	___lwdiv@quotient,c
  1035  000962  5015               	movf	___lwdiv@divisor,w,c
  1036  000964  1016               	iorwf	___lwdiv@divisor+1,w,c
  1037  000966  B4D8               	btfsc	status,2,c
  1038  000968  D01C               	goto	l512
  1039  00096A  0E01               	movlw	1
  1040  00096C  6E19               	movwf	___lwdiv@counter,c
  1041  00096E  D004               	goto	l507
  1042  000970  90D8               	bcf	status,0,c
  1043  000972  3615               	rlcf	___lwdiv@divisor,f,c
  1044  000974  3616               	rlcf	___lwdiv@divisor+1,f,c
  1045  000976  2A19               	incf	___lwdiv@counter,f,c
  1046  000978                     l507:
  1047  000978  AE16               	btfss	___lwdiv@divisor+1,7,c
  1048  00097A  D7FA               	goto	l508
  1049  00097C                     u180:
  1050  00097C  90D8               	bcf	status,0,c
  1051  00097E  3617               	rlcf	___lwdiv@quotient,f,c
  1052  000980  3618               	rlcf	___lwdiv@quotient+1,f,c
  1053  000982  5015               	movf	___lwdiv@divisor,w,c
  1054  000984  5C13               	subwf	___lwdiv@dividend,w,c
  1055  000986  5016               	movf	___lwdiv@divisor+1,w,c
  1056  000988  5814               	subwfb	___lwdiv@dividend+1,w,c
  1057  00098A  A0D8               	btfss	status,0,c
  1058  00098C  D005               	goto	l511
  1059  00098E  5015               	movf	___lwdiv@divisor,w,c
  1060  000990  5E13               	subwf	___lwdiv@dividend,f,c
  1061  000992  5016               	movf	___lwdiv@divisor+1,w,c
  1062  000994  5A14               	subwfb	___lwdiv@dividend+1,f,c
  1063  000996  8017               	bsf	___lwdiv@quotient,0,c
  1064  000998                     l511:
  1065  000998  90D8               	bcf	status,0,c
  1066  00099A  3216               	rrcf	___lwdiv@divisor+1,f,c
  1067  00099C  3215               	rrcf	___lwdiv@divisor,f,c
  1068  00099E  2E19               	decfsz	___lwdiv@counter,f,c
  1069  0009A0  D7ED               	goto	u180
  1070  0009A2                     l512:
  1071  0009A2  C017  F013         	movff	___lwdiv@quotient,?___lwdiv
  1072  0009A6  C018  F014         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1073  0009AA  0012               	return		;funcret
  1074  0009AC                     __end_of___lwdiv:
  1075                           	opt stack 0
  1076                           tblptru	equ	0xFF8
  1077                           tblptrh	equ	0xFF7
  1078                           tblptrl	equ	0xFF6
  1079                           tablat	equ	0xFF5
  1080                           prodh	equ	0xFF4
  1081                           prodl	equ	0xFF3
  1082                           intcon	equ	0xFF2
  1083                           intcon2	equ	0xFF1
  1084                           indf2	equ	0xFDF
  1085                           fsr2h	equ	0xFDA
  1086                           fsr2l	equ	0xFD9
  1087                           status	equ	0xFD8
  1088                           
  1089 ;; *************** function _ISR *****************
  1090 ;; Defined at:
  1091 ;;		line 17 in file "main.c"
  1092 ;; Parameters:    Size  Location     Type
  1093 ;;		None
  1094 ;; Auto vars:     Size  Location     Type
  1095 ;;		None
  1096 ;; Return value:  Size  Location     Type
  1097 ;;                  1    wreg      void 
  1098 ;; Registers used:
  1099 ;;		wreg, status,2, status,0
  1100 ;; Tracked objects:
  1101 ;;		On entry : 0/0
  1102 ;;		On exit  : 0/0
  1103 ;;		Unchanged: 0/0
  1104 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1105 ;;      Params:         0       0       0       0       0       0       0       0       0
  1106 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1107 ;;      Temps:         18       0       0       0       0       0       0       0       0
  1108 ;;      Totals:        18       0       0       0       0       0       0       0       0
  1109 ;;Total ram usage:       18 bytes
  1110 ;; Hardware stack levels used:    1
  1111 ;; This function calls:
  1112 ;;		Nothing
  1113 ;; This function is called by:
  1114 ;;		Interrupt level 2
  1115 ;; This function uses a non-reentrant model
  1116 ;;
  1117                           
  1118                           	psect	intcode
  1119  000008                     __pintcode:
  1120                           	opt stack 0
  1121  000008                     _ISR:
  1122                           	opt stack 28
  1123                           
  1124                           ;incstack = 0
  1125  000008  822A               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  1126  00000A  ED08  F004         	call	int_func,f	;refresh shadow registers
  1127                           tblptru	equ	0xFF8
  1128                           tblptrh	equ	0xFF7
  1129                           tblptrl	equ	0xFF6
  1130                           tablat	equ	0xFF5
  1131                           prodh	equ	0xFF4
  1132                           prodl	equ	0xFF3
  1133                           intcon	equ	0xFF2
  1134                           intcon2	equ	0xFF1
  1135                           indf2	equ	0xFDF
  1136                           fsr2h	equ	0xFDA
  1137                           fsr2l	equ	0xFD9
  1138                           status	equ	0xFD8
  1139                           
  1140                           	psect	intcode_body
  1141  000810                     __pintcode_body:
  1142                           	opt stack 28
  1143  000810                     int_func:
  1144                           	opt stack 28
  1145  000810  0006               	pop		; remove dummy address from shadow register refresh
  1146  000812  CFFA F001          	movff	pclath,??_ISR
  1147  000816  CFFB F002          	movff	pclatu,??_ISR+1
  1148  00081A  CFE9 F003          	movff	fsr0l,??_ISR+2
  1149  00081E  CFEA F004          	movff	fsr0h,??_ISR+3
  1150  000822  CFE1 F005          	movff	fsr1l,??_ISR+4
  1151  000826  CFE2 F006          	movff	fsr1h,??_ISR+5
  1152  00082A  CFD9 F007          	movff	fsr2l,??_ISR+6
  1153  00082E  CFDA F008          	movff	fsr2h,??_ISR+7
  1154  000832  CFF3 F009          	movff	prodl,??_ISR+8
  1155  000836  CFF4 F00A          	movff	prodh,??_ISR+9
  1156  00083A  CFF6 F00B          	movff	tblptrl,??_ISR+10
  1157  00083E  CFF7 F00C          	movff	tblptrh,??_ISR+11
  1158  000842  CFF8 F00D          	movff	tblptru,??_ISR+12
  1159  000846  CFF5 F00E          	movff	tablat,??_ISR+13
  1160  00084A  C02A  F00F         	movff	btemp,??_ISR+14
  1161  00084E  C02B  F010         	movff	btemp+1,??_ISR+15
  1162  000852  C02C  F011         	movff	btemp+2,??_ISR+16
  1163  000856  C02D  F012         	movff	btemp+3,??_ISR+17
  1164                           
  1165                           ;main.c: 18: if(PIR1bits.TMR1IF){
  1166  00085A  A09E               	btfss	3998,0,c	;volatile
  1167  00085C  D00E               	goto	i2l60
  1168                           
  1169                           ;main.c: 19: TMR1H |= 0x80;
  1170  00085E  8ECF               	bsf	4047,7,c	;volatile
  1171                           
  1172                           ;main.c: 20: PIR1bits.TMR1IF = 0;
  1173  000860  909E               	bcf	3998,0,c	;volatile
  1174                           
  1175                           ;main.c: 21: if(++count>9999)
  1176  000862  4A27               	infsnz	_count,f,c
  1177  000864  2A28               	incf	_count+1,f,c
  1178  000866  0E10               	movlw	16
  1179  000868  5C27               	subwf	_count,w,c
  1180  00086A  0E27               	movlw	39
  1181  00086C  5828               	subwfb	_count+1,w,c
  1182  00086E  A0D8               	btfss	status,0,c
  1183  000870  D004               	goto	i2l60
  1184                           
  1185                           ;main.c: 22: count=0;
  1186  000872  0E00               	movlw	0
  1187  000874  6E28               	movwf	_count+1,c
  1188  000876  0E00               	movlw	0
  1189  000878  6E27               	movwf	_count,c
  1190  00087A                     i2l60:
  1191                           
  1192                           ;main.c: 23: }
  1193                           ;main.c: 24: if(INTCONbits.TMR0IF){
  1194  00087A  A4F2               	btfss	intcon,2,c	;volatile
  1195  00087C  D006               	goto	i2l61
  1196                           
  1197                           ;main.c: 25: TMR0L = 0x78;
  1198  00087E  0E78               	movlw	120
  1199  000880  6ED6               	movwf	4054,c	;volatile
  1200                           
  1201                           ;main.c: 26: TMR0H = 0xEC;
  1202  000882  0EEC               	movlw	236
  1203  000884  6ED7               	movwf	4055,c	;volatile
  1204                           
  1205                           ;main.c: 27: INTCONbits.TMR0IF = 0;
  1206  000886  94F2               	bcf	intcon,2,c	;volatile
  1207                           
  1208                           ;main.c: 28: flag_t = 1;
  1209  000888  8029               	bsf	_flag_t/(0+8),_flag_t& (0+7),c
  1210  00088A                     i2l61:
  1211  00088A  C012  F02D         	movff	??_ISR+17,btemp+3
  1212  00088E  C011  F02C         	movff	??_ISR+16,btemp+2
  1213  000892  C010  F02B         	movff	??_ISR+15,btemp+1
  1214  000896  C00F  F02A         	movff	??_ISR+14,btemp
  1215  00089A  C00E  FFF5         	movff	??_ISR+13,tablat
  1216  00089E  C00D  FFF8         	movff	??_ISR+12,tblptru
  1217  0008A2  C00C  FFF7         	movff	??_ISR+11,tblptrh
  1218  0008A6  C00B  FFF6         	movff	??_ISR+10,tblptrl
  1219  0008AA  C00A  FFF4         	movff	??_ISR+9,prodh
  1220  0008AE  C009  FFF3         	movff	??_ISR+8,prodl
  1221  0008B2  C008  FFDA         	movff	??_ISR+7,fsr2h
  1222  0008B6  C007  FFD9         	movff	??_ISR+6,fsr2l
  1223  0008BA  C006  FFE2         	movff	??_ISR+5,fsr1h
  1224  0008BE  C005  FFE1         	movff	??_ISR+4,fsr1l
  1225  0008C2  C004  FFEA         	movff	??_ISR+3,fsr0h
  1226  0008C6  C003  FFE9         	movff	??_ISR+2,fsr0l
  1227  0008CA  C002  FFFB         	movff	??_ISR+1,pclatu
  1228  0008CE  C001  FFFA         	movff	??_ISR,pclath
  1229  0008D2  922A               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  1230  0008D4  0011               	retfie		f
  1231  0008D6                     __end_of_ISR:
  1232                           	opt stack 0
  1233                           pclatu	equ	0xFFB
  1234                           pclath	equ	0xFFA
  1235                           tblptru	equ	0xFF8
  1236                           tblptrh	equ	0xFF7
  1237                           tblptrl	equ	0xFF6
  1238                           tablat	equ	0xFF5
  1239                           prodh	equ	0xFF4
  1240                           prodl	equ	0xFF3
  1241                           intcon	equ	0xFF2
  1242                           intcon2	equ	0xFF1
  1243                           fsr0h	equ	0xFEA
  1244                           fsr0l	equ	0xFE9
  1245                           fsr1h	equ	0xFE2
  1246                           fsr1l	equ	0xFE1
  1247                           indf2	equ	0xFDF
  1248                           fsr2h	equ	0xFDA
  1249                           fsr2l	equ	0xFD9
  1250                           status	equ	0xFD8
  1251                           pclatu	equ	0xFFB
  1252                           pclath	equ	0xFFA
  1253                           tblptru	equ	0xFF8
  1254                           tblptrh	equ	0xFF7
  1255                           tblptrl	equ	0xFF6
  1256                           tablat	equ	0xFF5
  1257                           prodh	equ	0xFF4
  1258                           prodl	equ	0xFF3
  1259                           intcon	equ	0xFF2
  1260                           intcon2	equ	0xFF1
  1261                           fsr0h	equ	0xFEA
  1262                           fsr0l	equ	0xFE9
  1263                           fsr1h	equ	0xFE2
  1264                           fsr1l	equ	0xFE1
  1265                           indf2	equ	0xFDF
  1266                           fsr2h	equ	0xFDA
  1267                           fsr2l	equ	0xFD9
  1268                           status	equ	0xFD8
  1269                           
  1270                           	psect	rparam
  1271  0000                     pclatu	equ	0xFFB
  1272                           pclath	equ	0xFFA
  1273                           tblptru	equ	0xFF8
  1274                           tblptrh	equ	0xFF7
  1275                           tblptrl	equ	0xFF6
  1276                           tablat	equ	0xFF5
  1277                           prodh	equ	0xFF4
  1278                           prodl	equ	0xFF3
  1279                           intcon	equ	0xFF2
  1280                           intcon2	equ	0xFF1
  1281                           fsr0h	equ	0xFEA
  1282                           fsr0l	equ	0xFE9
  1283                           fsr1h	equ	0xFE2
  1284                           fsr1l	equ	0xFE1
  1285                           indf2	equ	0xFDF
  1286                           fsr2h	equ	0xFDA
  1287                           fsr2l	equ	0xFD9
  1288                           status	equ	0xFD8
  1289                           
  1290                           	psect	temp
  1291  00002A                     btemp:
  1292                           	opt stack 0
  1293  00002A                     	ds	1
  1294  0000                     int$flags	set	btemp
  1295  0000                     wtemp6	set	btemp+1
  1296                           pclatu	equ	0xFFB
  1297                           pclath	equ	0xFFA
  1298                           tblptru	equ	0xFF8
  1299                           tblptrh	equ	0xFF7
  1300                           tblptrl	equ	0xFF6
  1301                           tablat	equ	0xFF5
  1302                           prodh	equ	0xFF4
  1303                           prodl	equ	0xFF3
  1304                           intcon	equ	0xFF2
  1305                           intcon2	equ	0xFF1
  1306                           fsr0h	equ	0xFEA
  1307                           fsr0l	equ	0xFE9
  1308                           fsr1h	equ	0xFE2
  1309                           fsr1l	equ	0xFE1
  1310                           indf2	equ	0xFDF
  1311                           fsr2h	equ	0xFDA
  1312                           fsr2l	equ	0xFD9
  1313                           status	equ	0xFD8


Data Sizes:
    Strings     13
    Constant    0
    Data        2
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     38      41
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    show_count@ptr	PTR unsigned char  size(2) Largest target is 8
		 -> main@Display(COMRAM[8]), 

    num_to_arr_num@ptr	PTR unsigned char  size(2) Largest target is 8
		 -> main@Display(COMRAM[8]), 

    clrf_ptr@ptr	PTR unsigned char  size(2) Largest target is 8
		 -> main@Display(COMRAM[8]), 


Critical Paths under _main in COMRAM

    _main->_num_to_arr_num
    _show_count->_select_disp
    _num_to_arr_num->___lwdiv

Critical Paths under _ISR in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 8     8      0    1784
                                             30 COMRAM     8     8      0
                     _num_to_arr_num
                              _setup
                         _show_count
 ---------------------------------------------------------------------------------
 (1) _show_count                                           3     1      2     212
                                             21 COMRAM     3     1      2
                        _dec_to_disp
                        _select_disp
                         _wait_timer
 ---------------------------------------------------------------------------------
 (2) _wait_timer                                           1     1      0      15
                                             18 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _select_disp                                          3     3      0      15
                                             18 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _dec_to_disp                                          1     1      0      15
                                             18 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _num_to_arr_num                                       5     0      5    1521
                                             25 COMRAM     5     0      5
                            ___lwdiv
                            ___lwmod
                           _clrf_ptr
 ---------------------------------------------------------------------------------
 (2) _clrf_ptr                                             4     0      4     316
                                             18 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     463
                                             18 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     314
                                             18 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _ISR                                                 18    18      0       0
                                              0 COMRAM    18    18      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _num_to_arr_num
     ___lwdiv
     ___lwmod
     _clrf_ptr
   _setup
   _show_count
     _dec_to_disp
     _select_disp
     _wait_timer

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5E      0       1       0        1.1%
COMRAM              5E     26      29       1       43.6%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      29      20        0.0%
DATA                 0      0      29       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Thu Jun 07 01:18:29 2018

            main@Display 001F              clrf_ptr@len 0015              clrf_ptr@ptr 0013  
                     l75 0ADE                       l67 0A86                       l76 0ACA  
                     l86 0B0A                       l95 0A30                       l88 0B02  
                     l89 0B00                       u34 0ABE                       u35 0ABA  
            __CFG_BORV$3 000000             __CFG_CP0$OFF 000000             __CFG_CP1$OFF 000000  
           __CFG_CP2$OFF 000000             __CFG_CP3$OFF 000000                      l511 0998  
                    l512 09A2                      l521 09DA                      l522 09E4  
                    l507 0978                      l508 0970                      l517 09C2  
                    l518 09BA                      l915 08EA                      l931 0A28  
                    l919 08F6             __CFG_CPB$OFF 000000                      u210 09C6  
                    u240 0938                      u180 097C             __CFG_CPD$OFF 000000  
                    _ISR 0008             __CFG_BOR$OFF 000000             __CFG_FOSC$HS 000000  
           __CFG_LVP$OFF 000000                     ?_ISR 0001             __CFG_WDT$OFF 000000  
                   STR_1 0801                     _LATA 000F89                     _LATB 000F8A  
                   _LATD 000F8C                     i2l60 087A                     i2l61 088A  
         select_disp@dig 0015                     _main 0A82                     fsr0h 000FEA  
                   fsr1h 000FE2                     fsr2h 000FDA                     fsr0l 000FE9  
                   indf2 000FDF                     fsr1l 000FE1                     fsr2l 000FD9  
                   btemp 002A                     prodh 000FF4                     prodl 000FF3  
                   start 000E            __CFG_IESO$OFF 000000            __CFG_MCLRE$ON 000000  
           ___param_bank 000000                    ??_ISR 0001            __CFG_PLLDIV$1 000000  
          show_count@ptr 0016           __CFG_CCP2MX$ON 000000                    ?_main 0001  
                  _CMCON 000FB4                    _T0CON 000FD5                    _T1CON 000FCD  
        __end_of___lwdiv 09AC          __end_of___lwmod 09EE                    _TMR0H 000FD7  
                  _TMR1H 000FCF                    _TMR0L 000FD6     __size_of_dec_to_disp 0018  
          __CFG_USBDIV$1 000000                    _TRISA 000F92                    _TRISB 000F93  
                  _TRISD 000F95            __CFG_PWRT$OFF 000000            __CFG_WRT0$OFF 000000  
          __CFG_WRT1$OFF 000000            __CFG_WRT2$OFF 000000         ??_num_to_arr_num 001F  
          __CFG_WRT3$OFF 000000           __CFG_EBTR0$OFF 000000           __CFG_FCMEN$OFF 000000  
         __CFG_EBTR1$OFF 000000           __CFG_EBTR2$OFF 000000           __CFG_EBTR3$OFF 000000  
          __CFG_WRTB$OFF 000000            __CFG_WRTC$OFF 000000            __CFG_WRTD$OFF 000000  
         __CFG_EBTRB$OFF 000000                    _count 0027                    _setup 09EE  
                  pclath 000FFA                    tablat 000FF5                    status 000FD8  
                  wtemp6 002B           __CFG_ICPRT$OFF 000000          __initialization 0A58  
           __end_of_main 0AAC                   ??_main 001F            __activetblptr 000001  
                 _ADCON1 000FC1             ?_select_disp 0001                   ?_setup 0001  
         __CFG_XINST$OFF 000000         __end_of_clrf_ptr 0AE4           __CFG_STVREN$ON 000000  
                 _flag_t 0148                ??___lwdiv 0017                ??___lwmod 0017  
           __pdataCOMRAM 0027             __mediumconst 0000                   tblptrh 000FF7  
                 tblptrl 000FF6                   tblptru 000FF8               __accesstop 0060  
__end_of__initialization 0A70          __CFG_PBADEN$OFF 000000            ___rparam_used 000001  
         __pcstackCOMRAM 0001            __end_of_setup 0A24                  ??_setup 0013  
              ?_clrf_ptr 0013     __size_of_select_disp 001C          __CFG_VREGEN$OFF 000000  
                __Hparam 0000                  __Lparam 0000                  ___lwdiv 095A  
                ___lwmod 09AC             __psmallconst 0800            ??_dec_to_disp 0013  
                __pcinit 0A58                  __ramtop 0800                  __ptext0 0A82  
                __ptext1 0A24                  __ptext2 0AFC                  __ptext3 0AAC  
                __ptext4 0AE4                  __ptext5 09EE                  __ptext6 08D6  
                __ptext7 0AC8                  __ptext8 09AC                  __ptext9 095A  
         dec_to_disp@num 0013             __size_of_ISR 08CE               ??_clrf_ptr 0017  
         __pintcode_body 0810     end_of_initialization 0A70                  int_func 0810  
             _wait_timer 0AFC              wait_timer@n 0013               _show_count 0A24  
    __end_of_dec_to_disp 0AFC              show_count@i 0018  __size_of_num_to_arr_num 0084  
          __pidataCOMRAM 0B12            __pbitnvCOMRAM 0148      start_initialization 0A58  
            __end_of_ISR 08D6         __CFG_LPT1OSC$OFF 000000              ?_wait_timer 0001  
            _dec_to_disp 0AE4              ?_show_count 0016        __size_of_clrf_ptr 001C  
       ___lwdiv@dividend 0013                __pintcode 0008                 ?___lwdiv 0013  
               ?___lwmod 0013              __smallconst 0800            ??_select_disp 0013  
       ___lwdiv@quotient 0017           __size_of_setup 0036      __size_of_wait_timer 0016  
         _num_to_arr_num 08D6                 _IPR1bits 000F9F                 _PIE1bits 000F9D  
    __size_of_show_count 0034                 _PIR1bits 000F9E                 _RCONbits 000FD0  
       __CFG_WDTPS$32768 000000                clrf_ptr@v 0016              _INTCON2bits 000FF1  
 __end_of_num_to_arr_num 095A      __end_of_select_disp 0AC8                 __Hrparam 0000  
               __Lrparam 0000             __Lsmallconst 0800         __size_of___lwdiv 0052  
       __size_of___lwmod 0042        num_to_arr_num@len 001E        num_to_arr_num@num 001C  
      num_to_arr_num@ptr 001A          ___lwdiv@divisor 0015          ___lwdiv@counter 0019  
               _clrf_ptr 0AC8          ?_num_to_arr_num 001A            __size_of_main 002A  
               int$flags 002A             ??_wait_timer 0013             ?_dec_to_disp 0001  
           ??_show_count 0018    __CFG_CPUDIV$OSC1_PLL2 000000               _INTCONbits 000FF2  
            _select_disp 0AAC                 intlevel2 0000         ___lwmod@dividend 0013  
     __end_of_wait_timer 0B12       __end_of_show_count 0A58          ___lwmod@divisor 0015  
        ___lwmod@counter 0017  
