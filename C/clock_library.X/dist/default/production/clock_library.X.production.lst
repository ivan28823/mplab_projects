

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Thu Jun 14 01:28:37 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text21,global,reloc=2,class=CODE,delta=1
    34                           	psect	text22,global,reloc=2,class=CODE,delta=1
    35                           	psect	text23,global,reloc=2,class=CODE,delta=1
    36                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    37                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    38  0000                     
    39                           ; Version 1.45 (B)
    40                           ; Generated 30/01/2018 GMT
    41                           ; 
    42                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    43                           ; All rights reserved.
    44                           ; 
    45                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    46                           ; 
    47                           ; Redistribution and use in source and binary forms, with or without modification, are
    48                           ; permitted provided that the following conditions are met:
    49                           ; 
    50                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    51                           ;        conditions and the following disclaimer.
    52                           ; 
    53                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    54                           ;        of conditions and the following disclaimer in the documentation and/or other
    55                           ;        materials provided with the distribution.
    56                           ; 
    57                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    58                           ;        software without specific prior written permission.
    59                           ; 
    60                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    61                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    62                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    63                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    64                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    65                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    66                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    67                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    68                           ; 
    69                           ; 
    70                           ; Code-generator required, PIC18F4550 Definitions
    71                           ; 
    72                           ; SFR Addresses
    73  0000                     
    74                           	psect	idataBANK0
    75  001602                     __pidataBANK0:
    76                           	opt stack 0
    77                           
    78                           ;initializer for time_lcd@mTs
    79  001602  88                 	db	low STR_1
    80  001603  08                 	db	high STR_1
    81  001604  80                 	db	low STR_2
    82  001605  08                 	db	high STR_2
    83  001606  9C                 	db	low STR_3
    84  001607  08                 	db	high STR_3
    85  001608  A0                 	db	low STR_4
    86  001609  08                 	db	high STR_4
    87  00160A  AC                 	db	low STR_5
    88  00160B  08                 	db	high STR_5
    89  00160C  90                 	db	low STR_6
    90  00160D  08                 	db	high STR_6
    91  00160E  8C                 	db	low STR_7
    92  00160F  08                 	db	high STR_7
    93  001610  94                 	db	low STR_8
    94  001611  08                 	db	high STR_8
    95  001612  98                 	db	low STR_9
    96  001613  08                 	db	high STR_9
    97  001614  A4                 	db	low STR_10
    98  001615  08                 	db	high STR_10
    99  001616  A8                 	db	low STR_11
   100  001617  08                 	db	high STR_11
   101  001618  84                 	db	low STR_12
   102  001619  08                 	db	high STR_12
   103                           
   104                           ;initializer for _mTs
   105  00161A  88                 	db	low STR_1
   106  00161B  08                 	db	high STR_1
   107  00161C  80                 	db	low STR_2
   108  00161D  08                 	db	high STR_2
   109  00161E  9C                 	db	low STR_3
   110  00161F  08                 	db	high STR_3
   111  001620  A0                 	db	low STR_4
   112  001621  08                 	db	high STR_4
   113  001622  AC                 	db	low STR_5
   114  001623  08                 	db	high STR_5
   115  001624  90                 	db	low STR_6
   116  001625  08                 	db	high STR_6
   117  001626  8C                 	db	low STR_7
   118  001627  08                 	db	high STR_7
   119  001628  94                 	db	low STR_8
   120  001629  08                 	db	high STR_8
   121  00162A  98                 	db	low STR_9
   122  00162B  08                 	db	high STR_9
   123  00162C  A4                 	db	low STR_10
   124  00162D  08                 	db	high STR_10
   125  00162E  A8                 	db	low STR_11
   126  00162F  08                 	db	high STR_11
   127  001630  84                 	db	low STR_12
   128  001631  08                 	db	high STR_12
   129                           
   130                           ;initializer for main@F3907
   131  001632  0032               	dw	50
   132  001634  000B               	dw	11
   133  001636  000D               	dw	13
   134  001638  0004               	dw	4
   135  00163A  0004               	dw	4
   136  00163C  0076               	dw	118
   137  00163E  0000               	dw	0
   138  001640  0000               	dw	0
   139  001642  0000               	dw	0
   140                           
   141                           ;initializer for time_lcd@dTs
   142  001644  BC                 	db	low STR_13
   143  001645  08                 	db	high STR_13
   144  001646  C2                 	db	low STR_14
   145  001647  08                 	db	high STR_14
   146  001648  B0                 	db	low STR_15
   147  001649  08                 	db	high STR_15
   148  00164A  B6                 	db	low STR_16
   149  00164B  08                 	db	high STR_16
   150  00164C  BF                 	db	low STR_17
   151  00164D  08                 	db	high STR_17
   152  00164E  B9                 	db	low STR_18
   153  00164F  08                 	db	high STR_18
   154  001650  B3                 	db	low STR_19
   155  001651  08                 	db	high STR_19
   156                           
   157                           ;initializer for _dTs
   158  001652  BC                 	db	low STR_13
   159  001653  08                 	db	high STR_13
   160  001654  C2                 	db	low STR_14
   161  001655  08                 	db	high STR_14
   162  001656  B0                 	db	low STR_15
   163  001657  08                 	db	high STR_15
   164  001658  B6                 	db	low STR_16
   165  001659  08                 	db	high STR_16
   166  00165A  BF                 	db	low STR_17
   167  00165B  08                 	db	high STR_17
   168  00165C  B9                 	db	low STR_18
   169  00165D  08                 	db	high STR_18
   170  00165E  B3                 	db	low STR_19
   171  00165F  08                 	db	high STR_19
   172                           
   173                           	psect	smallconst
   174  000800                     __psmallconst:
   175                           	opt stack 0
   176  000800  00                 	db	0
   177  000801                     _moninit:
   178                           	opt stack 0
   179  000801  1F                 	db	31
   180  000802  1C                 	db	28
   181  000803  1F                 	db	31
   182  000804  1E                 	db	30
   183  000805  1F                 	db	31
   184  000806  1E                 	db	30
   185  000807  1F                 	db	31
   186  000808  1F                 	db	31
   187  000809  1E                 	db	30
   188  00080A  1F                 	db	31
   189  00080B  1E                 	db	30
   190  00080C  1F                 	db	31
   191  00080D                     __end_of_moninit:
   192                           	opt stack 0
   193  00080D                     _dpowers:
   194                           	opt stack 0
   195  00080D  0001               	dw	1
   196  00080F  000A               	dw	10
   197  000811  0064               	dw	100
   198  000813  03E8               	dw	1000
   199  000815  2710               	dw	10000
   200  000817                     __end_of_dpowers:
   201                           	opt stack 0
   202  000817                     _init_str:
   203                           	opt stack 0
   204  000817  28                 	db	40
   205  000818  0C                 	db	12
   206  000819  01                 	db	1
   207  00081A  06                 	db	6
   208  00081B                     __end_of_init_str:
   209                           	opt stack 0
   210  0000                     _TRISCbits	set	3988
   211  0000                     _TRISD	set	3989
   212  0000                     _LATD	set	3980
   213  0000                     _LATCbits	set	3979
   214  00081B  4A                 	db	74	;'J'
   215  00081C  61                 	db	97	;'a'
   216  00081D  6E                 	db	110	;'n'
   217  00081E  46                 	db	70	;'F'
   218  00081F  65                 	db	101	;'e'
   219  000820  62                 	db	98	;'b'
   220  000821  4D                 	db	77	;'M'
   221  000822  61                 	db	97	;'a'
   222  000823  72                 	db	114	;'r'
   223  000824  41                 	db	65	;'A'
   224  000825  70                 	db	112	;'p'
   225  000826  72                 	db	114	;'r'
   226  000827  4D                 	db	77	;'M'
   227  000828  61                 	db	97	;'a'
   228  000829  79                 	db	121	;'y'
   229  00082A  4A                 	db	74	;'J'
   230  00082B  75                 	db	117	;'u'
   231  00082C  6E                 	db	110	;'n'
   232  00082D  4A                 	db	74	;'J'
   233  00082E  75                 	db	117	;'u'
   234  00082F  6C                 	db	108	;'l'
   235  000830  41                 	db	65	;'A'
   236  000831  75                 	db	117	;'u'
   237  000832  67                 	db	103	;'g'
   238  000833  53                 	db	83	;'S'
   239  000834  65                 	db	101	;'e'
   240  000835  70                 	db	112	;'p'
   241  000836  4F                 	db	79	;'O'
   242  000837  63                 	db	99	;'c'
   243  000838  74                 	db	116	;'t'
   244  000839  4E                 	db	78	;'N'
   245  00083A  6F                 	db	111	;'o'
   246  00083B  76                 	db	118	;'v'
   247  00083C  44                 	db	68	;'D'
   248  00083D  65                 	db	101	;'e'
   249  00083E  63                 	db	99	;'c'
   250  00083F  00                 	db	0
   251  000840                     STR_39:
   252  000840  07                 	db	7
   253  000841  20                 	db	32
   254  000842  20                 	db	32
   255  000843  20                 	db	32
   256  000844  20                 	db	32
   257  000845  25                 	db	37
   258  000846  30                 	db	48	;'0'
   259  000847  32                 	db	50	;'2'
   260  000848  64                 	db	100	;'d'
   261  000849  3A                 	db	58	;':'
   262  00084A  25                 	db	37
   263  00084B  30                 	db	48	;'0'
   264  00084C  32                 	db	50	;'2'
   265  00084D  64                 	db	100	;'d'
   266  00084E  3A                 	db	58	;':'
   267  00084F  25                 	db	37
   268  000850  30                 	db	48	;'0'
   269  000851  32                 	db	50	;'2'
   270  000852  64                 	db	100	;'d'
   271  000853  0A                 	db	10
   272  000854  20                 	db	32
   273  000855  25                 	db	37
   274  000856  73                 	db	115	;'s'
   275  000857  20                 	db	32
   276  000858  25                 	db	37
   277  000859  30                 	db	48	;'0'
   278  00085A  32                 	db	50	;'2'
   279  00085B  64                 	db	100	;'d'
   280  00085C  20                 	db	32
   281  00085D  25                 	db	37
   282  00085E  73                 	db	115	;'s'
   283  00085F  20                 	db	32
   284  000860  25                 	db	37
   285  000861  64                 	db	100	;'d'
   286  000862  00                 	db	0
   287  000863  53                 	db	83	;'S'
   288  000864  75                 	db	117	;'u'
   289  000865  6E                 	db	110	;'n'
   290  000866  4D                 	db	77	;'M'
   291  000867  6F                 	db	111	;'o'
   292  000868  6E                 	db	110	;'n'
   293  000869  54                 	db	84	;'T'
   294  00086A  75                 	db	117	;'u'
   295  00086B  65                 	db	101	;'e'
   296  00086C  57                 	db	87	;'W'
   297  00086D  65                 	db	101	;'e'
   298  00086E  64                 	db	100	;'d'
   299  00086F  54                 	db	84	;'T'
   300  000870  68                 	db	104	;'h'
   301  000871  75                 	db	117	;'u'
   302  000872  46                 	db	70	;'F'
   303  000873  72                 	db	114	;'r'
   304  000874  69                 	db	105	;'i'
   305  000875  53                 	db	83	;'S'
   306  000876  61                 	db	97	;'a'
   307  000877  74                 	db	116	;'t'
   308  000878  00                 	db	0
   309  000879                     STR_40:
   310  000879  28                 	db	40
   311  00087A  6E                 	db	110	;'n'
   312  00087B  75                 	db	117	;'u'
   313  00087C  6C                 	db	108	;'l'
   314  00087D  6C                 	db	108	;'l'
   315  00087E  29                 	db	41
   316  00087F  00                 	db	0
   317  000880                     STR_2:
   318  000880  46                 	db	70	;'F'
   319  000881  65                 	db	101	;'e'
   320  000882  62                 	db	98	;'b'
   321  000883  00                 	db	0
   322  000884                     STR_12:
   323  000884  44                 	db	68	;'D'
   324  000885  69                 	db	105	;'i'
   325  000886  63                 	db	99	;'c'
   326  000887  00                 	db	0
   327  000888                     STR_1:
   328  000888  45                 	db	69	;'E'
   329  000889  6E                 	db	110	;'n'
   330  00088A  65                 	db	101	;'e'
   331  00088B  00                 	db	0
   332  00088C                     STR_7:
   333  00088C  4A                 	db	74	;'J'
   334  00088D  75                 	db	117	;'u'
   335  00088E  6C                 	db	108	;'l'
   336  00088F  00                 	db	0
   337  000890                     STR_6:
   338  000890  4A                 	db	74	;'J'
   339  000891  75                 	db	117	;'u'
   340  000892  6E                 	db	110	;'n'
   341  000893  00                 	db	0
   342  000894                     STR_8:
   343  000894  41                 	db	65	;'A'
   344  000895  67                 	db	103	;'g'
   345  000896  6F                 	db	111	;'o'
   346  000897  00                 	db	0
   347  000898                     STR_9:
   348  000898  53                 	db	83	;'S'
   349  000899  65                 	db	101	;'e'
   350  00089A  70                 	db	112	;'p'
   351  00089B  00                 	db	0
   352  00089C                     STR_3:
   353  00089C  4D                 	db	77	;'M'
   354  00089D  61                 	db	97	;'a'
   355  00089E  72                 	db	114	;'r'
   356  00089F  00                 	db	0
   357  0008A0                     STR_4:
   358  0008A0  41                 	db	65	;'A'
   359  0008A1  62                 	db	98	;'b'
   360  0008A2  72                 	db	114	;'r'
   361  0008A3  00                 	db	0
   362  0008A4                     STR_10:
   363  0008A4  4F                 	db	79	;'O'
   364  0008A5  63                 	db	99	;'c'
   365  0008A6  74                 	db	116	;'t'
   366  0008A7  00                 	db	0
   367  0008A8                     STR_11:
   368  0008A8  4E                 	db	78	;'N'
   369  0008A9  6F                 	db	111	;'o'
   370  0008AA  76                 	db	118	;'v'
   371  0008AB  00                 	db	0
   372  0008AC                     STR_5:
   373  0008AC  4D                 	db	77	;'M'
   374  0008AD  61                 	db	97	;'a'
   375  0008AE  79                 	db	121	;'y'
   376  0008AF  00                 	db	0
   377  0008B0                     STR_15:
   378  0008B0  4D                 	db	77	;'M'
   379  0008B1  61                 	db	97	;'a'
   380  0008B2  00                 	db	0
   381  0008B3                     STR_19:
   382  0008B3  53                 	db	83	;'S'
   383  0008B4  61                 	db	97	;'a'
   384  0008B5  00                 	db	0
   385  0008B6                     STR_16:
   386  0008B6  4D                 	db	77	;'M'
   387  0008B7  69                 	db	105	;'i'
   388  0008B8  00                 	db	0
   389  0008B9                     STR_18:
   390  0008B9  56                 	db	86	;'V'
   391  0008BA  69                 	db	105	;'i'
   392  0008BB  00                 	db	0
   393  0008BC                     STR_13:
   394  0008BC  44                 	db	68	;'D'
   395  0008BD  6F                 	db	111	;'o'
   396  0008BE  00                 	db	0
   397  0008BF                     STR_17:
   398  0008BF  4A                 	db	74	;'J'
   399  0008C0  75                 	db	117	;'u'
   400  0008C1  00                 	db	0
   401  0008C2                     STR_14:
   402  0008C2  4C                 	db	76	;'L'
   403  0008C3  75                 	db	117	;'u'
   404  0008C4  00                 	db	0
   405  0000                     
   406                           ; #config settings
   407  0008C5  00                 	db	0	; dummy byte at the end
   408  0000                     
   409                           	psect	cinit
   410  0017BC                     __pcinit:
   411                           	opt stack 0
   412  0017BC                     start_initialization:
   413                           	opt stack 0
   414  0017BC                     __initialization:
   415                           	opt stack 0
   416                           
   417                           ; Initialize objects allocated to BANK0 (94 bytes)
   418                           ; load TBLPTR registers with __pidataBANK0
   419  0017BC  0E02               	movlw	low __pidataBANK0
   420  0017BE  6EF6               	movwf	tblptrl,c
   421  0017C0  0E16               	movlw	high __pidataBANK0
   422  0017C2  6EF7               	movwf	tblptrh,c
   423  0017C4  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   424  0017C6  6EF8               	movwf	tblptru,c
   425  0017C8  EE00  F060         	lfsr	0,__pdataBANK0
   426  0017CC  EE10 F05E          	lfsr	1,94
   427  0017D0                     copy_data0:
   428  0017D0  0009               	tblrd		*+
   429  0017D2  CFF5 FFEE          	movff	tablat,postinc0
   430  0017D6  50E5               	movf	postdec1,w,c
   431  0017D8  50E1               	movf	fsr1l,w,c
   432  0017DA  E1FA               	bnz	copy_data0
   433                           
   434                           ; Clear objects allocated to BANK0 (45 bytes)
   435  0017DC  EE00  F0BE         	lfsr	0,__pbssBANK0
   436  0017E0  0E2D               	movlw	45
   437  0017E2                     clear_0:
   438  0017E2  6AEE               	clrf	postinc0,c
   439  0017E4  06E8               	decf	wreg,f,c
   440  0017E6  E1FD               	bnz	clear_0
   441                           
   442                           ; Clear objects allocated to COMRAM (10 bytes)
   443  0017E8  EE00  F050         	lfsr	0,__pbssCOMRAM
   444  0017EC  0E0A               	movlw	10
   445  0017EE                     clear_1:
   446  0017EE  6AEE               	clrf	postinc0,c
   447  0017F0  06E8               	decf	wreg,f,c
   448  0017F2  E1FD               	bnz	clear_1
   449  0017F4                     end_of_initialization:
   450                           	opt stack 0
   451  0017F4                     __end_of__initialization:
   452                           	opt stack 0
   453  0017F4  0E00               	movlw	low (__Lmediumconst shr (0+16))
   454  0017F6  6EF8               	movwf	tblptru,c
   455  0017F8  0100               	movlb	0
   456  0017FA  EF9D  F00A         	goto	_main	;jump to C main() function
   457                           tblptru	equ	0xFF8
   458                           tblptrh	equ	0xFF7
   459                           tblptrl	equ	0xFF6
   460                           tablat	equ	0xFF5
   461                           postinc0	equ	0xFEE
   462                           wreg	equ	0xFE8
   463                           postdec1	equ	0xFE5
   464                           fsr1l	equ	0xFE1
   465                           
   466                           	psect	bssCOMRAM
   467  000050                     __pbssCOMRAM:
   468                           	opt stack 0
   469  000050                     _timezone:
   470                           	opt stack 0
   471  000050                     	ds	4
   472  000054                     _time_zone:
   473                           	opt stack 0
   474  000054                     	ds	2
   475  000056                     _clock:
   476                           	opt stack 0
   477  000056                     	ds	4
   478                           tblptru	equ	0xFF8
   479                           tblptrh	equ	0xFF7
   480                           tblptrl	equ	0xFF6
   481                           tablat	equ	0xFF5
   482                           postinc0	equ	0xFEE
   483                           wreg	equ	0xFE8
   484                           postdec1	equ	0xFE5
   485                           fsr1l	equ	0xFE1
   486                           
   487                           	psect	bssBANK0
   488  0000BE                     __pbssBANK0:
   489                           	opt stack 0
   490  0000BE                     asctime@buf:
   491                           	opt stack 0
   492  0000BE                     	ds	27
   493  0000D9                     gmtime@tim:
   494                           	opt stack 0
   495  0000D9                     	ds	18
   496                           tblptru	equ	0xFF8
   497                           tblptrh	equ	0xFF7
   498                           tblptrl	equ	0xFF6
   499                           tablat	equ	0xFF5
   500                           postinc0	equ	0xFEE
   501                           wreg	equ	0xFE8
   502                           postdec1	equ	0xFE5
   503                           fsr1l	equ	0xFE1
   504                           
   505                           	psect	dataBANK0
   506  000060                     __pdataBANK0:
   507                           	opt stack 0
   508  000060                     time_lcd@mTs:
   509                           	opt stack 0
   510  000060                     	ds	24
   511  000078                     	ds	24
   512  000090                     main@F3907:
   513                           	opt stack 0
   514  000090                     	ds	18
   515  0000A2                     time_lcd@dTs:
   516                           	opt stack 0
   517  0000A2                     	ds	14
   518  0000B0                     	ds	14
   519                           tblptru	equ	0xFF8
   520                           tblptrh	equ	0xFF7
   521                           tblptrl	equ	0xFF6
   522                           tablat	equ	0xFF5
   523                           postinc0	equ	0xFEE
   524                           wreg	equ	0xFE8
   525                           postdec1	equ	0xFE5
   526                           fsr1l	equ	0xFE1
   527                           
   528                           	psect	cstackCOMRAM
   529  000001                     __pcstackCOMRAM:
   530                           	opt stack 0
   531  000001                     ??_isdigit:
   532  000001                     ?___wmul:
   533                           	opt stack 0
   534  000001                     ?___awmod:
   535                           	opt stack 0
   536  000001                     ?___lmul:
   537                           	opt stack 0
   538  000001                     ?___aldiv:
   539                           	opt stack 0
   540  000001                     ?___almod:
   541                           	opt stack 0
   542  000001                     send_nibble@data:
   543                           	opt stack 0
   544  000001                     ___wmul@multiplier:
   545                           	opt stack 0
   546  000001                     ___awmod@dividend:
   547                           	opt stack 0
   548  000001                     ___lmul@multiplier:
   549                           	opt stack 0
   550  000001                     ___aldiv@dividend:
   551                           	opt stack 0
   552  000001                     ___almod@dividend:
   553                           	opt stack 0
   554                           
   555                           ; 4 bytes @ 0x0
   556  000001                     	ds	1
   557  000002                     send_nibble@comand:
   558                           	opt stack 0
   559  000002                     _isdigit$594:
   560                           	opt stack 0
   561                           
   562                           ; 1 bytes @ 0x1
   563  000002                     	ds	1
   564  000003                     send_nibble@i:
   565                           	opt stack 0
   566  000003                     isdigit@c:
   567                           	opt stack 0
   568  000003                     ___wmul@multiplicand:
   569                           	opt stack 0
   570  000003                     ___awmod@divisor:
   571                           	opt stack 0
   572                           
   573                           ; 2 bytes @ 0x2
   574  000003                     	ds	1
   575  000004                     send_byte@data:
   576                           	opt stack 0
   577                           
   578                           ; 1 bytes @ 0x3
   579  000004                     	ds	1
   580  000005                     send_byte@comand:
   581                           	opt stack 0
   582  000005                     ___awmod@counter:
   583                           	opt stack 0
   584  000005                     ___wmul@product:
   585                           	opt stack 0
   586  000005                     ___lmul@multiplicand:
   587                           	opt stack 0
   588  000005                     ___aldiv@divisor:
   589                           	opt stack 0
   590  000005                     ___almod@divisor:
   591                           	opt stack 0
   592                           
   593                           ; 4 bytes @ 0x4
   594  000005                     	ds	1
   595  000006                     ??_lcd_init:
   596  000006                     lcd_gotoxy@y:
   597                           	opt stack 0
   598  000006                     ___awmod@sign:
   599                           	opt stack 0
   600                           
   601                           ; 1 bytes @ 0x5
   602  000006                     	ds	1
   603  000007                     ?___lwdiv:
   604                           	opt stack 0
   605  000007                     lcd_gotoxy@x:
   606                           	opt stack 0
   607  000007                     lcd_init@i:
   608                           	opt stack 0
   609  000007                     ___lwdiv@dividend:
   610                           	opt stack 0
   611                           
   612                           ; 2 bytes @ 0x6
   613  000007                     	ds	1
   614  000008                     _lcd_gotoxy$195:
   615                           	opt stack 0
   616                           
   617                           ; 2 bytes @ 0x7
   618  000008                     	ds	1
   619  000009                     ___aldiv@counter:
   620                           	opt stack 0
   621  000009                     ___almod@counter:
   622                           	opt stack 0
   623  000009                     ___lwdiv@divisor:
   624                           	opt stack 0
   625  000009                     ___lmul@product:
   626                           	opt stack 0
   627                           
   628                           ; 4 bytes @ 0x8
   629  000009                     	ds	1
   630  00000A                     lcd_gotoxy@dir:
   631                           	opt stack 0
   632  00000A                     ___aldiv@sign:
   633                           	opt stack 0
   634  00000A                     ___almod@sign:
   635                           	opt stack 0
   636                           
   637                           ; 1 bytes @ 0x9
   638  00000A                     	ds	1
   639  00000B                     ??_putch:
   640  00000B                     ___lwdiv@quotient:
   641                           	opt stack 0
   642  00000B                     ___aldiv@quotient:
   643                           	opt stack 0
   644                           
   645                           ; 4 bytes @ 0xA
   646  00000B                     	ds	1
   647  00000C                     putch@c:
   648                           	opt stack 0
   649                           
   650                           ; 1 bytes @ 0xB
   651  00000C                     	ds	1
   652  00000D                     ___lwdiv@counter:
   653                           	opt stack 0
   654                           
   655                           ; 1 bytes @ 0xC
   656  00000D                     	ds	1
   657  00000E                     ?___lwmod:
   658                           	opt stack 0
   659  00000E                     ?_months_to_days:
   660                           	opt stack 0
   661  00000E                     ?_years_to_days:
   662                           	opt stack 0
   663  00000E                     ___lwmod@dividend:
   664                           	opt stack 0
   665  00000E                     months_to_days@month:
   666                           	opt stack 0
   667  00000E                     years_to_days@yr:
   668                           	opt stack 0
   669                           
   670                           ; 2 bytes @ 0xD
   671  00000E                     	ds	2
   672  000010                     ___lwmod@divisor:
   673                           	opt stack 0
   674                           
   675                           ; 2 bytes @ 0xF
   676  000010                     	ds	2
   677  000012                     ??_years_to_days:
   678  000012                     ___lwmod@counter:
   679                           	opt stack 0
   680                           
   681                           ; 1 bytes @ 0x11
   682  000012                     	ds	1
   683  000013                     ?_printf:
   684                           	opt stack 0
   685  000013                     ?_dylen:
   686                           	opt stack 0
   687  000013                     ?_isleap:
   688                           	opt stack 0
   689  000013                     printf@f:
   690                           	opt stack 0
   691  000013                     dylen@yr:
   692                           	opt stack 0
   693  000013                     isleap@yr:
   694                           	opt stack 0
   695                           
   696                           ; 2 bytes @ 0x12
   697  000013                     	ds	1
   698  000014                     years_to_days@ret:
   699                           	opt stack 0
   700                           
   701                           ; 4 bytes @ 0x13
   702  000014                     	ds	1
   703  000015                     ??_dylen:
   704  000015                     ??_isleap:
   705                           
   706                           ; 1 bytes @ 0x14
   707  000015                     	ds	2
   708  000017                     ?_gmtime:
   709                           	opt stack 0
   710  000017                     _isleap$657:
   711                           	opt stack 0
   712  000017                     gmtime@tp:
   713                           	opt stack 0
   714                           
   715                           ; 2 bytes @ 0x16
   716  000017                     	ds	1
   717  000018                     ?_ymd_to_scalar:
   718                           	opt stack 0
   719  000018                     ymd_to_scalar@yr:
   720                           	opt stack 0
   721                           
   722                           ; 2 bytes @ 0x17
   723  000018                     	ds	1
   724  000019                     ??_gmtime:
   725                           
   726                           ; 1 bytes @ 0x18
   727  000019                     	ds	1
   728  00001A                     ymd_to_scalar@mo:
   729                           	opt stack 0
   730                           
   731                           ; 2 bytes @ 0x19
   732  00001A                     	ds	2
   733  00001C                     ymd_to_scalar@day:
   734                           	opt stack 0
   735  00001C                     gmtime@tc:
   736                           	opt stack 0
   737                           
   738                           ; 4 bytes @ 0x1B
   739  00001C                     	ds	2
   740  00001E                     ??_ymd_to_scalar:
   741                           
   742                           ; 1 bytes @ 0x1D
   743  00001E                     	ds	2
   744  000020                     ?_localtime:
   745                           	opt stack 0
   746  000020                     localtime@tp:
   747                           	opt stack 0
   748                           
   749                           ; 2 bytes @ 0x1F
   750  000020                     	ds	2
   751  000022                     ??_localtime:
   752  000022                     _ymd_to_scalar$670:
   753                           	opt stack 0
   754                           
   755                           ; 2 bytes @ 0x21
   756  000022                     	ds	1
   757  000023                     ??_printf:
   758                           
   759                           ; 1 bytes @ 0x22
   760  000023                     	ds	1
   761  000024                     ymd_to_scalar@scalar:
   762                           	opt stack 0
   763                           
   764                           ; 4 bytes @ 0x23
   765  000024                     	ds	2
   766  000026                     localtime@t:
   767                           	opt stack 0
   768                           
   769                           ; 4 bytes @ 0x25
   770  000026                     	ds	1
   771  000027                     printf@prec:
   772                           	opt stack 0
   773                           
   774                           ; 1 bytes @ 0x26
   775  000027                     	ds	1
   776  000028                     ?_mktime:
   777                           	opt stack 0
   778  000028                     printf@ap:
   779                           	opt stack 0
   780  000028                     mktime@timeptr:
   781                           	opt stack 0
   782                           
   783                           ; 2 bytes @ 0x27
   784  000028                     	ds	2
   785  00002A                     printf@cp:
   786                           	opt stack 0
   787                           
   788                           ; 2 bytes @ 0x29
   789  00002A                     	ds	2
   790  00002C                     ??_mktime:
   791  00002C                     printf@val:
   792                           	opt stack 0
   793                           
   794                           ; 2 bytes @ 0x2B
   795  00002C                     	ds	2
   796  00002E                     printf@len:
   797                           	opt stack 0
   798                           
   799                           ; 2 bytes @ 0x2D
   800  00002E                     	ds	2
   801  000030                     printf@flag:
   802                           	opt stack 0
   803                           
   804                           ; 1 bytes @ 0x2F
   805  000030                     	ds	1
   806  000031                     printf@c:
   807                           	opt stack 0
   808                           
   809                           ; 1 bytes @ 0x30
   810  000031                     	ds	1
   811  000032                     printf@width:
   812                           	opt stack 0
   813  000032                     mktime@tt:
   814                           	opt stack 0
   815                           
   816                           ; 4 bytes @ 0x31
   817  000032                     	ds	2
   818  000034                     show_time_by_clock@timer:
   819                           	opt stack 0
   820                           
   821                           ; 2 bytes @ 0x33
   822  000034                     	ds	2
   823  000036                     ??_show_time_by_clock:
   824                           
   825                           ; 1 bytes @ 0x35
   826  000036                     	ds	6
   827  00003C                     ??_main:
   828                           
   829                           ; 1 bytes @ 0x3B
   830  00003C                     	ds	2
   831  00003E                     main@tp:
   832                           	opt stack 0
   833                           
   834                           ; 18 bytes @ 0x3D
   835  00003E                     	ds	18
   836                           tblptru	equ	0xFF8
   837                           tblptrh	equ	0xFF7
   838                           tblptrl	equ	0xFF6
   839                           tablat	equ	0xFF5
   840                           postinc0	equ	0xFEE
   841                           wreg	equ	0xFE8
   842                           postdec1	equ	0xFE5
   843                           fsr1l	equ	0xFE1
   844                           
   845 ;;
   846 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   847 ;;
   848 ;; *************** function _main *****************
   849 ;; Defined at:
   850 ;;		line 7 in file "main.c"
   851 ;; Parameters:    Size  Location     Type
   852 ;;		None
   853 ;; Auto vars:     Size  Location     Type
   854 ;;  tp             18   61[COMRAM] struct tm
   855 ;; Return value:  Size  Location     Type
   856 ;;                  1    wreg      void 
   857 ;; Registers used:
   858 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   859 ;; Tracked objects:
   860 ;;		On entry : 0/0
   861 ;;		On exit  : 0/0
   862 ;;		Unchanged: 0/0
   863 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   864 ;;      Params:         0       0       0       0       0       0       0       0       0
   865 ;;      Locals:        18       0       0       0       0       0       0       0       0
   866 ;;      Temps:          2       0       0       0       0       0       0       0       0
   867 ;;      Totals:        20       0       0       0       0       0       0       0       0
   868 ;;Total ram usage:       20 bytes
   869 ;; Hardware stack levels required when called:    6
   870 ;; This function calls:
   871 ;;		_lcd_init
   872 ;;		_mktime
   873 ;;		_show_time_by_clock
   874 ;; This function is called by:
   875 ;;		Startup code after reset
   876 ;; This function uses a non-reentrant model
   877 ;;
   878                           
   879                           	psect	text0
   880  00153A                     __ptext0:
   881                           	opt stack 0
   882  00153A                     _main:
   883                           	opt stack 25
   884                           
   885                           ;main.c: 8: lcd_init();
   886                           
   887                           ;incstack = 0
   888  00153A  ECCE  F008         	call	_lcd_init	;wreg free
   889                           
   890                           ;main.c: 10: struct tm tp = {50,11,13,4,4,118,0,0,0};
   891  00153E  EE20  F090         	lfsr	2,main@F3907
   892  001542  EE10  F03E         	lfsr	1,main@tp
   893  001546  0E11               	movlw	17
   894  001548                     u1481:
   895  001548  CFDB FFE3          	movff	plusw2,plusw1
   896  00154C  06E8               	decf	wreg,f,c
   897  00154E  E2FC               	bc	u1481
   898                           
   899                           ;main.c: 20: clock = mktime(&tp);
   900  001550  0E3E               	movlw	low main@tp
   901  001552  6E28               	movwf	mktime@timeptr,c
   902  001554  0E00               	movlw	high main@tp
   903  001556  6E29               	movwf	mktime@timeptr+1,c
   904  001558  ECE4  F005         	call	_mktime	;wreg free
   905  00155C  C028  F056         	movff	?_mktime,_clock
   906  001560  C029  F057         	movff	?_mktime+1,_clock+1
   907  001564  C02A  F058         	movff	?_mktime+2,_clock+2
   908  001568  C02B  F059         	movff	?_mktime+3,_clock+3
   909  00156C                     
   910                           ;main.c: 23: show_time_by_clock(&tp);
   911  00156C  0E3E               	movlw	low main@tp
   912  00156E  6E34               	movwf	show_time_by_clock@timer,c
   913  001570  0E00               	movlw	high main@tp
   914  001572  6E35               	movwf	show_time_by_clock@timer+1,c
   915  001574  ECF3  F007         	call	_show_time_by_clock	;wreg free
   916                           
   917                           ;main.c: 24: clock++;
   918  001578  0E01               	movlw	1
   919  00157A  2656               	addwf	_clock,f,c
   920  00157C  0E00               	movlw	0
   921  00157E  2257               	addwfc	_clock+1,f,c
   922  001580  2258               	addwfc	_clock+2,f,c
   923  001582  2259               	addwfc	_clock+3,f,c
   924                           
   925                           ;main.c: 25: _delay((unsigned long)((1000)*(20000000/4000.0)));
   926  001584  0E1A               	movlw	26
   927  001586  6E3D               	movwf	(??_main+1)& (0+255),c
   928  001588  0E5E               	movlw	94
   929  00158A  6E3C               	movwf	??_main& (0+255),c
   930  00158C  0E6E               	movlw	110
   931  00158E                     u1517:
   932  00158E  2EE8               	decfsz	wreg,f,c
   933  001590  D7FE               	bra	u1517
   934  001592  2E3C               	decfsz	??_main& (0+255),f,c
   935  001594  D7FC               	bra	u1517
   936  001596  2E3D               	decfsz	(??_main+1)& (0+255),f,c
   937  001598  D7FA               	bra	u1517
   938  00159A  D000               	nop2	
   939                           
   940                           ;main.c: 26: }
   941  00159C  D7E7               	goto	l23
   942  00159E                     __end_of_main:
   943                           	opt stack 0
   944                           tblptru	equ	0xFF8
   945                           tblptrh	equ	0xFF7
   946                           tblptrl	equ	0xFF6
   947                           tablat	equ	0xFF5
   948                           postinc0	equ	0xFEE
   949                           wreg	equ	0xFE8
   950                           postdec1	equ	0xFE5
   951                           plusw1	equ	0xFE3
   952                           fsr1l	equ	0xFE1
   953                           plusw2	equ	0xFDB
   954                           
   955 ;; *************** function _show_time_by_clock *****************
   956 ;; Defined at:
   957 ;;		line 7 in file "time_lcd.c"
   958 ;; Parameters:    Size  Location     Type
   959 ;;  timer           2   51[COMRAM] PTR struct tm
   960 ;;		 -> gmtime@tim(18), main@tp(18), 
   961 ;; Auto vars:     Size  Location     Type
   962 ;;		None
   963 ;; Return value:  Size  Location     Type
   964 ;;                  1    wreg      void 
   965 ;; Registers used:
   966 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   967 ;; Tracked objects:
   968 ;;		On entry : 0/0
   969 ;;		On exit  : 0/0
   970 ;;		Unchanged: 0/0
   971 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   972 ;;      Params:         2       0       0       0       0       0       0       0       0
   973 ;;      Locals:         0       0       0       0       0       0       0       0       0
   974 ;;      Temps:          6       0       0       0       0       0       0       0       0
   975 ;;      Totals:         8       0       0       0       0       0       0       0       0
   976 ;;Total ram usage:        8 bytes
   977 ;; Hardware stack levels used:    1
   978 ;; Hardware stack levels required when called:    5
   979 ;; This function calls:
   980 ;;		_localtime
   981 ;;		_printf
   982 ;; This function is called by:
   983 ;;		_main
   984 ;; This function uses a non-reentrant model
   985 ;;
   986                           
   987                           	psect	text1
   988  000FE6                     __ptext1:
   989                           	opt stack 0
   990  000FE6                     _show_time_by_clock:
   991                           	opt stack 25
   992                           
   993                           ;time_lcd.c: 8: timer = localtime(&clock);
   994                           
   995                           ;incstack = 0
   996  000FE6  0E56               	movlw	low _clock
   997  000FE8  6E20               	movwf	localtime@tp,c
   998  000FEA  0E00               	movlw	high _clock
   999  000FEC  6E21               	movwf	localtime@tp+1,c
  1000  000FEE  EC26  F00A         	call	_localtime	;wreg free
  1001  000FF2  C020  F034         	movff	?_localtime,show_time_by_clock@timer
  1002  000FF6  C021  F035         	movff	?_localtime+1,show_time_by_clock@timer+1
  1003                           
  1004                           ;time_lcd.c: 9: printf("\a    %02d:%02d:%02d\n %s %02d %s %d",timer->tm_hour,timer->tm_m
      +                          in,timer->tm_sec,
  1005                           ;time_lcd.c: 10: dTs[timer->tm_wday],timer->tm_mday,mTs[timer->tm_mon],timer->tm_year+19
      +                          00);
  1006  000FFA  0E40               	movlw	low STR_39
  1007  000FFC  6E13               	movwf	printf@f,c
  1008  000FFE  0E08               	movlw	high STR_39
  1009  001000  6E14               	movwf	printf@f+1,c
  1010  001002  EE20 F004          	lfsr	2,4
  1011  001006  5034               	movf	show_time_by_clock@timer,w,c
  1012  001008  26D9               	addwf	fsr2l,f,c
  1013  00100A  5035               	movf	show_time_by_clock@timer+1,w,c
  1014  00100C  22DA               	addwfc	fsr2h,f,c
  1015  00100E  CFDE F015          	movff	postinc2,?_printf+2
  1016  001012  CFDD F016          	movff	postdec2,?_printf+3
  1017  001016  EE20 F002          	lfsr	2,2
  1018  00101A  5034               	movf	show_time_by_clock@timer,w,c
  1019  00101C  26D9               	addwf	fsr2l,f,c
  1020  00101E  5035               	movf	show_time_by_clock@timer+1,w,c
  1021  001020  22DA               	addwfc	fsr2h,f,c
  1022  001022  CFDE F017          	movff	postinc2,?_printf+4
  1023  001026  CFDD F018          	movff	postdec2,?_printf+5
  1024  00102A  C034  FFD9         	movff	show_time_by_clock@timer,fsr2l
  1025  00102E  C035  FFDA         	movff	show_time_by_clock@timer+1,fsr2h
  1026  001032  CFDE F019          	movff	postinc2,?_printf+6
  1027  001036  CFDD F01A          	movff	postdec2,?_printf+7
  1028  00103A  EE20 F00C          	lfsr	2,12
  1029  00103E  5034               	movf	show_time_by_clock@timer,w,c
  1030  001040  26D9               	addwf	fsr2l,f,c
  1031  001042  5035               	movf	show_time_by_clock@timer+1,w,c
  1032  001044  22DA               	addwfc	fsr2h,f,c
  1033  001046  CFDE F036          	movff	postinc2,??_show_time_by_clock
  1034  00104A  CFDD F037          	movff	postdec2,??_show_time_by_clock+1
  1035  00104E  90D8               	bcf	status,0,c
  1036  001050  3636               	rlcf	??_show_time_by_clock,f,c
  1037  001052  3637               	rlcf	??_show_time_by_clock+1,f,c
  1038  001054  0EA2               	movlw	low time_lcd@dTs
  1039  001056  2436               	addwf	??_show_time_by_clock,w,c
  1040  001058  6ED9               	movwf	fsr2l,c
  1041  00105A  0E00               	movlw	high time_lcd@dTs
  1042  00105C  2037               	addwfc	??_show_time_by_clock+1,w,c
  1043  00105E  6EDA               	movwf	fsr2h,c
  1044  001060  CFDE F01B          	movff	postinc2,?_printf+8
  1045  001064  CFDD F01C          	movff	postdec2,?_printf+9
  1046  001068  EE20 F006          	lfsr	2,6
  1047  00106C  5034               	movf	show_time_by_clock@timer,w,c
  1048  00106E  26D9               	addwf	fsr2l,f,c
  1049  001070  5035               	movf	show_time_by_clock@timer+1,w,c
  1050  001072  22DA               	addwfc	fsr2h,f,c
  1051  001074  CFDE F01D          	movff	postinc2,?_printf+10
  1052  001078  CFDD F01E          	movff	postdec2,?_printf+11
  1053  00107C  EE20 F008          	lfsr	2,8
  1054  001080  5034               	movf	show_time_by_clock@timer,w,c
  1055  001082  26D9               	addwf	fsr2l,f,c
  1056  001084  5035               	movf	show_time_by_clock@timer+1,w,c
  1057  001086  22DA               	addwfc	fsr2h,f,c
  1058  001088  CFDE F038          	movff	postinc2,??_show_time_by_clock+2
  1059  00108C  CFDD F039          	movff	postdec2,??_show_time_by_clock+3
  1060  001090  90D8               	bcf	status,0,c
  1061  001092  3638               	rlcf	??_show_time_by_clock+2,f,c
  1062  001094  3639               	rlcf	??_show_time_by_clock+3,f,c
  1063  001096  0E60               	movlw	low time_lcd@mTs
  1064  001098  2438               	addwf	??_show_time_by_clock+2,w,c
  1065  00109A  6ED9               	movwf	fsr2l,c
  1066  00109C  0E00               	movlw	high time_lcd@mTs
  1067  00109E  2039               	addwfc	??_show_time_by_clock+3,w,c
  1068  0010A0  6EDA               	movwf	fsr2h,c
  1069  0010A2  CFDE F01F          	movff	postinc2,?_printf+12
  1070  0010A6  CFDD F020          	movff	postdec2,?_printf+13
  1071  0010AA  EE20 F00A          	lfsr	2,10
  1072  0010AE  5034               	movf	show_time_by_clock@timer,w,c
  1073  0010B0  26D9               	addwf	fsr2l,f,c
  1074  0010B2  5035               	movf	show_time_by_clock@timer+1,w,c
  1075  0010B4  22DA               	addwfc	fsr2h,f,c
  1076  0010B6  CFDE F03A          	movff	postinc2,??_show_time_by_clock+4
  1077  0010BA  CFDD F03B          	movff	postdec2,??_show_time_by_clock+5
  1078  0010BE  0E6C               	movlw	108
  1079  0010C0  243A               	addwf	??_show_time_by_clock+4,w,c
  1080  0010C2  6E21               	movwf	?_printf+14,c
  1081  0010C4  0E07               	movlw	7
  1082  0010C6  203B               	addwfc	??_show_time_by_clock+5,w,c
  1083  0010C8  6E22               	movwf	?_printf+15,c
  1084  0010CA  EC63  F004         	call	_printf	;wreg free
  1085  0010CE  0012               	return		;funcret
  1086  0010D0                     __end_of_show_time_by_clock:
  1087                           	opt stack 0
  1088                           tblptru	equ	0xFF8
  1089                           tblptrh	equ	0xFF7
  1090                           tblptrl	equ	0xFF6
  1091                           tablat	equ	0xFF5
  1092                           postinc0	equ	0xFEE
  1093                           wreg	equ	0xFE8
  1094                           postdec1	equ	0xFE5
  1095                           plusw1	equ	0xFE3
  1096                           fsr1l	equ	0xFE1
  1097                           postinc2	equ	0xFDE
  1098                           postdec2	equ	0xFDD
  1099                           plusw2	equ	0xFDB
  1100                           fsr2h	equ	0xFDA
  1101                           fsr2l	equ	0xFD9
  1102                           status	equ	0xFD8
  1103                           
  1104 ;; *************** function _printf *****************
  1105 ;; Defined at:
  1106 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  1107 ;; Parameters:    Size  Location     Type
  1108 ;;  f               2   18[COMRAM] PTR const unsigned char 
  1109 ;;		 -> STR_39(35), 
  1110 ;; Auto vars:     Size  Location     Type
  1111 ;;  tmpval          4    0        struct .
  1112 ;;  width           2   49[COMRAM] int 
  1113 ;;  len             2   45[COMRAM] unsigned int 
  1114 ;;  val             2   43[COMRAM] unsigned int 
  1115 ;;  cp              2   41[COMRAM] PTR const unsigned char 
  1116 ;;		 -> STR_40(7), STR_38(3), STR_37(3), STR_36(3), 
  1117 ;;		 -> STR_35(3), STR_34(3), STR_33(3), STR_32(3), 
  1118 ;;		 -> STR_31(4), STR_30(4), STR_29(4), STR_28(4), 
  1119 ;;		 -> STR_27(4), STR_26(4), STR_25(4), STR_24(4), 
  1120 ;;		 -> STR_23(4), STR_22(4), STR_21(4), STR_20(4), 
  1121 ;;  ap              2   39[COMRAM] PTR void [1]
  1122 ;;		 -> ?_printf(2), 
  1123 ;;  c               1   48[COMRAM] char 
  1124 ;;  flag            1   47[COMRAM] unsigned char 
  1125 ;;  prec            1   38[COMRAM] char 
  1126 ;; Return value:  Size  Location     Type
  1127 ;;                  2   18[COMRAM] int 
  1128 ;; Registers used:
  1129 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1130 ;; Tracked objects:
  1131 ;;		On entry : 0/0
  1132 ;;		On exit  : 0/0
  1133 ;;		Unchanged: 0/0
  1134 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1135 ;;      Params:        16       0       0       0       0       0       0       0       0
  1136 ;;      Locals:        13       0       0       0       0       0       0       0       0
  1137 ;;      Temps:          4       0       0       0       0       0       0       0       0
  1138 ;;      Totals:        33       0       0       0       0       0       0       0       0
  1139 ;;Total ram usage:       33 bytes
  1140 ;; Hardware stack levels used:    1
  1141 ;; Hardware stack levels required when called:    4
  1142 ;; This function calls:
  1143 ;;		___lwdiv
  1144 ;;		___lwmod
  1145 ;;		___wmul
  1146 ;;		_isdigit
  1147 ;;		_putch
  1148 ;; This function is called by:
  1149 ;;		_show_time_by_clock
  1150 ;; This function uses a non-reentrant model
  1151 ;;
  1152                           
  1153                           	psect	text2
  1154  0008C6                     __ptext2:
  1155                           	opt stack 0
  1156  0008C6                     _printf:
  1157                           	opt stack 25
  1158                           
  1159                           ;doprnt.c: 466: va_list ap;
  1160                           ;doprnt.c: 499: signed char c;
  1161                           ;doprnt.c: 501: int width;
  1162                           ;doprnt.c: 506: signed char prec;
  1163                           ;doprnt.c: 508: unsigned char flag;
  1164                           ;doprnt.c: 523: union {
  1165                           ;doprnt.c: 524: unsigned long vd;
  1166                           ;doprnt.c: 525: double integ;
  1167                           ;doprnt.c: 526: } tmpval;
  1168                           ;doprnt.c: 528: unsigned int val;
  1169                           ;doprnt.c: 529: unsigned len;
  1170                           ;doprnt.c: 530: const char * cp;
  1171                           ;doprnt.c: 533: *ap = __va_start();
  1172                           
  1173                           ;incstack = 0
  1174  0008C6  0E15               	movlw	low (?_printf+2)
  1175  0008C8  6E28               	movwf	printf@ap,c
  1176  0008CA  0E00               	movlw	high (?_printf+2)
  1177  0008CC  6E29               	movwf	printf@ap+1,c
  1178                           
  1179                           ;doprnt.c: 536: while(c = *f++) {
  1180  0008CE  D16F               	goto	u1380
  1181  0008D0                     
  1182                           ;doprnt.c: 538: if(c != '%')
  1183  0008D0  0E25               	movlw	37
  1184  0008D2  1831               	xorwf	printf@c,w,c
  1185  0008D4  B4D8               	btfsc	status,2,c
  1186  0008D6  D004               	goto	l105
  1187                           
  1188                           ;doprnt.c: 540: {
  1189                           ;doprnt.c: 541: (putch(c) );
  1190  0008D8  5031               	movf	printf@c,w,c
  1191  0008DA  EC5E  F00B         	call	_putch
  1192                           
  1193                           ;doprnt.c: 542: continue;
  1194  0008DE  D167               	goto	u1380
  1195  0008E0                     l105:
  1196                           
  1197                           ;doprnt.c: 543: }
  1198                           ;doprnt.c: 546: width = 0;
  1199  0008E0  0E00               	movlw	0
  1200  0008E2  6E33               	movwf	printf@width+1,c
  1201  0008E4  0E00               	movlw	0
  1202  0008E6  6E32               	movwf	printf@width,c
  1203                           
  1204                           ;doprnt.c: 548: flag = 0;
  1205  0008E8  0E00               	movlw	0
  1206  0008EA  6E30               	movwf	printf@flag,c
  1207                           
  1208                           ;doprnt.c: 551: switch(*f) {
  1209                           
  1210                           ;doprnt.c: 550: for(;;) {
  1211  0008EC  D003               	goto	l107
  1212  0008EE                     
  1213                           ;doprnt.c: 580: flag |= 0x04;
  1214  0008EE  8430               	bsf	printf@flag,2,c
  1215                           
  1216                           ;doprnt.c: 581: f++;
  1217  0008F0  4A13               	infsnz	printf@f,f,c
  1218  0008F2  2A14               	incf	printf@f+1,f,c
  1219  0008F4                     l107:
  1220  0008F4  C013  FFF6         	movff	printf@f,tblptrl
  1221  0008F8  C014  FFF7         	movff	printf@f+1,tblptrh
  1222  0008FC                     	if	0	;tblptru may be non-zero
  1223  0008FC                     	endif
  1224  0008FC                     	if	0	;tblptru may be non-zero
  1225  0008FC                     	endif
  1226  0008FC  0008               	tblrd		*
  1227  0008FE  50F5               	movf	tablat,w,c
  1228                           
  1229                           ; Switch size 1, requested type "space"
  1230                           ; Number of cases is 1, Range of values is 48 to 48
  1231                           ; switch strategies available:
  1232                           ; Name         Instructions Cycles
  1233                           ; simple_byte            4     3 (average)
  1234                           ;	Chosen strategy is simple_byte
  1235  000900  0A30               	xorlw	48	; case 48
  1236  000902  B4D8               	btfsc	status,2,c
  1237  000904  D7F4               	goto	l108
  1238                           
  1239                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  1240                           
  1241                           ;doprnt.c: 586: }
  1242                           
  1243                           ;doprnt.c: 585: break;
  1244  000906  C013  FFF6         	movff	printf@f,tblptrl
  1245  00090A  C014  FFF7         	movff	printf@f+1,tblptrh
  1246  00090E                     	if	0	;tblptru may be non-zero
  1247  00090E                     	endif
  1248  00090E                     	if	0	;tblptru may be non-zero
  1249  00090E                     	endif
  1250  00090E  0008               	tblrd		*
  1251  000910  50F5               	movf	tablat,w,c
  1252  000912  EC7C  F00C         	call	_isdigit
  1253  000916  A0D8               	btfss	status,0,c
  1254  000918  D08C               	goto	l115
  1255                           
  1256                           ;doprnt.c: 598: width = 0;
  1257  00091A  0E00               	movlw	0
  1258  00091C  6E33               	movwf	printf@width+1,c
  1259  00091E  0E00               	movlw	0
  1260  000920  6E32               	movwf	printf@width,c
  1261  000922                     
  1262                           ;doprnt.c: 600: width *= 10;
  1263  000922  C032  F001         	movff	printf@width,___wmul@multiplier
  1264  000926  C033  F002         	movff	printf@width+1,___wmul@multiplier+1
  1265  00092A  0E00               	movlw	0
  1266  00092C  6E04               	movwf	___wmul@multiplicand+1,c
  1267  00092E  0E0A               	movlw	10
  1268  000930  6E03               	movwf	___wmul@multiplicand,c
  1269  000932  EC69  F00C         	call	___wmul	;wreg free
  1270  000936  C001  F032         	movff	?___wmul,printf@width
  1271  00093A  C002  F033         	movff	?___wmul+1,printf@width+1
  1272                           
  1273                           ;doprnt.c: 601: width += *f++ - '0';
  1274  00093E  0ED0               	movlw	208
  1275  000940  6E23               	movwf	??_printf& (0+255),c
  1276  000942  0EFF               	movlw	255
  1277  000944  6E24               	movwf	(??_printf+1)& (0+255),c
  1278  000946  C013  FFF6         	movff	printf@f,tblptrl
  1279  00094A  C014  FFF7         	movff	printf@f+1,tblptrh
  1280  00094E                     	if	0	;tblptru may be non-zero
  1281  00094E                     	endif
  1282  00094E                     	if	0	;tblptru may be non-zero
  1283  00094E                     	endif
  1284  00094E  0008               	tblrd		*
  1285  000950  50F5               	movf	tablat,w,c
  1286  000952  6E25               	movwf	(??_printf+2)& (0+255),c
  1287  000954  6A26               	clrf	(??_printf+3)& (0+255),c
  1288  000956  5023               	movf	??_printf,w,c
  1289  000958  2625               	addwf	??_printf+2,f,c
  1290  00095A  5024               	movf	??_printf+1,w,c
  1291  00095C  2226               	addwfc	??_printf+3,f,c
  1292  00095E  5025               	movf	??_printf+2,w,c
  1293  000960  2632               	addwf	printf@width,f,c
  1294  000962  5026               	movf	??_printf+3,w,c
  1295  000964  2233               	addwfc	printf@width+1,f,c
  1296  000966  4A13               	infsnz	printf@f,f,c
  1297  000968  2A14               	incf	printf@f+1,f,c
  1298                           
  1299                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  1300  00096A  C013  FFF6         	movff	printf@f,tblptrl
  1301  00096E  C014  FFF7         	movff	printf@f+1,tblptrh
  1302  000972                     	if	0	;tblptru may be non-zero
  1303  000972                     	endif
  1304  000972                     	if	0	;tblptru may be non-zero
  1305  000972                     	endif
  1306  000972  0008               	tblrd		*
  1307  000974  50F5               	movf	tablat,w,c
  1308  000976  EC7C  F00C         	call	_isdigit
  1309  00097A  A0D8               	btfss	status,0,c
  1310  00097C  D05A               	goto	l115
  1311  00097E  D7D1               	goto	l113
  1312  000980                     
  1313                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  1314  000980  C028  FFD9         	movff	printf@ap,fsr2l
  1315  000984  C029  FFDA         	movff	printf@ap+1,fsr2h
  1316  000988  CFDE F02A          	movff	postinc2,printf@cp
  1317  00098C  CFDD F02B          	movff	postdec2,printf@cp+1
  1318  000990  0E02               	movlw	2
  1319  000992  2628               	addwf	printf@ap,f,c
  1320  000994  0E00               	movlw	0
  1321  000996  2229               	addwfc	printf@ap+1,f,c
  1322                           
  1323                           ;doprnt.c: 740: if(!cp)
  1324  000998  502A               	movf	printf@cp,w,c
  1325  00099A  102B               	iorwf	printf@cp+1,w,c
  1326  00099C  A4D8               	btfss	status,2,c
  1327  00099E  D004               	goto	l122
  1328                           
  1329                           ;doprnt.c: 741: cp = "(null)";
  1330  0009A0  0E79               	movlw	low STR_40
  1331  0009A2  6E2A               	movwf	printf@cp,c
  1332  0009A4  0E08               	movlw	high STR_40
  1333  0009A6  6E2B               	movwf	printf@cp+1,c
  1334  0009A8                     l122:
  1335                           
  1336                           ;doprnt.c: 745: len = 0;
  1337  0009A8  0E00               	movlw	0
  1338  0009AA  6E2F               	movwf	printf@len+1,c
  1339  0009AC  0E00               	movlw	0
  1340  0009AE  6E2E               	movwf	printf@len,c
  1341                           
  1342                           ;doprnt.c: 746: while(cp[len])
  1343  0009B0  D002               	goto	l123
  1344  0009B2                     
  1345                           ;doprnt.c: 747: len++;
  1346  0009B2  4A2E               	infsnz	printf@len,f,c
  1347  0009B4  2A2F               	incf	printf@len+1,f,c
  1348  0009B6                     l123:
  1349  0009B6  502E               	movf	printf@len,w,c
  1350  0009B8  242A               	addwf	printf@cp,w,c
  1351  0009BA  6E23               	movwf	??_printf& (0+255),c
  1352  0009BC  502F               	movf	printf@len+1,w,c
  1353  0009BE  202B               	addwfc	printf@cp+1,w,c
  1354  0009C0  6E24               	movwf	(??_printf+1)& (0+255),c
  1355  0009C2  C023  FFF6         	movff	??_printf,tblptrl
  1356  0009C6  C024  FFF7         	movff	??_printf+1,tblptrh
  1357  0009CA                     	if	0	;tblptru may be non-zero
  1358  0009CA                     	endif
  1359  0009CA                     	if	0	;tblptru may be non-zero
  1360  0009CA                     	endif
  1361  0009CA  0008               	tblrd		*
  1362  0009CC  50F5               	movf	tablat,w,c
  1363  0009CE  0900               	iorlw	0
  1364  0009D0  A4D8               	btfss	status,2,c
  1365  0009D2  D7EF               	goto	l124
  1366                           
  1367                           ;doprnt.c: 757: if(width > len)
  1368  0009D4  5032               	movf	printf@width,w,c
  1369  0009D6  5C2E               	subwf	printf@len,w,c
  1370  0009D8  5033               	movf	printf@width+1,w,c
  1371  0009DA  582F               	subwfb	printf@len+1,w,c
  1372  0009DC  B0D8               	btfsc	status,0,c
  1373  0009DE  D005               	goto	l126
  1374                           
  1375                           ;doprnt.c: 758: width -= len;
  1376  0009E0  502E               	movf	printf@len,w,c
  1377  0009E2  5E32               	subwf	printf@width,f,c
  1378  0009E4  502F               	movf	printf@len+1,w,c
  1379  0009E6  5A33               	subwfb	printf@width+1,f,c
  1380  0009E8  D008               	goto	l128
  1381  0009EA                     l126:
  1382                           
  1383                           ;doprnt.c: 759: else
  1384                           ;doprnt.c: 760: width = 0;
  1385  0009EA  0E00               	movlw	0
  1386  0009EC  6E33               	movwf	printf@width+1,c
  1387  0009EE  0E00               	movlw	0
  1388  0009F0  6E32               	movwf	printf@width,c
  1389                           
  1390                           ;doprnt.c: 764: while(width--)
  1391  0009F2  D003               	goto	l128
  1392  0009F4                     l1808:
  1393                           
  1394                           ;doprnt.c: 765: (putch(' ') );
  1395  0009F4  0E20               	movlw	32
  1396  0009F6  EC5E  F00B         	call	_putch
  1397  0009FA                     l128:
  1398  0009FA  0632               	decf	printf@width,f,c
  1399  0009FC  A0D8               	btfss	status,0,c
  1400  0009FE  0633               	decf	printf@width+1,f,c
  1401  000A00  2832               	incf	printf@width,w,c
  1402  000A02  E1F8               	bnz	l1808
  1403  000A04  2833               	incf	printf@width+1,w,c
  1404  000A06  B4D8               	btfsc	status,2,c
  1405  000A08  D00B               	goto	l131
  1406  000A0A  D7F4               	goto	l129
  1407  000A0C                     l1812:
  1408                           
  1409                           ;doprnt.c: 768: (putch(*cp++) );
  1410  000A0C  C02A  FFF6         	movff	printf@cp,tblptrl
  1411  000A10  C02B  FFF7         	movff	printf@cp+1,tblptrh
  1412  000A14                     	if	0	;tblptru may be non-zero
  1413  000A14                     	endif
  1414  000A14                     	if	0	;tblptru may be non-zero
  1415  000A14                     	endif
  1416  000A14  0008               	tblrd		*
  1417  000A16  50F5               	movf	tablat,w,c
  1418  000A18  EC5E  F00B         	call	_putch
  1419  000A1C  4A2A               	infsnz	printf@cp,f,c
  1420  000A1E  2A2B               	incf	printf@cp+1,f,c
  1421  000A20                     l131:
  1422  000A20  062E               	decf	printf@len,f,c
  1423  000A22  A0D8               	btfss	status,0,c
  1424  000A24  062F               	decf	printf@len+1,f,c
  1425  000A26  282E               	incf	printf@len,w,c
  1426  000A28  E1F1               	bnz	l1812
  1427  000A2A  282F               	incf	printf@len+1,w,c
  1428  000A2C  B4D8               	btfsc	status,2,c
  1429  000A2E  D0BF               	goto	u1380
  1430  000A30  D7ED               	goto	l132
  1431  000A32                     l115:
  1432  000A32  C013  FFF6         	movff	printf@f,tblptrl
  1433  000A36  C014  FFF7         	movff	printf@f+1,tblptrh
  1434  000A3A  4A13               	infsnz	printf@f,f,c
  1435  000A3C  2A14               	incf	printf@f+1,f,c
  1436  000A3E                     	if	0	;tblptru may be non-zero
  1437  000A3E                     	endif
  1438  000A3E                     	if	0	;tblptru may be non-zero
  1439  000A3E                     	endif
  1440  000A3E  0008               	tblrd		*
  1441  000A40  CFF5 F031          	movff	tablat,printf@c
  1442  000A44  5031               	movf	printf@c,w,c
  1443                           
  1444                           ; Switch size 1, requested type "space"
  1445                           ; Number of cases is 4, Range of values is 0 to 115
  1446                           ; switch strategies available:
  1447                           ; Name         Instructions Cycles
  1448                           ; simple_byte           13     7 (average)
  1449                           ;	Chosen strategy is simple_byte
  1450  000A46  0A00               	xorlw	0	; case 0
  1451  000A48  B4D8               	btfsc	status,2,c
  1452  000A4A  0012               	return	
  1453  000A4C  0A64               	xorlw	100	; case 100
  1454  000A4E  B4D8               	btfsc	status,2,c
  1455  000A50  D007               	goto	l120
  1456  000A52  0A0D               	xorlw	13	; case 105
  1457  000A54  B4D8               	btfsc	status,2,c
  1458  000A56  D004               	goto	l120
  1459  000A58  0A1A               	xorlw	26	; case 115
  1460  000A5A  B4D8               	btfsc	status,2,c
  1461  000A5C  D791               	goto	l121
  1462  000A5E  D0A7               	goto	u1380
  1463  000A60                     l120:
  1464                           
  1465                           ;doprnt.c: 1253: {
  1466                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1467  000A60  C028  FFD9         	movff	printf@ap,fsr2l
  1468  000A64  C029  FFDA         	movff	printf@ap+1,fsr2h
  1469  000A68  CFDE F02C          	movff	postinc2,printf@val
  1470  000A6C  CFDD F02D          	movff	postdec2,printf@val+1
  1471  000A70  0E02               	movlw	2
  1472  000A72  2628               	addwf	printf@ap,f,c
  1473  000A74  0E00               	movlw	0
  1474  000A76  2229               	addwfc	printf@ap+1,f,c
  1475                           
  1476                           ;doprnt.c: 1261: if((int)val < 0) {
  1477  000A78  AE2D               	btfss	printf@val+1,7,c
  1478  000A7A  D006               	goto	l135
  1479                           
  1480                           ;doprnt.c: 1262: flag |= 0x03;
  1481  000A7C  0E03               	movlw	3
  1482  000A7E  1230               	iorwf	printf@flag,f,c
  1483                           
  1484                           ;doprnt.c: 1263: val = -val;
  1485  000A80  6C2C               	negf	printf@val,c
  1486  000A82  1E2D               	comf	printf@val+1,f,c
  1487  000A84  B0D8               	btfsc	status,0,c
  1488  000A86  2A2D               	incf	printf@val+1,f,c
  1489  000A88                     l135:
  1490                           
  1491                           ;doprnt.c: 1264: }
  1492                           ;doprnt.c: 1266: }
  1493                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1494  000A88  0E01               	movlw	1
  1495  000A8A  6E31               	movwf	printf@c,c
  1496  000A8C                     l1834:
  1497  000A8C  0E05               	movlw	5
  1498  000A8E  1831               	xorwf	printf@c,w,c
  1499  000A90  B4D8               	btfsc	status,2,c
  1500  000A92  D012               	goto	u1270
  1501                           
  1502                           ;doprnt.c: 1306: if(val < dpowers[c])
  1503  000A94  5031               	movf	printf@c,w,c
  1504  000A96  0D02               	mullw	2
  1505  000A98  0E0D               	movlw	low _dpowers
  1506  000A9A  24F3               	addwf	prodl,w,c
  1507  000A9C  6EF6               	movwf	tblptrl,c
  1508  000A9E  0E08               	movlw	high _dpowers
  1509  000AA0  20F4               	addwfc	prodh,w,c
  1510  000AA2  6EF7               	movwf	tblptrh,c
  1511  000AA4                     	if	0	;There are less than 3 active tblptr bytes
  1512  000AA4                     	endif
  1513  000AA4  0009               	tblrd		*+
  1514  000AA6  50F5               	movf	tablat,w,c
  1515  000AA8  5C2C               	subwf	printf@val,w,c
  1516  000AAA  0009               	tblrd		*+
  1517  000AAC  50F5               	movf	tablat,w,c
  1518  000AAE  582D               	subwfb	printf@val+1,w,c
  1519  000AB0  A0D8               	btfss	status,0,c
  1520  000AB2  D002               	goto	u1270
  1521                           
  1522                           ;doprnt.c: 1307: break;
  1523  000AB4  2A31               	incf	printf@c,f,c
  1524  000AB6  D7EA               	goto	l1834
  1525  000AB8                     u1270:
  1526                           
  1527                           ;doprnt.c: 1345: if(width && flag & 0x03)
  1528  000AB8  5032               	movf	printf@width,w,c
  1529  000ABA  1033               	iorwf	printf@width+1,w,c
  1530  000ABC  B4D8               	btfsc	status,2,c
  1531  000ABE  D009               	goto	l139
  1532  000AC0  C030  F023         	movff	printf@flag,??_printf
  1533  000AC4  0E03               	movlw	3
  1534  000AC6  1623               	andwf	??_printf,f,c
  1535  000AC8  B4D8               	btfsc	status,2,c
  1536  000ACA  D003               	goto	l139
  1537                           
  1538                           ;doprnt.c: 1346: width--;
  1539  000ACC  0632               	decf	printf@width,f,c
  1540  000ACE  A0D8               	btfss	status,0,c
  1541  000AD0  0633               	decf	printf@width+1,f,c
  1542  000AD2                     l139:
  1543                           
  1544                           ;doprnt.c: 1381: if(width > c)
  1545  000AD2  0E80               	movlw	128
  1546  000AD4  BE31               	btfsc	printf@c,7,c
  1547  000AD6  0E7F               	movlw	127
  1548  000AD8  6E23               	movwf	??_printf& (0+255),c
  1549  000ADA  5032               	movf	printf@width,w,c
  1550  000ADC  5C31               	subwf	printf@c,w,c
  1551  000ADE  5033               	movf	printf@width+1,w,c
  1552  000AE0  0A80               	xorlw	128
  1553  000AE2  5823               	subwfb	??_printf& (0+255),w,c
  1554  000AE4  B0D8               	btfsc	status,0,c
  1555  000AE6  D007               	goto	l140
  1556                           
  1557                           ;doprnt.c: 1382: width -= c;
  1558  000AE8  5031               	movf	printf@c,w,c
  1559  000AEA  5E32               	subwf	printf@width,f,c
  1560  000AEC  0E00               	movlw	0
  1561  000AEE  BE31               	btfsc	printf@c,7,c
  1562  000AF0  0EFF               	movlw	255
  1563  000AF2  5A33               	subwfb	printf@width+1,f,c
  1564  000AF4  D004               	goto	l141
  1565  000AF6                     l140:
  1566                           
  1567                           ;doprnt.c: 1383: else
  1568                           ;doprnt.c: 1384: width = 0;
  1569  000AF6  0E00               	movlw	0
  1570  000AF8  6E33               	movwf	printf@width+1,c
  1571  000AFA  0E00               	movlw	0
  1572  000AFC  6E32               	movwf	printf@width,c
  1573  000AFE                     l141:
  1574                           
  1575                           ;doprnt.c: 1387: if(flag & 0x04) {
  1576  000AFE  A430               	btfss	printf@flag,2,c
  1577  000B00  D014               	goto	l142
  1578                           
  1579                           ;doprnt.c: 1392: if(flag & 0x03)
  1580  000B02  C030  F023         	movff	printf@flag,??_printf
  1581  000B06  0E03               	movlw	3
  1582  000B08  1623               	andwf	??_printf,f,c
  1583  000B0A  B4D8               	btfsc	status,2,c
  1584  000B0C  D003               	goto	l143
  1585                           
  1586                           ;doprnt.c: 1393: (putch('-') );
  1587  000B0E  0E2D               	movlw	45
  1588  000B10  EC5E  F00B         	call	_putch
  1589  000B14                     l143:
  1590                           
  1591                           ;doprnt.c: 1415: if(width)
  1592  000B14  5032               	movf	printf@width,w,c
  1593  000B16  1033               	iorwf	printf@width+1,w,c
  1594  000B18  B4D8               	btfsc	status,2,c
  1595  000B1A  D01E               	goto	l151
  1596                           
  1597                           ;doprnt.c: 1417: (putch('0') );
  1598                           
  1599                           ;doprnt.c: 1416: do
  1600  000B1C  0E30               	movlw	48
  1601  000B1E  EC5E  F00B         	call	_putch
  1602                           
  1603                           ;doprnt.c: 1418: while(--width);
  1604  000B22  0632               	decf	printf@width,f,c
  1605  000B24  A0D8               	btfss	status,0,c
  1606  000B26  0633               	decf	printf@width+1,f,c
  1607  000B28  D7F5               	goto	l143
  1608  000B2A                     l142:
  1609                           
  1610                           ;doprnt.c: 1422: {
  1611                           ;doprnt.c: 1424: if(width
  1612                           ;doprnt.c: 1428: )
  1613  000B2A  5032               	movf	printf@width,w,c
  1614  000B2C  1033               	iorwf	printf@width+1,w,c
  1615  000B2E  B4D8               	btfsc	status,2,c
  1616  000B30  D00A               	goto	u1360
  1617  000B32                     u1350:
  1618                           
  1619                           ;doprnt.c: 1430: (putch(' ') );
  1620                           
  1621                           ;doprnt.c: 1429: do
  1622  000B32  0E20               	movlw	32
  1623  000B34  EC5E  F00B         	call	_putch
  1624                           
  1625                           ;doprnt.c: 1431: while(--width);
  1626  000B38  0632               	decf	printf@width,f,c
  1627  000B3A  A0D8               	btfss	status,0,c
  1628  000B3C  0633               	decf	printf@width+1,f,c
  1629  000B3E  5032               	movf	printf@width,w,c
  1630  000B40  1033               	iorwf	printf@width+1,w,c
  1631  000B42  A4D8               	btfss	status,2,c
  1632  000B44  D7F6               	goto	u1350
  1633  000B46                     u1360:
  1634                           
  1635                           ;doprnt.c: 1438: if(flag & 0x03)
  1636  000B46  C030  F023         	movff	printf@flag,??_printf
  1637  000B4A  0E03               	movlw	3
  1638  000B4C  1623               	andwf	??_printf,f,c
  1639  000B4E  B4D8               	btfsc	status,2,c
  1640  000B50  D003               	goto	l151
  1641                           
  1642                           ;doprnt.c: 1439: (putch('-') );
  1643  000B52  0E2D               	movlw	45
  1644  000B54  EC5E  F00B         	call	_putch
  1645  000B58                     l151:
  1646                           
  1647                           ;doprnt.c: 1469: }
  1648                           ;doprnt.c: 1472: prec = c;
  1649  000B58  C031  F027         	movff	printf@c,printf@prec
  1650                           
  1651                           ;doprnt.c: 1474: while(prec--) {
  1652  000B5C  D024               	goto	l152
  1653  000B5E                     
  1654                           ;doprnt.c: 1478: {
  1655                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  1656  000B5E  5027               	movf	printf@prec,w,c
  1657  000B60  0D02               	mullw	2
  1658  000B62  0E0D               	movlw	low _dpowers
  1659  000B64  24F3               	addwf	prodl,w,c
  1660  000B66  6EF6               	movwf	tblptrl,c
  1661  000B68  0E08               	movlw	high _dpowers
  1662  000B6A  20F4               	addwfc	prodh,w,c
  1663  000B6C  6EF7               	movwf	tblptrh,c
  1664  000B6E                     	if	0	;There are less than 3 active tblptr bytes
  1665  000B6E                     	endif
  1666  000B6E  0009               	tblrd		*+
  1667  000B70  CFF5 F009          	movff	tablat,___lwdiv@divisor
  1668  000B74  000A               	tblrd		*-
  1669  000B76  CFF5 F00A          	movff	tablat,___lwdiv@divisor+1
  1670  000B7A  C02C  F007         	movff	printf@val,___lwdiv@dividend
  1671  000B7E  C02D  F008         	movff	printf@val+1,___lwdiv@dividend+1
  1672  000B82  ECB5  F00B         	call	___lwdiv	;wreg free
  1673  000B86  C007  F00E         	movff	?___lwdiv,___lwmod@dividend
  1674  000B8A  C008  F00F         	movff	?___lwdiv+1,___lwmod@dividend+1
  1675  000B8E  0E00               	movlw	0
  1676  000B90  6E11               	movwf	___lwmod@divisor+1,c
  1677  000B92  0E0A               	movlw	10
  1678  000B94  6E10               	movwf	___lwmod@divisor,c
  1679  000B96  ECFF  F00B         	call	___lwmod	;wreg free
  1680  000B9A  500E               	movf	?___lwmod,w,c
  1681  000B9C  0F30               	addlw	48
  1682  000B9E  6E31               	movwf	printf@c,c
  1683                           
  1684                           ;doprnt.c: 1523: }
  1685                           ;doprnt.c: 1524: (putch(c) );
  1686  000BA0  5031               	movf	printf@c,w,c
  1687  000BA2  EC5E  F00B         	call	_putch
  1688  000BA6                     l152:
  1689  000BA6  0627               	decf	printf@prec,f,c
  1690  000BA8  2827               	incf	printf@prec,w,c
  1691  000BAA  A4D8               	btfss	status,2,c
  1692  000BAC  D7D8               	goto	l153
  1693  000BAE                     u1380:
  1694  000BAE  C013  FFF6         	movff	printf@f,tblptrl
  1695  000BB2  C014  FFF7         	movff	printf@f+1,tblptrh
  1696  000BB6  4A13               	infsnz	printf@f,f,c
  1697  000BB8  2A14               	incf	printf@f+1,f,c
  1698  000BBA                     	if	0	;tblptru may be non-zero
  1699  000BBA                     	endif
  1700  000BBA                     	if	0	;tblptru may be non-zero
  1701  000BBA                     	endif
  1702  000BBA  0008               	tblrd		*
  1703  000BBC  CFF5 F031          	movff	tablat,printf@c
  1704  000BC0  5031               	movf	printf@c,w,c
  1705  000BC2  B4D8               	btfsc	status,2,c
  1706  000BC4  0012               	return	
  1707  000BC6  D684               	goto	l104
  1708  000BC8                     __end_of_printf:
  1709                           	opt stack 0
  1710                           tblptru	equ	0xFF8
  1711                           tblptrh	equ	0xFF7
  1712                           tblptrl	equ	0xFF6
  1713                           tablat	equ	0xFF5
  1714                           prodh	equ	0xFF4
  1715                           prodl	equ	0xFF3
  1716                           postinc0	equ	0xFEE
  1717                           wreg	equ	0xFE8
  1718                           postdec1	equ	0xFE5
  1719                           plusw1	equ	0xFE3
  1720                           fsr1l	equ	0xFE1
  1721                           postinc2	equ	0xFDE
  1722                           postdec2	equ	0xFDD
  1723                           plusw2	equ	0xFDB
  1724                           fsr2h	equ	0xFDA
  1725                           fsr2l	equ	0xFD9
  1726                           status	equ	0xFD8
  1727                           
  1728 ;; *************** function _putch *****************
  1729 ;; Defined at:
  1730 ;;		line 42 in file "lcd.c"
  1731 ;; Parameters:    Size  Location     Type
  1732 ;;  c               1    wreg     unsigned char 
  1733 ;; Auto vars:     Size  Location     Type
  1734 ;;  c               1   11[COMRAM] unsigned char 
  1735 ;; Return value:  Size  Location     Type
  1736 ;;                  1    wreg      void 
  1737 ;; Registers used:
  1738 ;;		wreg, status,2, status,0, cstack
  1739 ;; Tracked objects:
  1740 ;;		On entry : 0/0
  1741 ;;		On exit  : 0/0
  1742 ;;		Unchanged: 0/0
  1743 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1744 ;;      Params:         0       0       0       0       0       0       0       0       0
  1745 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1746 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1747 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1748 ;;Total ram usage:        2 bytes
  1749 ;; Hardware stack levels used:    1
  1750 ;; Hardware stack levels required when called:    3
  1751 ;; This function calls:
  1752 ;;		_lcd_gotoxy
  1753 ;;		_send_byte
  1754 ;; This function is called by:
  1755 ;;		_printf
  1756 ;; This function uses a non-reentrant model
  1757 ;;
  1758                           
  1759                           	psect	text3
  1760  0016BC                     __ptext3:
  1761                           	opt stack 0
  1762  0016BC                     _putch:
  1763                           	opt stack 25
  1764                           
  1765                           ;incstack = 0
  1766                           ;putch@c stored from wreg
  1767  0016BC  6E0C               	movwf	putch@c,c
  1768                           
  1769                           ;lcd.c: 43: switch(c){
  1770  0016BE  D01F               	goto	l69
  1771  0016C0                     
  1772                           ;lcd.c: 45: lcd_gotoxy(1,1); break;
  1773  0016C0  0E01               	movlw	1
  1774  0016C2  6E06               	movwf	lcd_gotoxy@y,c
  1775  0016C4  0E01               	movlw	1
  1776  0016C6  EC3B  F00C         	call	_lcd_gotoxy
  1777  0016CA  0012               	return	
  1778  0016CC                     
  1779                           ;lcd.c: 47: send_byte(0,1);
  1780  0016CC  0E01               	movlw	1
  1781  0016CE  6E04               	movwf	send_byte@data,c
  1782  0016D0  0E00               	movlw	0
  1783  0016D2  EC8B  F00C         	call	_send_byte
  1784                           
  1785                           ;lcd.c: 48: _delay((unsigned long)((2)*(20000000/4000.0))); break;
  1786  0016D6  0E0D               	movlw	13
  1787  0016D8  6E0B               	movwf	??_putch& (0+255),c
  1788  0016DA  0EFC               	movlw	252
  1789  0016DC                     u1527:
  1790  0016DC  2EE8               	decfsz	wreg,f,c
  1791  0016DE  D7FE               	bra	u1527
  1792  0016E0  2E0B               	decfsz	??_putch& (0+255),f,c
  1793  0016E2  D7FC               	bra	u1527
  1794  0016E4  0012               	return	
  1795  0016E6                     
  1796                           ;lcd.c: 50: lcd_gotoxy(1,2); break;
  1797  0016E6  0E02               	movlw	2
  1798  0016E8  6E06               	movwf	lcd_gotoxy@y,c
  1799  0016EA  0E01               	movlw	1
  1800  0016EC  EC3B  F00C         	call	_lcd_gotoxy
  1801  0016F0  0012               	return	
  1802  0016F2                     
  1803                           ;lcd.c: 52: send_byte(1,c);
  1804  0016F2  C00C  F004         	movff	putch@c,send_byte@data
  1805  0016F6  0E01               	movlw	1
  1806  0016F8  EC8B  F00C         	call	_send_byte
  1807                           
  1808                           ;lcd.c: 53: }
  1809  0016FC  0012               	return	
  1810  0016FE                     l69:
  1811  0016FE  500C               	movf	putch@c,w,c
  1812                           
  1813                           ; Switch size 1, requested type "space"
  1814                           ; Number of cases is 3, Range of values is 7 to 12
  1815                           ; switch strategies available:
  1816                           ; Name         Instructions Cycles
  1817                           ; simple_byte           10     6 (average)
  1818                           ;	Chosen strategy is simple_byte
  1819  001700  0A07               	xorlw	7	; case 7
  1820  001702  B4D8               	btfsc	status,2,c
  1821  001704  D7DD               	goto	l70
  1822  001706  0A0D               	xorlw	13	; case 10
  1823  001708  B4D8               	btfsc	status,2,c
  1824  00170A  D7ED               	goto	l73
  1825  00170C  0A06               	xorlw	6	; case 12
  1826  00170E  B4D8               	btfsc	status,2,c
  1827  001710  D7DD               	goto	l72
  1828  001712  D7EF               	goto	l74
  1829  001714                     __end_of_putch:
  1830                           	opt stack 0
  1831                           tblptru	equ	0xFF8
  1832                           tblptrh	equ	0xFF7
  1833                           tblptrl	equ	0xFF6
  1834                           tablat	equ	0xFF5
  1835                           prodh	equ	0xFF4
  1836                           prodl	equ	0xFF3
  1837                           postinc0	equ	0xFEE
  1838                           wreg	equ	0xFE8
  1839                           postdec1	equ	0xFE5
  1840                           plusw1	equ	0xFE3
  1841                           fsr1l	equ	0xFE1
  1842                           postinc2	equ	0xFDE
  1843                           postdec2	equ	0xFDD
  1844                           plusw2	equ	0xFDB
  1845                           fsr2h	equ	0xFDA
  1846                           fsr2l	equ	0xFD9
  1847                           status	equ	0xFD8
  1848                           
  1849 ;; *************** function _lcd_gotoxy *****************
  1850 ;; Defined at:
  1851 ;;		line 22 in file "lcd.c"
  1852 ;; Parameters:    Size  Location     Type
  1853 ;;  x               1    wreg     unsigned char 
  1854 ;;  y               1    5[COMRAM] unsigned char 
  1855 ;; Auto vars:     Size  Location     Type
  1856 ;;  x               1    6[COMRAM] unsigned char 
  1857 ;;  dir             1    9[COMRAM] unsigned char 
  1858 ;; Return value:  Size  Location     Type
  1859 ;;                  1    wreg      void 
  1860 ;; Registers used:
  1861 ;;		wreg, status,2, status,0, cstack
  1862 ;; Tracked objects:
  1863 ;;		On entry : 0/0
  1864 ;;		On exit  : 0/0
  1865 ;;		Unchanged: 0/0
  1866 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1867 ;;      Params:         1       0       0       0       0       0       0       0       0
  1868 ;;      Locals:         4       0       0       0       0       0       0       0       0
  1869 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1870 ;;      Totals:         5       0       0       0       0       0       0       0       0
  1871 ;;Total ram usage:        5 bytes
  1872 ;; Hardware stack levels used:    1
  1873 ;; Hardware stack levels required when called:    2
  1874 ;; This function calls:
  1875 ;;		_send_byte
  1876 ;; This function is called by:
  1877 ;;		_putch
  1878 ;; This function uses a non-reentrant model
  1879 ;;
  1880                           
  1881                           	psect	text4
  1882  001876                     __ptext4:
  1883                           	opt stack 0
  1884  001876                     _lcd_gotoxy:
  1885                           	opt stack 25
  1886                           
  1887                           ;incstack = 0
  1888                           ;lcd_gotoxy@x stored from wreg
  1889  001876  6E07               	movwf	lcd_gotoxy@x,c
  1890                           
  1891                           ;lcd.c: 23: byte dir = y!=1? 0x40:0;
  1892  001878  0406               	decf	lcd_gotoxy@y,w,c
  1893  00187A  A4D8               	btfss	status,2,c
  1894  00187C  D004               	goto	l56
  1895  00187E  0E00               	movlw	0
  1896  001880  6E09               	movwf	_lcd_gotoxy$195+1,c
  1897  001882  0E00               	movlw	0
  1898  001884  D003               	goto	L1
  1899  001886                     l56:
  1900  001886  0E00               	movlw	0
  1901  001888  6E09               	movwf	_lcd_gotoxy$195+1,c
  1902  00188A  0E40               	movlw	64
  1903  00188C                     L1:
  1904  00188C  6E08               	movwf	_lcd_gotoxy$195,c
  1905  00188E  C008  F00A         	movff	_lcd_gotoxy$195,lcd_gotoxy@dir
  1906                           
  1907                           ;lcd.c: 24: dir += x-1;
  1908  001892  0407               	decf	lcd_gotoxy@x,w,c
  1909  001894  260A               	addwf	lcd_gotoxy@dir,f,c
  1910                           
  1911                           ;lcd.c: 25: send_byte(0,0x80|dir);
  1912  001896  500A               	movf	lcd_gotoxy@dir,w,c
  1913  001898  0980               	iorlw	128
  1914  00189A  6E04               	movwf	send_byte@data,c
  1915  00189C  0E00               	movlw	0
  1916  00189E  EC8B  F00C         	call	_send_byte
  1917  0018A2  0012               	return		;funcret
  1918  0018A4                     __end_of_lcd_gotoxy:
  1919                           	opt stack 0
  1920                           tblptru	equ	0xFF8
  1921                           tblptrh	equ	0xFF7
  1922                           tblptrl	equ	0xFF6
  1923                           tablat	equ	0xFF5
  1924                           prodh	equ	0xFF4
  1925                           prodl	equ	0xFF3
  1926                           postinc0	equ	0xFEE
  1927                           wreg	equ	0xFE8
  1928                           postdec1	equ	0xFE5
  1929                           plusw1	equ	0xFE3
  1930                           fsr1l	equ	0xFE1
  1931                           postinc2	equ	0xFDE
  1932                           postdec2	equ	0xFDD
  1933                           plusw2	equ	0xFDB
  1934                           fsr2h	equ	0xFDA
  1935                           fsr2l	equ	0xFD9
  1936                           status	equ	0xFD8
  1937                           
  1938 ;; *************** function _isdigit *****************
  1939 ;; Defined at:
  1940 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  1941 ;; Parameters:    Size  Location     Type
  1942 ;;  c               1    wreg     unsigned char 
  1943 ;; Auto vars:     Size  Location     Type
  1944 ;;  c               1    2[COMRAM] unsigned char 
  1945 ;; Return value:  Size  Location     Type
  1946 ;;		None               void
  1947 ;; Registers used:
  1948 ;;		wreg, status,2, status,0
  1949 ;; Tracked objects:
  1950 ;;		On entry : 0/0
  1951 ;;		On exit  : 0/0
  1952 ;;		Unchanged: 0/0
  1953 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1954 ;;      Params:         0       0       0       0       0       0       0       0       0
  1955 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1956 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1957 ;;      Totals:         3       0       0       0       0       0       0       0       0
  1958 ;;Total ram usage:        3 bytes
  1959 ;; Hardware stack levels used:    1
  1960 ;; This function calls:
  1961 ;;		Nothing
  1962 ;; This function is called by:
  1963 ;;		_printf
  1964 ;; This function uses a non-reentrant model
  1965 ;;
  1966                           
  1967                           	psect	text5
  1968  0018F8                     __ptext5:
  1969                           	opt stack 0
  1970  0018F8                     _isdigit:
  1971                           	opt stack 28
  1972                           
  1973                           ;incstack = 0
  1974                           ;isdigit@c stored from wreg
  1975  0018F8  6E03               	movwf	isdigit@c,c
  1976  0018FA  0E00               	movlw	0
  1977  0018FC  6E02               	movwf	_isdigit$594,c
  1978  0018FE  0E3A               	movlw	58
  1979  001900  6003               	cpfslt	isdigit@c,c
  1980  001902  D005               	goto	l517
  1981  001904  0E2F               	movlw	47
  1982  001906  6403               	cpfsgt	isdigit@c,c
  1983  001908  D002               	goto	l517
  1984  00190A  0E01               	movlw	1
  1985  00190C  6E02               	movwf	_isdigit$594,c
  1986  00190E                     l517:
  1987  00190E  C002  F001         	movff	_isdigit$594,??_isdigit
  1988  001912  3001               	rrcf	??_isdigit,w,c
  1989  001914  0012               	return	
  1990  001916                     __end_of_isdigit:
  1991                           	opt stack 0
  1992                           tblptru	equ	0xFF8
  1993                           tblptrh	equ	0xFF7
  1994                           tblptrl	equ	0xFF6
  1995                           tablat	equ	0xFF5
  1996                           prodh	equ	0xFF4
  1997                           prodl	equ	0xFF3
  1998                           postinc0	equ	0xFEE
  1999                           wreg	equ	0xFE8
  2000                           postdec1	equ	0xFE5
  2001                           plusw1	equ	0xFE3
  2002                           fsr1l	equ	0xFE1
  2003                           postinc2	equ	0xFDE
  2004                           postdec2	equ	0xFDD
  2005                           plusw2	equ	0xFDB
  2006                           fsr2h	equ	0xFDA
  2007                           fsr2l	equ	0xFD9
  2008                           status	equ	0xFD8
  2009                           
  2010 ;; *************** function _localtime *****************
  2011 ;; Defined at:
  2012 ;;		line 19 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ctime.c"
  2013 ;; Parameters:    Size  Location     Type
  2014 ;;  tp              2   31[COMRAM] PTR const long 
  2015 ;;		 -> clock(4), 
  2016 ;; Auto vars:     Size  Location     Type
  2017 ;;  t               4   37[COMRAM] long 
  2018 ;; Return value:  Size  Location     Type
  2019 ;;                  2   31[COMRAM] PTR struct tm
  2020 ;; Registers used:
  2021 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2022 ;; Tracked objects:
  2023 ;;		On entry : 0/0
  2024 ;;		On exit  : 0/0
  2025 ;;		Unchanged: 0/0
  2026 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2027 ;;      Params:         2       0       0       0       0       0       0       0       0
  2028 ;;      Locals:         4       0       0       0       0       0       0       0       0
  2029 ;;      Temps:          4       0       0       0       0       0       0       0       0
  2030 ;;      Totals:        10       0       0       0       0       0       0       0       0
  2031 ;;Total ram usage:       10 bytes
  2032 ;; Hardware stack levels used:    1
  2033 ;; Hardware stack levels required when called:    3
  2034 ;; This function calls:
  2035 ;;		___lmul
  2036 ;;		_gmtime
  2037 ;; This function is called by:
  2038 ;;		_show_time_by_clock
  2039 ;; This function uses a non-reentrant model
  2040 ;;
  2041                           
  2042                           	psect	text6
  2043  00144C                     __ptext6:
  2044                           	opt stack 0
  2045  00144C                     _localtime:
  2046                           	opt stack 26
  2047                           
  2048                           ;incstack = 0
  2049  00144C  C020  FFD9         	movff	localtime@tp,fsr2l
  2050  001450  C021  FFDA         	movff	localtime@tp+1,fsr2h
  2051  001454  CFDE F022          	movff	postinc2,??_localtime
  2052  001458  CFDE F023          	movff	postinc2,??_localtime+1
  2053  00145C  CFDE F024          	movff	postinc2,??_localtime+2
  2054  001460  CFDE F025          	movff	postinc2,??_localtime+3
  2055  001464  C054  F001         	movff	_time_zone,___lmul@multiplier
  2056  001468  C055  F002         	movff	_time_zone+1,___lmul@multiplier+1
  2057  00146C  0E00               	movlw	0
  2058  00146E  BE02               	btfsc	___lmul@multiplier+1,7,c
  2059  001470  0EFF               	movlw	-1
  2060  001472  6E03               	movwf	___lmul@multiplier+2,c
  2061  001474  6E04               	movwf	___lmul@multiplier+3,c
  2062  001476  0E3C               	movlw	60
  2063  001478  6E05               	movwf	___lmul@multiplicand,c
  2064  00147A  0E00               	movlw	0
  2065  00147C  6E06               	movwf	___lmul@multiplicand+1,c
  2066  00147E  0E00               	movlw	0
  2067  001480  6E07               	movwf	___lmul@multiplicand+2,c
  2068  001482  0E00               	movlw	0
  2069  001484  6E08               	movwf	___lmul@multiplicand+3,c
  2070  001486  EC8A  F00B         	call	___lmul	;wreg free
  2071  00148A  1E01               	comf	?___lmul,f,c
  2072  00148C  1E02               	comf	?___lmul+1,f,c
  2073  00148E  1E03               	comf	?___lmul+2,f,c
  2074  001490  1E04               	comf	?___lmul+3,f,c
  2075  001492  2A01               	incf	?___lmul,f,c
  2076  001494  0E00               	movlw	0
  2077  001496  2202               	addwfc	?___lmul+1,f,c
  2078  001498  2203               	addwfc	?___lmul+2,f,c
  2079  00149A  2204               	addwfc	?___lmul+3,f,c
  2080  00149C  5022               	movf	??_localtime,w,c
  2081  00149E  2401               	addwf	?___lmul,w,c
  2082  0014A0  6E26               	movwf	localtime@t,c
  2083  0014A2  5023               	movf	??_localtime+1,w,c
  2084  0014A4  2002               	addwfc	?___lmul+1,w,c
  2085  0014A6  6E27               	movwf	localtime@t+1,c
  2086  0014A8  5024               	movf	??_localtime+2,w,c
  2087  0014AA  2003               	addwfc	?___lmul+2,w,c
  2088  0014AC  6E28               	movwf	localtime@t+2,c
  2089  0014AE  5025               	movf	??_localtime+3,w,c
  2090  0014B0  2004               	addwfc	?___lmul+3,w,c
  2091  0014B2  6E29               	movwf	localtime@t+3,c
  2092  0014B4  0E26               	movlw	low localtime@t
  2093  0014B6  6E17               	movwf	gmtime@tp,c
  2094  0014B8  0E00               	movlw	high localtime@t
  2095  0014BA  6E18               	movwf	gmtime@tp+1,c
  2096  0014BC  ECED  F006         	call	_gmtime	;wreg free
  2097  0014C0  C017  F020         	movff	?_gmtime,?_localtime
  2098  0014C4  C018  F021         	movff	?_gmtime+1,?_localtime+1
  2099  0014C8  0012               	return	
  2100  0014CA                     __end_of_localtime:
  2101                           	opt stack 0
  2102                           tblptru	equ	0xFF8
  2103                           tblptrh	equ	0xFF7
  2104                           tblptrl	equ	0xFF6
  2105                           tablat	equ	0xFF5
  2106                           prodh	equ	0xFF4
  2107                           prodl	equ	0xFF3
  2108                           postinc0	equ	0xFEE
  2109                           wreg	equ	0xFE8
  2110                           postdec1	equ	0xFE5
  2111                           plusw1	equ	0xFE3
  2112                           fsr1l	equ	0xFE1
  2113                           postinc2	equ	0xFDE
  2114                           postdec2	equ	0xFDD
  2115                           plusw2	equ	0xFDB
  2116                           fsr2h	equ	0xFDA
  2117                           fsr2l	equ	0xFD9
  2118                           status	equ	0xFD8
  2119                           
  2120 ;; *************** function _gmtime *****************
  2121 ;; Defined at:
  2122 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ctime.c"
  2123 ;; Parameters:    Size  Location     Type
  2124 ;;  tp              2   22[COMRAM] PTR const long 
  2125 ;;		 -> localtime@t(4), 
  2126 ;; Auto vars:     Size  Location     Type
  2127 ;;  tc              4   27[COMRAM] struct .
  2128 ;; Return value:  Size  Location     Type
  2129 ;;                  2   22[COMRAM] PTR struct tm
  2130 ;; Registers used:
  2131 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2132 ;; Tracked objects:
  2133 ;;		On entry : 0/0
  2134 ;;		On exit  : 0/0
  2135 ;;		Unchanged: 0/0
  2136 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2137 ;;      Params:         2       0       0       0       0       0       0       0       0
  2138 ;;      Locals:         4       0       0       0       0       0       0       0       0
  2139 ;;      Temps:          3       0       0       0       0       0       0       0       0
  2140 ;;      Totals:         9       0       0       0       0       0       0       0       0
  2141 ;;Total ram usage:        9 bytes
  2142 ;; Hardware stack levels used:    1
  2143 ;; Hardware stack levels required when called:    2
  2144 ;; This function calls:
  2145 ;;		___aldiv
  2146 ;;		___almod
  2147 ;;		___awmod
  2148 ;;		_dylen
  2149 ;; This function is called by:
  2150 ;;		_localtime
  2151 ;; This function uses a non-reentrant model
  2152 ;;
  2153                           
  2154                           	psect	text7
  2155  000DDA                     __ptext7:
  2156                           	opt stack 0
  2157  000DDA                     _gmtime:
  2158                           	opt stack 26
  2159                           
  2160                           ;incstack = 0
  2161  000DDA  C017  FFD9         	movff	gmtime@tp,fsr2l
  2162  000DDE  C018  FFDA         	movff	gmtime@tp+1,fsr2h
  2163  000DE2  CFDE F01C          	movff	postinc2,gmtime@tc
  2164  000DE6  CFDE F01D          	movff	postinc2,gmtime@tc+1
  2165  000DEA  CFDE F01E          	movff	postinc2,gmtime@tc+2
  2166  000DEE  CFDE F01F          	movff	postinc2,gmtime@tc+3
  2167  000DF2  C01C  F001         	movff	gmtime@tc,___almod@dividend
  2168  000DF6  C01D  F002         	movff	gmtime@tc+1,___almod@dividend+1
  2169  000DFA  C01E  F003         	movff	gmtime@tc+2,___almod@dividend+2
  2170  000DFE  C01F  F004         	movff	gmtime@tc+3,___almod@dividend+3
  2171  000E02  0E3C               	movlw	60
  2172  000E04  6E05               	movwf	___almod@divisor,c
  2173  000E06  0E00               	movlw	0
  2174  000E08  6E06               	movwf	___almod@divisor+1,c
  2175  000E0A  0E00               	movlw	0
  2176  000E0C  6E07               	movwf	___almod@divisor+2,c
  2177  000E0E  0E00               	movlw	0
  2178  000E10  6E08               	movwf	___almod@divisor+3,c
  2179  000E12  EC7D  F009         	call	___almod	;wreg free
  2180  000E16  C001  F0D9         	movff	?___almod,gmtime@tim
  2181  000E1A  C002  F0DA         	movff	?___almod+1,gmtime@tim+1
  2182  000E1E  C01C  F001         	movff	gmtime@tc,___aldiv@dividend
  2183  000E22  C01D  F002         	movff	gmtime@tc+1,___aldiv@dividend+1
  2184  000E26  C01E  F003         	movff	gmtime@tc+2,___aldiv@dividend+2
  2185  000E2A  C01F  F004         	movff	gmtime@tc+3,___aldiv@dividend+3
  2186  000E2E  0E3C               	movlw	60
  2187  000E30  6E05               	movwf	___aldiv@divisor,c
  2188  000E32  0E00               	movlw	0
  2189  000E34  6E06               	movwf	___aldiv@divisor+1,c
  2190  000E36  0E00               	movlw	0
  2191  000E38  6E07               	movwf	___aldiv@divisor+2,c
  2192  000E3A  0E00               	movlw	0
  2193  000E3C  6E08               	movwf	___aldiv@divisor+3,c
  2194  000E3E  EC68  F008         	call	___aldiv	;wreg free
  2195  000E42  C001  F01C         	movff	?___aldiv,gmtime@tc
  2196  000E46  C002  F01D         	movff	?___aldiv+1,gmtime@tc+1
  2197  000E4A  C003  F01E         	movff	?___aldiv+2,gmtime@tc+2
  2198  000E4E  C004  F01F         	movff	?___aldiv+3,gmtime@tc+3
  2199  000E52  C01C  F001         	movff	gmtime@tc,___almod@dividend
  2200  000E56  C01D  F002         	movff	gmtime@tc+1,___almod@dividend+1
  2201  000E5A  C01E  F003         	movff	gmtime@tc+2,___almod@dividend+2
  2202  000E5E  C01F  F004         	movff	gmtime@tc+3,___almod@dividend+3
  2203  000E62  0E3C               	movlw	60
  2204  000E64  6E05               	movwf	___almod@divisor,c
  2205  000E66  0E00               	movlw	0
  2206  000E68  6E06               	movwf	___almod@divisor+1,c
  2207  000E6A  0E00               	movlw	0
  2208  000E6C  6E07               	movwf	___almod@divisor+2,c
  2209  000E6E  0E00               	movlw	0
  2210  000E70  6E08               	movwf	___almod@divisor+3,c
  2211  000E72  EC7D  F009         	call	___almod	;wreg free
  2212  000E76  C001  F0DB         	movff	?___almod,gmtime@tim+2
  2213  000E7A  C002  F0DC         	movff	?___almod+1,gmtime@tim+3
  2214  000E7E  C01C  F001         	movff	gmtime@tc,___aldiv@dividend
  2215  000E82  C01D  F002         	movff	gmtime@tc+1,___aldiv@dividend+1
  2216  000E86  C01E  F003         	movff	gmtime@tc+2,___aldiv@dividend+2
  2217  000E8A  C01F  F004         	movff	gmtime@tc+3,___aldiv@dividend+3
  2218  000E8E  0E3C               	movlw	60
  2219  000E90  6E05               	movwf	___aldiv@divisor,c
  2220  000E92  0E00               	movlw	0
  2221  000E94  6E06               	movwf	___aldiv@divisor+1,c
  2222  000E96  0E00               	movlw	0
  2223  000E98  6E07               	movwf	___aldiv@divisor+2,c
  2224  000E9A  0E00               	movlw	0
  2225  000E9C  6E08               	movwf	___aldiv@divisor+3,c
  2226  000E9E  EC68  F008         	call	___aldiv	;wreg free
  2227  000EA2  C001  F01C         	movff	?___aldiv,gmtime@tc
  2228  000EA6  C002  F01D         	movff	?___aldiv+1,gmtime@tc+1
  2229  000EAA  C003  F01E         	movff	?___aldiv+2,gmtime@tc+2
  2230  000EAE  C004  F01F         	movff	?___aldiv+3,gmtime@tc+3
  2231  000EB2  C01C  F001         	movff	gmtime@tc,___almod@dividend
  2232  000EB6  C01D  F002         	movff	gmtime@tc+1,___almod@dividend+1
  2233  000EBA  C01E  F003         	movff	gmtime@tc+2,___almod@dividend+2
  2234  000EBE  C01F  F004         	movff	gmtime@tc+3,___almod@dividend+3
  2235  000EC2  0E18               	movlw	24
  2236  000EC4  6E05               	movwf	___almod@divisor,c
  2237  000EC6  0E00               	movlw	0
  2238  000EC8  6E06               	movwf	___almod@divisor+1,c
  2239  000ECA  0E00               	movlw	0
  2240  000ECC  6E07               	movwf	___almod@divisor+2,c
  2241  000ECE  0E00               	movlw	0
  2242  000ED0  6E08               	movwf	___almod@divisor+3,c
  2243  000ED2  EC7D  F009         	call	___almod	;wreg free
  2244  000ED6  C001  F0DD         	movff	?___almod,gmtime@tim+4
  2245  000EDA  C002  F0DE         	movff	?___almod+1,gmtime@tim+5
  2246  000EDE  C01C  F001         	movff	gmtime@tc,___aldiv@dividend
  2247  000EE2  C01D  F002         	movff	gmtime@tc+1,___aldiv@dividend+1
  2248  000EE6  C01E  F003         	movff	gmtime@tc+2,___aldiv@dividend+2
  2249  000EEA  C01F  F004         	movff	gmtime@tc+3,___aldiv@dividend+3
  2250  000EEE  0E18               	movlw	24
  2251  000EF0  6E05               	movwf	___aldiv@divisor,c
  2252  000EF2  0E00               	movlw	0
  2253  000EF4  6E06               	movwf	___aldiv@divisor+1,c
  2254  000EF6  0E00               	movlw	0
  2255  000EF8  6E07               	movwf	___aldiv@divisor+2,c
  2256  000EFA  0E00               	movlw	0
  2257  000EFC  6E08               	movwf	___aldiv@divisor+3,c
  2258  000EFE  EC68  F008         	call	___aldiv	;wreg free
  2259  000F02  C001  F0DF         	movff	?___aldiv,gmtime@tim+6
  2260  000F06  C002  F0E0         	movff	?___aldiv+1,gmtime@tim+7
  2261  000F0A  0E04               	movlw	4
  2262  000F0C  0100               	movlb	0	; () banked
  2263  000F0E  25DF               	addwf	(gmtime@tim+6)& (0+255),w,b
  2264  000F10  6E01               	movwf	___awmod@dividend,c
  2265  000F12  0E00               	movlw	0
  2266  000F14  21E0               	addwfc	(gmtime@tim+7)& (0+255),w,b
  2267  000F16  6E02               	movwf	___awmod@dividend+1,c
  2268  000F18  0E00               	movlw	0
  2269  000F1A  6E04               	movwf	___awmod@divisor+1,c
  2270  000F1C  0E07               	movlw	7
  2271  000F1E  6E03               	movwf	___awmod@divisor,c
  2272  000F20  EC65  F00A         	call	___awmod	;wreg free
  2273  000F24  C001  F0E5         	movff	?___awmod,gmtime@tim+12
  2274  000F28  C002  F0E6         	movff	?___awmod+1,gmtime@tim+13
  2275  000F2C  0E00               	movlw	0
  2276  000F2E  0100               	movlb	0	; () banked
  2277  000F30  6FE4               	movwf	(gmtime@tim+11)& (0+255),b
  2278  000F32  0E46               	movlw	70
  2279  000F34  6FE3               	movwf	(gmtime@tim+10)& (0+255),b
  2280  000F36  D00D               	goto	l375
  2281  000F38                     
  2282                           ; BSR set to: 0
  2283                           
  2284                           ; BSR set to: 0
  2285  000F38  C0E3  F013         	movff	gmtime@tim+10,dylen@yr
  2286  000F3C  C0E4  F014         	movff	gmtime@tim+11,dylen@yr+1
  2287  000F40  ECCF  F00A         	call	_dylen	;wreg free
  2288  000F44  5013               	movf	?_dylen,w,c
  2289  000F46  0100               	movlb	0	; () banked
  2290  000F48  5FDF               	subwf	(gmtime@tim+6)& (0+255),f,b
  2291  000F4A  5014               	movf	?_dylen+1,w,c
  2292  000F4C  5BE0               	subwfb	(gmtime@tim+7)& (0+255),f,b
  2293                           
  2294                           ; BSR set to: 0
  2295  000F4E  4BE3               	infsnz	(gmtime@tim+10)& (0+255),f,b
  2296  000F50  2BE4               	incf	(gmtime@tim+11)& (0+255),f,b
  2297  000F52                     l375:
  2298                           
  2299                           ; BSR set to: 0
  2300                           
  2301                           ; BSR set to: 0
  2302  000F52  C0E3  F013         	movff	gmtime@tim+10,dylen@yr
  2303  000F56  C0E4  F014         	movff	gmtime@tim+11,dylen@yr+1
  2304  000F5A  ECCF  F00A         	call	_dylen	;wreg free
  2305  000F5E  5013               	movf	?_dylen,w,c
  2306  000F60  0100               	movlb	0	; () banked
  2307  000F62  5DDF               	subwf	(gmtime@tim+6)& (0+255),w,b
  2308  000F64  51E0               	movf	(gmtime@tim+7)& (0+255),w,b
  2309  000F66  0A80               	xorlw	128
  2310  000F68  6E19               	movwf	??_gmtime& (0+255),c
  2311  000F6A  5014               	movf	?_dylen+1,w,c
  2312  000F6C  0A80               	xorlw	128
  2313  000F6E  5819               	subwfb	??_gmtime& (0+255),w,c
  2314  000F70  B0D8               	btfsc	status,0,c
  2315  000F72  D7E2               	goto	l376
  2316                           
  2317                           ; BSR set to: 0
  2318                           
  2319                           ; BSR set to: 0
  2320  000F74  C0E3  F013         	movff	gmtime@tim+10,dylen@yr
  2321  000F78  C0E4  F014         	movff	gmtime@tim+11,dylen@yr+1
  2322  000F7C  ECCF  F00A         	call	_dylen	;wreg free
  2323  000F80  5013               	movf	?_dylen,w,c
  2324  000F82  0B02               	andlw	2
  2325  000F84  6E1C               	movwf	gmtime@tc,c
  2326  000F86  C0DF  F0E7         	movff	gmtime@tim+6,gmtime@tim+14
  2327  000F8A  C0E0  F0E8         	movff	gmtime@tim+7,gmtime@tim+15
  2328  000F8E  0E00               	movlw	0
  2329  000F90  0100               	movlb	0	; () banked
  2330  000F92  6FE2               	movwf	(gmtime@tim+9)& (0+255),b
  2331  000F94  0E00               	movlw	0
  2332  000F96  6FE1               	movwf	(gmtime@tim+8)& (0+255),b
  2333  000F98  D008               	goto	l378
  2334  000F9A                     
  2335                           ; BSR set to: 0
  2336                           
  2337                           ; BSR set to: 0
  2338  000F9A  501D               	movf	gmtime@tc+1,w,c
  2339  000F9C  5FDF               	subwf	(gmtime@tim+6)& (0+255),f,b
  2340  000F9E  0E00               	movlw	0
  2341  000FA0  5BE0               	subwfb	(gmtime@tim+7)& (0+255),f,b
  2342                           
  2343                           ; BSR set to: 0
  2344  000FA2  4BE1               	infsnz	(gmtime@tim+8)& (0+255),f,b
  2345  000FA4  2BE2               	incf	(gmtime@tim+9)& (0+255),f,b
  2346                           
  2347                           ; BSR set to: 0
  2348  000FA6  90D8               	bcf	status,0,c
  2349  000FA8  321C               	rrcf	gmtime@tc,f,c
  2350  000FAA                     l378:
  2351                           
  2352                           ; BSR set to: 0
  2353                           
  2354                           ; BSR set to: 0
  2355  000FAA  0E01               	movlw	low _moninit
  2356  000FAC  25E1               	addwf	(gmtime@tim+8)& (0+255),w,b
  2357  000FAE  6EF6               	movwf	tblptrl,c
  2358  000FB0  0E08               	movlw	high _moninit
  2359  000FB2  21E2               	addwfc	(gmtime@tim+9)& (0+255),w,b
  2360  000FB4  6EF7               	movwf	tblptrh,c
  2361  000FB6                     	if	0	;There are less than 3 active tblptr bytes
  2362  000FB6                     	endif
  2363  000FB6  0008               	tblrd		*
  2364  000FB8  50F5               	movf	tablat,w,c
  2365  000FBA  101C               	iorwf	gmtime@tc,w,c
  2366  000FBC  6E1D               	movwf	gmtime@tc+1,c
  2367  000FBE  501D               	movf	gmtime@tc+1,w,c
  2368  000FC0  6E19               	movwf	??_gmtime& (0+255),c
  2369  000FC2  6A1A               	clrf	(??_gmtime+1)& (0+255),c
  2370  000FC4  5019               	movf	??_gmtime,w,c
  2371  000FC6  5DDF               	subwf	(gmtime@tim+6)& (0+255),w,b
  2372  000FC8  51E0               	movf	(gmtime@tim+7)& (0+255),w,b
  2373  000FCA  0A80               	xorlw	128
  2374  000FCC  6E1B               	movwf	(??_gmtime+2)& (0+255),c
  2375  000FCE  501A               	movf	??_gmtime+1,w,c
  2376  000FD0  0A80               	xorlw	128
  2377  000FD2  581B               	subwfb	(??_gmtime+2)& (0+255),w,c
  2378  000FD4  B0D8               	btfsc	status,0,c
  2379  000FD6  D7E1               	goto	l379
  2380                           
  2381                           ; BSR set to: 0
  2382                           
  2383                           ; BSR set to: 0
  2384  000FD8  4BDF               	infsnz	(gmtime@tim+6)& (0+255),f,b
  2385  000FDA  2BE0               	incf	(gmtime@tim+7)& (0+255),f,b
  2386                           
  2387                           ; BSR set to: 0
  2388  000FDC  0ED9               	movlw	low gmtime@tim
  2389  000FDE  6E17               	movwf	?_gmtime,c
  2390  000FE0  0E00               	movlw	high gmtime@tim
  2391  000FE2  6E18               	movwf	?_gmtime+1,c
  2392  000FE4  0012               	return	
  2393  000FE6                     __end_of_gmtime:
  2394                           	opt stack 0
  2395                           tblptru	equ	0xFF8
  2396                           tblptrh	equ	0xFF7
  2397                           tblptrl	equ	0xFF6
  2398                           tablat	equ	0xFF5
  2399                           prodh	equ	0xFF4
  2400                           prodl	equ	0xFF3
  2401                           postinc0	equ	0xFEE
  2402                           wreg	equ	0xFE8
  2403                           postdec1	equ	0xFE5
  2404                           plusw1	equ	0xFE3
  2405                           fsr1l	equ	0xFE1
  2406                           postinc2	equ	0xFDE
  2407                           postdec2	equ	0xFDD
  2408                           plusw2	equ	0xFDB
  2409                           fsr2h	equ	0xFDA
  2410                           fsr2l	equ	0xFD9
  2411                           status	equ	0xFD8
  2412                           
  2413 ;; *************** function _dylen *****************
  2414 ;; Defined at:
  2415 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ctime.c"
  2416 ;; Parameters:    Size  Location     Type
  2417 ;;  yr              2   18[COMRAM] unsigned int 
  2418 ;; Auto vars:     Size  Location     Type
  2419 ;;		None
  2420 ;; Return value:  Size  Location     Type
  2421 ;;                  2   18[COMRAM] int 
  2422 ;; Registers used:
  2423 ;;		wreg, status,2, status,0, cstack
  2424 ;; Tracked objects:
  2425 ;;		On entry : 0/0
  2426 ;;		On exit  : 0/0
  2427 ;;		Unchanged: 0/0
  2428 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2429 ;;      Params:         2       0       0       0       0       0       0       0       0
  2430 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2431 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2432 ;;      Totals:         4       0       0       0       0       0       0       0       0
  2433 ;;Total ram usage:        4 bytes
  2434 ;; Hardware stack levels used:    1
  2435 ;; Hardware stack levels required when called:    1
  2436 ;; This function calls:
  2437 ;;		___lwmod
  2438 ;; This function is called by:
  2439 ;;		_gmtime
  2440 ;; This function uses a non-reentrant model
  2441 ;;
  2442                           
  2443                           	psect	text8
  2444  00159E                     __ptext8:
  2445                           	opt stack 0
  2446  00159E                     _dylen:
  2447                           	opt stack 26
  2448                           
  2449                           ; BSR set to: 0
  2450                           ;incstack = 0
  2451  00159E  0E03               	movlw	3
  2452  0015A0  1413               	andwf	dylen@yr,w,c
  2453  0015A2  6E15               	movwf	??_dylen& (0+255),c
  2454  0015A4  0E00               	movlw	0
  2455  0015A6  1414               	andwf	dylen@yr+1,w,c
  2456  0015A8  6E16               	movwf	(??_dylen+1)& (0+255),c
  2457  0015AA  5015               	movf	??_dylen,w,c
  2458  0015AC  1016               	iorwf	??_dylen+1,w,c
  2459  0015AE  A4D8               	btfss	status,2,c
  2460  0015B0  D01E               	goto	u1050
  2461  0015B2  C013  F00E         	movff	dylen@yr,___lwmod@dividend
  2462  0015B6  C014  F00F         	movff	dylen@yr+1,___lwmod@dividend+1
  2463  0015BA  0E00               	movlw	0
  2464  0015BC  6E11               	movwf	___lwmod@divisor+1,c
  2465  0015BE  0E64               	movlw	100
  2466  0015C0  6E10               	movwf	___lwmod@divisor,c
  2467  0015C2  ECFF  F00B         	call	___lwmod	;wreg free
  2468  0015C6  500E               	movf	?___lwmod,w,c
  2469  0015C8  100F               	iorwf	?___lwmod+1,w,c
  2470  0015CA  A4D8               	btfss	status,2,c
  2471  0015CC  D015               	goto	l364
  2472  0015CE  0E2C               	movlw	44
  2473  0015D0  2413               	addwf	dylen@yr,w,c
  2474  0015D2  6E0E               	movwf	___lwmod@dividend,c
  2475  0015D4  0E01               	movlw	1
  2476  0015D6  2014               	addwfc	dylen@yr+1,w,c
  2477  0015D8  6E0F               	movwf	___lwmod@dividend+1,c
  2478  0015DA  0E01               	movlw	1
  2479  0015DC  6E11               	movwf	___lwmod@divisor+1,c
  2480  0015DE  0E90               	movlw	144
  2481  0015E0  6E10               	movwf	___lwmod@divisor,c
  2482  0015E2  ECFF  F00B         	call	___lwmod	;wreg free
  2483  0015E6  500E               	movf	?___lwmod,w,c
  2484  0015E8  100F               	iorwf	?___lwmod+1,w,c
  2485  0015EA  B4D8               	btfsc	status,2,c
  2486  0015EC  D005               	goto	l364
  2487  0015EE                     u1050:
  2488  0015EE  0E01               	movlw	1
  2489  0015F0  6E14               	movwf	?_dylen+1,c
  2490  0015F2  0E6D               	movlw	109
  2491  0015F4  6E13               	movwf	?_dylen,c
  2492  0015F6  0012               	return	
  2493  0015F8                     l364:
  2494  0015F8  0E01               	movlw	1
  2495  0015FA  6E14               	movwf	?_dylen+1,c
  2496  0015FC  0E6E               	movlw	110
  2497  0015FE  6E13               	movwf	?_dylen,c
  2498  001600  0012               	return	
  2499  001602                     __end_of_dylen:
  2500                           	opt stack 0
  2501                           tblptru	equ	0xFF8
  2502                           tblptrh	equ	0xFF7
  2503                           tblptrl	equ	0xFF6
  2504                           tablat	equ	0xFF5
  2505                           prodh	equ	0xFF4
  2506                           prodl	equ	0xFF3
  2507                           postinc0	equ	0xFEE
  2508                           wreg	equ	0xFE8
  2509                           postdec1	equ	0xFE5
  2510                           plusw1	equ	0xFE3
  2511                           fsr1l	equ	0xFE1
  2512                           postinc2	equ	0xFDE
  2513                           postdec2	equ	0xFDD
  2514                           plusw2	equ	0xFDB
  2515                           fsr2h	equ	0xFDA
  2516                           fsr2l	equ	0xFD9
  2517                           status	equ	0xFD8
  2518                           
  2519 ;; *************** function ___awmod *****************
  2520 ;; Defined at:
  2521 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awmod.c"
  2522 ;; Parameters:    Size  Location     Type
  2523 ;;  dividend        2    0[COMRAM] int 
  2524 ;;  divisor         2    2[COMRAM] int 
  2525 ;; Auto vars:     Size  Location     Type
  2526 ;;  sign            1    5[COMRAM] unsigned char 
  2527 ;;  counter         1    4[COMRAM] unsigned char 
  2528 ;; Return value:  Size  Location     Type
  2529 ;;                  2    0[COMRAM] int 
  2530 ;; Registers used:
  2531 ;;		wreg, status,2, status,0
  2532 ;; Tracked objects:
  2533 ;;		On entry : 0/0
  2534 ;;		On exit  : 0/0
  2535 ;;		Unchanged: 0/0
  2536 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2537 ;;      Params:         4       0       0       0       0       0       0       0       0
  2538 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2539 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2540 ;;      Totals:         6       0       0       0       0       0       0       0       0
  2541 ;;Total ram usage:        6 bytes
  2542 ;; Hardware stack levels used:    1
  2543 ;; This function calls:
  2544 ;;		Nothing
  2545 ;; This function is called by:
  2546 ;;		_gmtime
  2547 ;;		_asctime
  2548 ;; This function uses a non-reentrant model
  2549 ;;
  2550                           
  2551                           	psect	text9
  2552  0014CA                     __ptext9:
  2553                           	opt stack 0
  2554  0014CA                     ___awmod:
  2555                           	opt stack 27
  2556                           
  2557                           ;incstack = 0
  2558  0014CA  0E00               	movlw	0
  2559  0014CC  6E06               	movwf	___awmod@sign,c
  2560  0014CE  AE02               	btfss	___awmod@dividend+1,7,c
  2561  0014D0  D006               	goto	l337
  2562  0014D2  6C01               	negf	___awmod@dividend,c
  2563  0014D4  1E02               	comf	___awmod@dividend+1,f,c
  2564  0014D6  B0D8               	btfsc	status,0,c
  2565  0014D8  2A02               	incf	___awmod@dividend+1,f,c
  2566  0014DA  0E01               	movlw	1
  2567  0014DC  6E06               	movwf	___awmod@sign,c
  2568  0014DE                     l337:
  2569  0014DE  AE04               	btfss	___awmod@divisor+1,7,c
  2570  0014E0  D004               	goto	l338
  2571  0014E2  6C03               	negf	___awmod@divisor,c
  2572  0014E4  1E04               	comf	___awmod@divisor+1,f,c
  2573  0014E6  B0D8               	btfsc	status,0,c
  2574  0014E8  2A04               	incf	___awmod@divisor+1,f,c
  2575  0014EA                     l338:
  2576  0014EA  5003               	movf	___awmod@divisor,w,c
  2577  0014EC  1004               	iorwf	___awmod@divisor+1,w,c
  2578  0014EE  B4D8               	btfsc	status,2,c
  2579  0014F0  D018               	goto	l345
  2580  0014F2  0E01               	movlw	1
  2581  0014F4  6E05               	movwf	___awmod@counter,c
  2582  0014F6  D004               	goto	l340
  2583  0014F8  90D8               	bcf	status,0,c
  2584  0014FA  3603               	rlcf	___awmod@divisor,f,c
  2585  0014FC  3604               	rlcf	___awmod@divisor+1,f,c
  2586  0014FE  2A05               	incf	___awmod@counter,f,c
  2587  001500                     l340:
  2588  001500  AE04               	btfss	___awmod@divisor+1,7,c
  2589  001502  D7FA               	goto	l341
  2590  001504                     u1000:
  2591  001504  5003               	movf	___awmod@divisor,w,c
  2592  001506  5C01               	subwf	___awmod@dividend,w,c
  2593  001508  5004               	movf	___awmod@divisor+1,w,c
  2594  00150A  5802               	subwfb	___awmod@dividend+1,w,c
  2595  00150C  A0D8               	btfss	status,0,c
  2596  00150E  D004               	goto	l344
  2597  001510  5003               	movf	___awmod@divisor,w,c
  2598  001512  5E01               	subwf	___awmod@dividend,f,c
  2599  001514  5004               	movf	___awmod@divisor+1,w,c
  2600  001516  5A02               	subwfb	___awmod@dividend+1,f,c
  2601  001518                     l344:
  2602  001518  90D8               	bcf	status,0,c
  2603  00151A  3204               	rrcf	___awmod@divisor+1,f,c
  2604  00151C  3203               	rrcf	___awmod@divisor,f,c
  2605  00151E  2E05               	decfsz	___awmod@counter,f,c
  2606  001520  D7F1               	goto	u1000
  2607  001522                     l345:
  2608  001522  5006               	movf	___awmod@sign,w,c
  2609  001524  B4D8               	btfsc	status,2,c
  2610  001526  D004               	goto	l346
  2611  001528  6C01               	negf	___awmod@dividend,c
  2612  00152A  1E02               	comf	___awmod@dividend+1,f,c
  2613  00152C  B0D8               	btfsc	status,0,c
  2614  00152E  2A02               	incf	___awmod@dividend+1,f,c
  2615  001530                     l346:
  2616  001530  C001  F001         	movff	___awmod@dividend,?___awmod
  2617  001534  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  2618  001538  0012               	return	
  2619  00153A                     __end_of___awmod:
  2620                           	opt stack 0
  2621                           tblptru	equ	0xFF8
  2622                           tblptrh	equ	0xFF7
  2623                           tblptrl	equ	0xFF6
  2624                           tablat	equ	0xFF5
  2625                           prodh	equ	0xFF4
  2626                           prodl	equ	0xFF3
  2627                           postinc0	equ	0xFEE
  2628                           wreg	equ	0xFE8
  2629                           postdec1	equ	0xFE5
  2630                           plusw1	equ	0xFE3
  2631                           fsr1l	equ	0xFE1
  2632                           postinc2	equ	0xFDE
  2633                           postdec2	equ	0xFDD
  2634                           plusw2	equ	0xFDB
  2635                           fsr2h	equ	0xFDA
  2636                           fsr2l	equ	0xFD9
  2637                           status	equ	0xFD8
  2638                           
  2639 ;; *************** function ___almod *****************
  2640 ;; Defined at:
  2641 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\almod.c"
  2642 ;; Parameters:    Size  Location     Type
  2643 ;;  dividend        4    0[COMRAM] long 
  2644 ;;  divisor         4    4[COMRAM] long 
  2645 ;; Auto vars:     Size  Location     Type
  2646 ;;  sign            1    9[COMRAM] unsigned char 
  2647 ;;  counter         1    8[COMRAM] unsigned char 
  2648 ;; Return value:  Size  Location     Type
  2649 ;;                  4    0[COMRAM] long 
  2650 ;; Registers used:
  2651 ;;		wreg, status,2, status,0
  2652 ;; Tracked objects:
  2653 ;;		On entry : 0/0
  2654 ;;		On exit  : 0/0
  2655 ;;		Unchanged: 0/0
  2656 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2657 ;;      Params:         8       0       0       0       0       0       0       0       0
  2658 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2659 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2660 ;;      Totals:        10       0       0       0       0       0       0       0       0
  2661 ;;Total ram usage:       10 bytes
  2662 ;; Hardware stack levels used:    1
  2663 ;; This function calls:
  2664 ;;		Nothing
  2665 ;; This function is called by:
  2666 ;;		_gmtime
  2667 ;; This function uses a non-reentrant model
  2668 ;;
  2669                           
  2670                           	psect	text10
  2671  0012FA                     __ptext10:
  2672                           	opt stack 0
  2673  0012FA                     ___almod:
  2674                           	opt stack 27
  2675                           
  2676                           ;incstack = 0
  2677  0012FA  0E00               	movlw	0
  2678  0012FC  6E0A               	movwf	___almod@sign,c
  2679  0012FE  AE04               	btfss	___almod@dividend+3,7,c
  2680  001300  D00A               	goto	l225
  2681  001302  1E04               	comf	___almod@dividend+3,f,c
  2682  001304  1E03               	comf	___almod@dividend+2,f,c
  2683  001306  1E02               	comf	___almod@dividend+1,f,c
  2684  001308  6C01               	negf	___almod@dividend,c
  2685  00130A  0E00               	movlw	0
  2686  00130C  2202               	addwfc	___almod@dividend+1,f,c
  2687  00130E  2203               	addwfc	___almod@dividend+2,f,c
  2688  001310  2204               	addwfc	___almod@dividend+3,f,c
  2689  001312  0E01               	movlw	1
  2690  001314  6E0A               	movwf	___almod@sign,c
  2691  001316                     l225:
  2692  001316  AE08               	btfss	___almod@divisor+3,7,c
  2693  001318  D008               	goto	l226
  2694  00131A  1E08               	comf	___almod@divisor+3,f,c
  2695  00131C  1E07               	comf	___almod@divisor+2,f,c
  2696  00131E  1E06               	comf	___almod@divisor+1,f,c
  2697  001320  6C05               	negf	___almod@divisor,c
  2698  001322  0E00               	movlw	0
  2699  001324  2206               	addwfc	___almod@divisor+1,f,c
  2700  001326  2207               	addwfc	___almod@divisor+2,f,c
  2701  001328  2208               	addwfc	___almod@divisor+3,f,c
  2702  00132A                     l226:
  2703  00132A  5005               	movf	___almod@divisor,w,c
  2704  00132C  1006               	iorwf	___almod@divisor+1,w,c
  2705  00132E  1007               	iorwf	___almod@divisor+2,w,c
  2706  001330  1008               	iorwf	___almod@divisor+3,w,c
  2707  001332  B4D8               	btfsc	status,2,c
  2708  001334  D024               	goto	l233
  2709  001336  0E01               	movlw	1
  2710  001338  6E09               	movwf	___almod@counter,c
  2711  00133A  D006               	goto	l228
  2712  00133C  90D8               	bcf	status,0,c
  2713  00133E  3605               	rlcf	___almod@divisor,f,c
  2714  001340  3606               	rlcf	___almod@divisor+1,f,c
  2715  001342  3607               	rlcf	___almod@divisor+2,f,c
  2716  001344  3608               	rlcf	___almod@divisor+3,f,c
  2717  001346  2A09               	incf	___almod@counter,f,c
  2718  001348                     l228:
  2719  001348  AE08               	btfss	___almod@divisor+3,7,c
  2720  00134A  D7F8               	goto	l229
  2721  00134C                     u940:
  2722  00134C  5005               	movf	___almod@divisor,w,c
  2723  00134E  5C01               	subwf	___almod@dividend,w,c
  2724  001350  5006               	movf	___almod@divisor+1,w,c
  2725  001352  5802               	subwfb	___almod@dividend+1,w,c
  2726  001354  5007               	movf	___almod@divisor+2,w,c
  2727  001356  5803               	subwfb	___almod@dividend+2,w,c
  2728  001358  5008               	movf	___almod@divisor+3,w,c
  2729  00135A  5804               	subwfb	___almod@dividend+3,w,c
  2730  00135C  A0D8               	btfss	status,0,c
  2731  00135E  D008               	goto	l232
  2732  001360  5005               	movf	___almod@divisor,w,c
  2733  001362  5E01               	subwf	___almod@dividend,f,c
  2734  001364  5006               	movf	___almod@divisor+1,w,c
  2735  001366  5A02               	subwfb	___almod@dividend+1,f,c
  2736  001368  5007               	movf	___almod@divisor+2,w,c
  2737  00136A  5A03               	subwfb	___almod@dividend+2,f,c
  2738  00136C  5008               	movf	___almod@divisor+3,w,c
  2739  00136E  5A04               	subwfb	___almod@dividend+3,f,c
  2740  001370                     l232:
  2741  001370  90D8               	bcf	status,0,c
  2742  001372  3208               	rrcf	___almod@divisor+3,f,c
  2743  001374  3207               	rrcf	___almod@divisor+2,f,c
  2744  001376  3206               	rrcf	___almod@divisor+1,f,c
  2745  001378  3205               	rrcf	___almod@divisor,f,c
  2746  00137A  2E09               	decfsz	___almod@counter,f,c
  2747  00137C  D7E7               	goto	u940
  2748  00137E                     l233:
  2749  00137E  500A               	movf	___almod@sign,w,c
  2750  001380  B4D8               	btfsc	status,2,c
  2751  001382  D008               	goto	l234
  2752  001384  1E04               	comf	___almod@dividend+3,f,c
  2753  001386  1E03               	comf	___almod@dividend+2,f,c
  2754  001388  1E02               	comf	___almod@dividend+1,f,c
  2755  00138A  6C01               	negf	___almod@dividend,c
  2756  00138C  0E00               	movlw	0
  2757  00138E  2202               	addwfc	___almod@dividend+1,f,c
  2758  001390  2203               	addwfc	___almod@dividend+2,f,c
  2759  001392  2204               	addwfc	___almod@dividend+3,f,c
  2760  001394                     l234:
  2761  001394  C001  F001         	movff	___almod@dividend,?___almod
  2762  001398  C002  F002         	movff	___almod@dividend+1,?___almod+1
  2763  00139C  C003  F003         	movff	___almod@dividend+2,?___almod+2
  2764  0013A0  C004  F004         	movff	___almod@dividend+3,?___almod+3
  2765  0013A4  0012               	return	
  2766  0013A6                     __end_of___almod:
  2767                           	opt stack 0
  2768                           tblptru	equ	0xFF8
  2769                           tblptrh	equ	0xFF7
  2770                           tblptrl	equ	0xFF6
  2771                           tablat	equ	0xFF5
  2772                           prodh	equ	0xFF4
  2773                           prodl	equ	0xFF3
  2774                           postinc0	equ	0xFEE
  2775                           wreg	equ	0xFE8
  2776                           postdec1	equ	0xFE5
  2777                           plusw1	equ	0xFE3
  2778                           fsr1l	equ	0xFE1
  2779                           postinc2	equ	0xFDE
  2780                           postdec2	equ	0xFDD
  2781                           plusw2	equ	0xFDB
  2782                           fsr2h	equ	0xFDA
  2783                           fsr2l	equ	0xFD9
  2784                           status	equ	0xFD8
  2785                           
  2786 ;; *************** function ___aldiv *****************
  2787 ;; Defined at:
  2788 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\aldiv.c"
  2789 ;; Parameters:    Size  Location     Type
  2790 ;;  dividend        4    0[COMRAM] long 
  2791 ;;  divisor         4    4[COMRAM] long 
  2792 ;; Auto vars:     Size  Location     Type
  2793 ;;  quotient        4   10[COMRAM] long 
  2794 ;;  sign            1    9[COMRAM] unsigned char 
  2795 ;;  counter         1    8[COMRAM] unsigned char 
  2796 ;; Return value:  Size  Location     Type
  2797 ;;                  4    0[COMRAM] long 
  2798 ;; Registers used:
  2799 ;;		wreg, status,2, status,0
  2800 ;; Tracked objects:
  2801 ;;		On entry : 0/0
  2802 ;;		On exit  : 0/0
  2803 ;;		Unchanged: 0/0
  2804 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2805 ;;      Params:         8       0       0       0       0       0       0       0       0
  2806 ;;      Locals:         6       0       0       0       0       0       0       0       0
  2807 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2808 ;;      Totals:        14       0       0       0       0       0       0       0       0
  2809 ;;Total ram usage:       14 bytes
  2810 ;; Hardware stack levels used:    1
  2811 ;; This function calls:
  2812 ;;		Nothing
  2813 ;; This function is called by:
  2814 ;;		_gmtime
  2815 ;; This function uses a non-reentrant model
  2816 ;;
  2817                           
  2818                           	psect	text11
  2819  0010D0                     __ptext11:
  2820                           	opt stack 0
  2821  0010D0                     ___aldiv:
  2822                           	opt stack 27
  2823                           
  2824                           ;incstack = 0
  2825  0010D0  0E00               	movlw	0
  2826  0010D2  6E0A               	movwf	___aldiv@sign,c
  2827  0010D4  AE08               	btfss	___aldiv@divisor+3,7,c
  2828  0010D6  D00A               	goto	l212
  2829  0010D8  1E08               	comf	___aldiv@divisor+3,f,c
  2830  0010DA  1E07               	comf	___aldiv@divisor+2,f,c
  2831  0010DC  1E06               	comf	___aldiv@divisor+1,f,c
  2832  0010DE  6C05               	negf	___aldiv@divisor,c
  2833  0010E0  0E00               	movlw	0
  2834  0010E2  2206               	addwfc	___aldiv@divisor+1,f,c
  2835  0010E4  2207               	addwfc	___aldiv@divisor+2,f,c
  2836  0010E6  2208               	addwfc	___aldiv@divisor+3,f,c
  2837  0010E8  0E01               	movlw	1
  2838  0010EA  6E0A               	movwf	___aldiv@sign,c
  2839  0010EC                     l212:
  2840  0010EC  AE04               	btfss	___aldiv@dividend+3,7,c
  2841  0010EE  D00A               	goto	l213
  2842  0010F0  1E04               	comf	___aldiv@dividend+3,f,c
  2843  0010F2  1E03               	comf	___aldiv@dividend+2,f,c
  2844  0010F4  1E02               	comf	___aldiv@dividend+1,f,c
  2845  0010F6  6C01               	negf	___aldiv@dividend,c
  2846  0010F8  0E00               	movlw	0
  2847  0010FA  2202               	addwfc	___aldiv@dividend+1,f,c
  2848  0010FC  2203               	addwfc	___aldiv@dividend+2,f,c
  2849  0010FE  2204               	addwfc	___aldiv@dividend+3,f,c
  2850  001100  0E01               	movlw	1
  2851  001102  1A0A               	xorwf	___aldiv@sign,f,c
  2852  001104                     l213:
  2853  001104  0E00               	movlw	0
  2854  001106  6E0B               	movwf	___aldiv@quotient,c
  2855  001108  0E00               	movlw	0
  2856  00110A  6E0C               	movwf	___aldiv@quotient+1,c
  2857  00110C  0E00               	movlw	0
  2858  00110E  6E0D               	movwf	___aldiv@quotient+2,c
  2859  001110  0E00               	movlw	0
  2860  001112  6E0E               	movwf	___aldiv@quotient+3,c
  2861  001114  5005               	movf	___aldiv@divisor,w,c
  2862  001116  1006               	iorwf	___aldiv@divisor+1,w,c
  2863  001118  1007               	iorwf	___aldiv@divisor+2,w,c
  2864  00111A  1008               	iorwf	___aldiv@divisor+3,w,c
  2865  00111C  B4D8               	btfsc	status,2,c
  2866  00111E  D02A               	goto	l220
  2867  001120  0E01               	movlw	1
  2868  001122  6E09               	movwf	___aldiv@counter,c
  2869  001124  D006               	goto	l215
  2870  001126  90D8               	bcf	status,0,c
  2871  001128  3605               	rlcf	___aldiv@divisor,f,c
  2872  00112A  3606               	rlcf	___aldiv@divisor+1,f,c
  2873  00112C  3607               	rlcf	___aldiv@divisor+2,f,c
  2874  00112E  3608               	rlcf	___aldiv@divisor+3,f,c
  2875  001130  2A09               	incf	___aldiv@counter,f,c
  2876  001132                     l215:
  2877  001132  AE08               	btfss	___aldiv@divisor+3,7,c
  2878  001134  D7F8               	goto	l216
  2879  001136                     u880:
  2880  001136  90D8               	bcf	status,0,c
  2881  001138  360B               	rlcf	___aldiv@quotient,f,c
  2882  00113A  360C               	rlcf	___aldiv@quotient+1,f,c
  2883  00113C  360D               	rlcf	___aldiv@quotient+2,f,c
  2884  00113E  360E               	rlcf	___aldiv@quotient+3,f,c
  2885  001140  5005               	movf	___aldiv@divisor,w,c
  2886  001142  5C01               	subwf	___aldiv@dividend,w,c
  2887  001144  5006               	movf	___aldiv@divisor+1,w,c
  2888  001146  5802               	subwfb	___aldiv@dividend+1,w,c
  2889  001148  5007               	movf	___aldiv@divisor+2,w,c
  2890  00114A  5803               	subwfb	___aldiv@dividend+2,w,c
  2891  00114C  5008               	movf	___aldiv@divisor+3,w,c
  2892  00114E  5804               	subwfb	___aldiv@dividend+3,w,c
  2893  001150  A0D8               	btfss	status,0,c
  2894  001152  D009               	goto	l219
  2895  001154  5005               	movf	___aldiv@divisor,w,c
  2896  001156  5E01               	subwf	___aldiv@dividend,f,c
  2897  001158  5006               	movf	___aldiv@divisor+1,w,c
  2898  00115A  5A02               	subwfb	___aldiv@dividend+1,f,c
  2899  00115C  5007               	movf	___aldiv@divisor+2,w,c
  2900  00115E  5A03               	subwfb	___aldiv@dividend+2,f,c
  2901  001160  5008               	movf	___aldiv@divisor+3,w,c
  2902  001162  5A04               	subwfb	___aldiv@dividend+3,f,c
  2903  001164  800B               	bsf	___aldiv@quotient,0,c
  2904  001166                     l219:
  2905  001166  90D8               	bcf	status,0,c
  2906  001168  3208               	rrcf	___aldiv@divisor+3,f,c
  2907  00116A  3207               	rrcf	___aldiv@divisor+2,f,c
  2908  00116C  3206               	rrcf	___aldiv@divisor+1,f,c
  2909  00116E  3205               	rrcf	___aldiv@divisor,f,c
  2910  001170  2E09               	decfsz	___aldiv@counter,f,c
  2911  001172  D7E1               	goto	u880
  2912  001174                     l220:
  2913  001174  500A               	movf	___aldiv@sign,w,c
  2914  001176  B4D8               	btfsc	status,2,c
  2915  001178  D008               	goto	l221
  2916  00117A  1E0E               	comf	___aldiv@quotient+3,f,c
  2917  00117C  1E0D               	comf	___aldiv@quotient+2,f,c
  2918  00117E  1E0C               	comf	___aldiv@quotient+1,f,c
  2919  001180  6C0B               	negf	___aldiv@quotient,c
  2920  001182  0E00               	movlw	0
  2921  001184  220C               	addwfc	___aldiv@quotient+1,f,c
  2922  001186  220D               	addwfc	___aldiv@quotient+2,f,c
  2923  001188  220E               	addwfc	___aldiv@quotient+3,f,c
  2924  00118A                     l221:
  2925  00118A  C00B  F001         	movff	___aldiv@quotient,?___aldiv
  2926  00118E  C00C  F002         	movff	___aldiv@quotient+1,?___aldiv+1
  2927  001192  C00D  F003         	movff	___aldiv@quotient+2,?___aldiv+2
  2928  001196  C00E  F004         	movff	___aldiv@quotient+3,?___aldiv+3
  2929  00119A  0012               	return	
  2930  00119C                     __end_of___aldiv:
  2931                           	opt stack 0
  2932                           tblptru	equ	0xFF8
  2933                           tblptrh	equ	0xFF7
  2934                           tblptrl	equ	0xFF6
  2935                           tablat	equ	0xFF5
  2936                           prodh	equ	0xFF4
  2937                           prodl	equ	0xFF3
  2938                           postinc0	equ	0xFEE
  2939                           wreg	equ	0xFE8
  2940                           postdec1	equ	0xFE5
  2941                           plusw1	equ	0xFE3
  2942                           fsr1l	equ	0xFE1
  2943                           postinc2	equ	0xFDE
  2944                           postdec2	equ	0xFDD
  2945                           plusw2	equ	0xFDB
  2946                           fsr2h	equ	0xFDA
  2947                           fsr2l	equ	0xFD9
  2948                           status	equ	0xFD8
  2949                           
  2950 ;; *************** function _mktime *****************
  2951 ;; Defined at:
  2952 ;;		line 52 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\mktime.c"
  2953 ;; Parameters:    Size  Location     Type
  2954 ;;  timeptr         2   39[COMRAM] PTR struct tm
  2955 ;;		 -> main@tp(18), 
  2956 ;; Auto vars:     Size  Location     Type
  2957 ;;  tt              4   49[COMRAM] long 
  2958 ;; Return value:  Size  Location     Type
  2959 ;;                  4   39[COMRAM] long 
  2960 ;; Registers used:
  2961 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2962 ;; Tracked objects:
  2963 ;;		On entry : 0/0
  2964 ;;		On exit  : 0/0
  2965 ;;		Unchanged: 0/0
  2966 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2967 ;;      Params:         4       0       0       0       0       0       0       0       0
  2968 ;;      Locals:         4       0       0       0       0       0       0       0       0
  2969 ;;      Temps:          6       0       0       0       0       0       0       0       0
  2970 ;;      Totals:        14       0       0       0       0       0       0       0       0
  2971 ;;Total ram usage:       14 bytes
  2972 ;; Hardware stack levels used:    1
  2973 ;; Hardware stack levels required when called:    3
  2974 ;; This function calls:
  2975 ;;		___lmul
  2976 ;;		_ymd_to_scalar
  2977 ;; This function is called by:
  2978 ;;		_main
  2979 ;; This function uses a non-reentrant model
  2980 ;;
  2981                           
  2982                           	psect	text12
  2983  000BC8                     __ptext12:
  2984                           	opt stack 0
  2985  000BC8                     _mktime:
  2986                           	opt stack 27
  2987                           
  2988                           ;incstack = 0
  2989  000BC8  EE20 F00A          	lfsr	2,10
  2990  000BCC  5028               	movf	mktime@timeptr,w,c
  2991  000BCE  26D9               	addwf	fsr2l,f,c
  2992  000BD0  5029               	movf	mktime@timeptr+1,w,c
  2993  000BD2  22DA               	addwfc	fsr2h,f,c
  2994  000BD4  0E01               	movlw	1
  2995  000BD6  BEDB               	btfsc	plusw2,7,c
  2996  000BD8  D017               	goto	u1470
  2997  000BDA  0E01               	movlw	1
  2998  000BDC  50DB               	movf	plusw2,w,c
  2999  000BDE  E104               	bnz	u1460
  3000  000BE0  0E46               	movlw	70
  3001  000BE2  5CDE               	subwf	postinc2,w,c
  3002  000BE4  A0D8               	btfss	status,0,c
  3003  000BE6  D010               	goto	u1470
  3004  000BE8                     u1460:
  3005  000BE8  EE20 F00A          	lfsr	2,10
  3006  000BEC  5028               	movf	mktime@timeptr,w,c
  3007  000BEE  26D9               	addwf	fsr2l,f,c
  3008  000BF0  5029               	movf	mktime@timeptr+1,w,c
  3009  000BF2  22DA               	addwfc	fsr2h,f,c
  3010  000BF4  0E01               	movlw	1
  3011  000BF6  BEDB               	btfsc	plusw2,7,c
  3012  000BF8  D00C               	goto	l639
  3013  000BFA  0E01               	movlw	1
  3014  000BFC  50DB               	movf	plusw2,w,c
  3015  000BFE  E104               	bnz	u1470
  3016  000C00  0E8B               	movlw	139
  3017  000C02  5CDE               	subwf	postinc2,w,c
  3018  000C04  A0D8               	btfss	status,0,c
  3019  000C06  D005               	goto	l639
  3020  000C08                     u1470:
  3021  000C08  6832               	setf	mktime@tt,c
  3022  000C0A  6833               	setf	mktime@tt+1,c
  3023  000C0C  6834               	setf	mktime@tt+2,c
  3024  000C0E  6835               	setf	mktime@tt+3,c
  3025  000C10  D0DB               	goto	l642
  3026  000C12                     l639:
  3027  000C12  EE20 F00A          	lfsr	2,10
  3028  000C16  5028               	movf	mktime@timeptr,w,c
  3029  000C18  26D9               	addwf	fsr2l,f,c
  3030  000C1A  5029               	movf	mktime@timeptr+1,w,c
  3031  000C1C  22DA               	addwfc	fsr2h,f,c
  3032  000C1E  CFDE F02C          	movff	postinc2,??_mktime
  3033  000C22  CFDD F02D          	movff	postdec2,??_mktime+1
  3034  000C26  0E6C               	movlw	108
  3035  000C28  242C               	addwf	??_mktime,w,c
  3036  000C2A  6E18               	movwf	ymd_to_scalar@yr,c
  3037  000C2C  0E07               	movlw	7
  3038  000C2E  202D               	addwfc	??_mktime+1,w,c
  3039  000C30  6E19               	movwf	ymd_to_scalar@yr+1,c
  3040  000C32  EE20 F008          	lfsr	2,8
  3041  000C36  5028               	movf	mktime@timeptr,w,c
  3042  000C38  26D9               	addwf	fsr2l,f,c
  3043  000C3A  5029               	movf	mktime@timeptr+1,w,c
  3044  000C3C  22DA               	addwfc	fsr2h,f,c
  3045  000C3E  CFDE F02E          	movff	postinc2,??_mktime+2
  3046  000C42  CFDD F02F          	movff	postdec2,??_mktime+3
  3047  000C46  0E01               	movlw	1
  3048  000C48  242E               	addwf	??_mktime+2,w,c
  3049  000C4A  6E1A               	movwf	ymd_to_scalar@mo,c
  3050  000C4C  0E00               	movlw	0
  3051  000C4E  202F               	addwfc	??_mktime+3,w,c
  3052  000C50  6E1B               	movwf	ymd_to_scalar@mo+1,c
  3053  000C52  EE20 F006          	lfsr	2,6
  3054  000C56  5028               	movf	mktime@timeptr,w,c
  3055  000C58  26D9               	addwf	fsr2l,f,c
  3056  000C5A  5029               	movf	mktime@timeptr+1,w,c
  3057  000C5C  22DA               	addwfc	fsr2h,f,c
  3058  000C5E  CFDE F01C          	movff	postinc2,ymd_to_scalar@day
  3059  000C62  CFDD F01D          	movff	postdec2,ymd_to_scalar@day+1
  3060  000C66  ECD3  F009         	call	_ymd_to_scalar	;wreg free
  3061  000C6A  C018  F032         	movff	?_ymd_to_scalar,mktime@tt
  3062  000C6E  C019  F033         	movff	?_ymd_to_scalar+1,mktime@tt+1
  3063  000C72  C01A  F034         	movff	?_ymd_to_scalar+2,mktime@tt+2
  3064  000C76  C01B  F035         	movff	?_ymd_to_scalar+3,mktime@tt+3
  3065  000C7A  0E07               	movlw	7
  3066  000C7C  6E19               	movwf	ymd_to_scalar@yr+1,c
  3067  000C7E  0EB2               	movlw	178
  3068  000C80  6E18               	movwf	ymd_to_scalar@yr,c
  3069  000C82  0E00               	movlw	0
  3070  000C84  6E1B               	movwf	ymd_to_scalar@mo+1,c
  3071  000C86  0E01               	movlw	1
  3072  000C88  6E1A               	movwf	ymd_to_scalar@mo,c
  3073  000C8A  0E00               	movlw	0
  3074  000C8C  6E1D               	movwf	ymd_to_scalar@day+1,c
  3075  000C8E  0E01               	movlw	1
  3076  000C90  6E1C               	movwf	ymd_to_scalar@day,c
  3077  000C92  ECD3  F009         	call	_ymd_to_scalar	;wreg free
  3078  000C96  5018               	movf	?_ymd_to_scalar,w,c
  3079  000C98  5E32               	subwf	mktime@tt,f,c
  3080  000C9A  5019               	movf	?_ymd_to_scalar+1,w,c
  3081  000C9C  5A33               	subwfb	mktime@tt+1,f,c
  3082  000C9E  501A               	movf	?_ymd_to_scalar+2,w,c
  3083  000CA0  5A34               	subwfb	mktime@tt+2,f,c
  3084  000CA2  501B               	movf	?_ymd_to_scalar+3,w,c
  3085  000CA4  5A35               	subwfb	mktime@tt+3,f,c
  3086  000CA6  EE20 F004          	lfsr	2,4
  3087  000CAA  5028               	movf	mktime@timeptr,w,c
  3088  000CAC  26D9               	addwf	fsr2l,f,c
  3089  000CAE  5029               	movf	mktime@timeptr+1,w,c
  3090  000CB0  22DA               	addwfc	fsr2h,f,c
  3091  000CB2  CFDE F02C          	movff	postinc2,??_mktime
  3092  000CB6  CFDD F02D          	movff	postdec2,??_mktime+1
  3093  000CBA  C02C  F02E         	movff	??_mktime,??_mktime+2
  3094  000CBE  C02D  F02F         	movff	??_mktime+1,??_mktime+3
  3095  000CC2  0E00               	movlw	0
  3096  000CC4  BE2F               	btfsc	(??_mktime+3)& (0+255),7,c
  3097  000CC6  0EFF               	movlw	255
  3098  000CC8  6E30               	movwf	(??_mktime+4)& (0+255),c
  3099  000CCA  6E31               	movwf	(??_mktime+5)& (0+255),c
  3100  000CCC  C032  F001         	movff	mktime@tt,___lmul@multiplier
  3101  000CD0  C033  F002         	movff	mktime@tt+1,___lmul@multiplier+1
  3102  000CD4  C034  F003         	movff	mktime@tt+2,___lmul@multiplier+2
  3103  000CD8  C035  F004         	movff	mktime@tt+3,___lmul@multiplier+3
  3104  000CDC  0E18               	movlw	24
  3105  000CDE  6E05               	movwf	___lmul@multiplicand,c
  3106  000CE0  0E00               	movlw	0
  3107  000CE2  6E06               	movwf	___lmul@multiplicand+1,c
  3108  000CE4  0E00               	movlw	0
  3109  000CE6  6E07               	movwf	___lmul@multiplicand+2,c
  3110  000CE8  0E00               	movlw	0
  3111  000CEA  6E08               	movwf	___lmul@multiplicand+3,c
  3112  000CEC  EC8A  F00B         	call	___lmul	;wreg free
  3113  000CF0  502E               	movf	??_mktime+2,w,c
  3114  000CF2  2401               	addwf	?___lmul,w,c
  3115  000CF4  6E32               	movwf	mktime@tt,c
  3116  000CF6  502F               	movf	??_mktime+3,w,c
  3117  000CF8  2002               	addwfc	?___lmul+1,w,c
  3118  000CFA  6E33               	movwf	mktime@tt+1,c
  3119  000CFC  5030               	movf	??_mktime+4,w,c
  3120  000CFE  2003               	addwfc	?___lmul+2,w,c
  3121  000D00  6E34               	movwf	mktime@tt+2,c
  3122  000D02  5031               	movf	??_mktime+5,w,c
  3123  000D04  2004               	addwfc	?___lmul+3,w,c
  3124  000D06  6E35               	movwf	mktime@tt+3,c
  3125  000D08  EE20 F002          	lfsr	2,2
  3126  000D0C  5028               	movf	mktime@timeptr,w,c
  3127  000D0E  26D9               	addwf	fsr2l,f,c
  3128  000D10  5029               	movf	mktime@timeptr+1,w,c
  3129  000D12  22DA               	addwfc	fsr2h,f,c
  3130  000D14  CFDE F02C          	movff	postinc2,??_mktime
  3131  000D18  CFDD F02D          	movff	postdec2,??_mktime+1
  3132  000D1C  C02C  F02E         	movff	??_mktime,??_mktime+2
  3133  000D20  C02D  F02F         	movff	??_mktime+1,??_mktime+3
  3134  000D24  0E00               	movlw	0
  3135  000D26  BE2F               	btfsc	(??_mktime+3)& (0+255),7,c
  3136  000D28  0EFF               	movlw	255
  3137  000D2A  6E30               	movwf	(??_mktime+4)& (0+255),c
  3138  000D2C  6E31               	movwf	(??_mktime+5)& (0+255),c
  3139  000D2E  C032  F001         	movff	mktime@tt,___lmul@multiplier
  3140  000D32  C033  F002         	movff	mktime@tt+1,___lmul@multiplier+1
  3141  000D36  C034  F003         	movff	mktime@tt+2,___lmul@multiplier+2
  3142  000D3A  C035  F004         	movff	mktime@tt+3,___lmul@multiplier+3
  3143  000D3E  0E3C               	movlw	60
  3144  000D40  6E05               	movwf	___lmul@multiplicand,c
  3145  000D42  0E00               	movlw	0
  3146  000D44  6E06               	movwf	___lmul@multiplicand+1,c
  3147  000D46  0E00               	movlw	0
  3148  000D48  6E07               	movwf	___lmul@multiplicand+2,c
  3149  000D4A  0E00               	movlw	0
  3150  000D4C  6E08               	movwf	___lmul@multiplicand+3,c
  3151  000D4E  EC8A  F00B         	call	___lmul	;wreg free
  3152  000D52  502E               	movf	??_mktime+2,w,c
  3153  000D54  2401               	addwf	?___lmul,w,c
  3154  000D56  6E32               	movwf	mktime@tt,c
  3155  000D58  502F               	movf	??_mktime+3,w,c
  3156  000D5A  2002               	addwfc	?___lmul+1,w,c
  3157  000D5C  6E33               	movwf	mktime@tt+1,c
  3158  000D5E  5030               	movf	??_mktime+4,w,c
  3159  000D60  2003               	addwfc	?___lmul+2,w,c
  3160  000D62  6E34               	movwf	mktime@tt+2,c
  3161  000D64  5031               	movf	??_mktime+5,w,c
  3162  000D66  2004               	addwfc	?___lmul+3,w,c
  3163  000D68  6E35               	movwf	mktime@tt+3,c
  3164  000D6A  C028  FFD9         	movff	mktime@timeptr,fsr2l
  3165  000D6E  C029  FFDA         	movff	mktime@timeptr+1,fsr2h
  3166  000D72  CFDE F02C          	movff	postinc2,??_mktime
  3167  000D76  CFDD F02D          	movff	postdec2,??_mktime+1
  3168  000D7A  C02C  F02E         	movff	??_mktime,??_mktime+2
  3169  000D7E  C02D  F02F         	movff	??_mktime+1,??_mktime+3
  3170  000D82  0E00               	movlw	0
  3171  000D84  BE2F               	btfsc	(??_mktime+3)& (0+255),7,c
  3172  000D86  0EFF               	movlw	255
  3173  000D88  6E30               	movwf	(??_mktime+4)& (0+255),c
  3174  000D8A  6E31               	movwf	(??_mktime+5)& (0+255),c
  3175  000D8C  C032  F001         	movff	mktime@tt,___lmul@multiplier
  3176  000D90  C033  F002         	movff	mktime@tt+1,___lmul@multiplier+1
  3177  000D94  C034  F003         	movff	mktime@tt+2,___lmul@multiplier+2
  3178  000D98  C035  F004         	movff	mktime@tt+3,___lmul@multiplier+3
  3179  000D9C  0E3C               	movlw	60
  3180  000D9E  6E05               	movwf	___lmul@multiplicand,c
  3181  000DA0  0E00               	movlw	0
  3182  000DA2  6E06               	movwf	___lmul@multiplicand+1,c
  3183  000DA4  0E00               	movlw	0
  3184  000DA6  6E07               	movwf	___lmul@multiplicand+2,c
  3185  000DA8  0E00               	movlw	0
  3186  000DAA  6E08               	movwf	___lmul@multiplicand+3,c
  3187  000DAC  EC8A  F00B         	call	___lmul	;wreg free
  3188  000DB0  502E               	movf	??_mktime+2,w,c
  3189  000DB2  2401               	addwf	?___lmul,w,c
  3190  000DB4  6E32               	movwf	mktime@tt,c
  3191  000DB6  502F               	movf	??_mktime+3,w,c
  3192  000DB8  2002               	addwfc	?___lmul+1,w,c
  3193  000DBA  6E33               	movwf	mktime@tt+1,c
  3194  000DBC  5030               	movf	??_mktime+4,w,c
  3195  000DBE  2003               	addwfc	?___lmul+2,w,c
  3196  000DC0  6E34               	movwf	mktime@tt+2,c
  3197  000DC2  5031               	movf	??_mktime+5,w,c
  3198  000DC4  2004               	addwfc	?___lmul+3,w,c
  3199  000DC6  6E35               	movwf	mktime@tt+3,c
  3200  000DC8                     l642:
  3201  000DC8  C032  F028         	movff	mktime@tt,?_mktime
  3202  000DCC  C033  F029         	movff	mktime@tt+1,?_mktime+1
  3203  000DD0  C034  F02A         	movff	mktime@tt+2,?_mktime+2
  3204  000DD4  C035  F02B         	movff	mktime@tt+3,?_mktime+3
  3205  000DD8  0012               	return	
  3206  000DDA                     __end_of_mktime:
  3207                           	opt stack 0
  3208                           tblptru	equ	0xFF8
  3209                           tblptrh	equ	0xFF7
  3210                           tblptrl	equ	0xFF6
  3211                           tablat	equ	0xFF5
  3212                           prodh	equ	0xFF4
  3213                           prodl	equ	0xFF3
  3214                           postinc0	equ	0xFEE
  3215                           wreg	equ	0xFE8
  3216                           postdec1	equ	0xFE5
  3217                           plusw1	equ	0xFE3
  3218                           fsr1l	equ	0xFE1
  3219                           postinc2	equ	0xFDE
  3220                           postdec2	equ	0xFDD
  3221                           plusw2	equ	0xFDB
  3222                           fsr2h	equ	0xFDA
  3223                           fsr2l	equ	0xFD9
  3224                           status	equ	0xFD8
  3225                           
  3226 ;; *************** function _ymd_to_scalar *****************
  3227 ;; Defined at:
  3228 ;;		line 40 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\mktime.c"
  3229 ;; Parameters:    Size  Location     Type
  3230 ;;  yr              2   23[COMRAM] unsigned int 
  3231 ;;  mo              2   25[COMRAM] unsigned int 
  3232 ;;  day             2   27[COMRAM] unsigned int 
  3233 ;; Auto vars:     Size  Location     Type
  3234 ;;  scalar          4   35[COMRAM] long 
  3235 ;; Return value:  Size  Location     Type
  3236 ;;                  4   23[COMRAM] long 
  3237 ;; Registers used:
  3238 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3239 ;; Tracked objects:
  3240 ;;		On entry : 0/0
  3241 ;;		On exit  : 0/0
  3242 ;;		Unchanged: 0/0
  3243 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3244 ;;      Params:         6       0       0       0       0       0       0       0       0
  3245 ;;      Locals:         6       0       0       0       0       0       0       0       0
  3246 ;;      Temps:          4       0       0       0       0       0       0       0       0
  3247 ;;      Totals:        16       0       0       0       0       0       0       0       0
  3248 ;;Total ram usage:       16 bytes
  3249 ;; Hardware stack levels used:    1
  3250 ;; Hardware stack levels required when called:    2
  3251 ;; This function calls:
  3252 ;;		_isleap
  3253 ;;		_months_to_days
  3254 ;;		_years_to_days
  3255 ;; This function is called by:
  3256 ;;		_mktime
  3257 ;; This function uses a non-reentrant model
  3258 ;;
  3259                           
  3260                           	psect	text13
  3261  0013A6                     __ptext13:
  3262                           	opt stack 0
  3263  0013A6                     _ymd_to_scalar:
  3264                           	opt stack 27
  3265                           
  3266                           ;incstack = 0
  3267  0013A6  C01A  F00E         	movff	ymd_to_scalar@mo,months_to_days@month
  3268  0013AA  C01B  F00F         	movff	ymd_to_scalar@mo+1,months_to_days@month+1
  3269  0013AE  EC20  F00C         	call	_months_to_days	;wreg free
  3270  0013B2  501C               	movf	ymd_to_scalar@day,w,c
  3271  0013B4  260E               	addwf	?_months_to_days,f,c
  3272  0013B6  501D               	movf	ymd_to_scalar@day+1,w,c
  3273  0013B8  220F               	addwfc	?_months_to_days+1,f,c
  3274  0013BA  C00E  F024         	movff	?_months_to_days,ymd_to_scalar@scalar
  3275  0013BE  C00F  F025         	movff	?_months_to_days+1,ymd_to_scalar@scalar+1
  3276  0013C2  6A26               	clrf	ymd_to_scalar@scalar+2,c
  3277  0013C4  6A27               	clrf	ymd_to_scalar@scalar+3,c
  3278  0013C6  501B               	movf	ymd_to_scalar@mo+1,w,c
  3279  0013C8  E104               	bnz	u1400
  3280  0013CA  0E03               	movlw	3
  3281  0013CC  5C1A               	subwf	ymd_to_scalar@mo,w,c
  3282  0013CE  A0D8               	btfss	status,0,c
  3283  0013D0  D023               	goto	l631
  3284  0013D2                     u1400:
  3285  0013D2  C018  F013         	movff	ymd_to_scalar@yr,isleap@yr
  3286  0013D6  C019  F014         	movff	ymd_to_scalar@yr+1,isleap@yr+1
  3287  0013DA  EC30  F00B         	call	_isleap	;wreg free
  3288  0013DE  5013               	movf	?_isleap,w,c
  3289  0013E0  1014               	iorwf	?_isleap+1,w,c
  3290  0013E2  A4D8               	btfss	status,2,c
  3291  0013E4  D004               	goto	l633
  3292  0013E6  0E00               	movlw	0
  3293  0013E8  6E23               	movwf	_ymd_to_scalar$670+1,c
  3294  0013EA  0E02               	movlw	2
  3295  0013EC  D003               	goto	L2
  3296  0013EE                     l633:
  3297  0013EE  0E00               	movlw	0
  3298  0013F0  6E23               	movwf	_ymd_to_scalar$670+1,c
  3299  0013F2  0E01               	movlw	1
  3300  0013F4                     L2:
  3301  0013F4  6E22               	movwf	_ymd_to_scalar$670,c
  3302  0013F6  C022  F01E         	movff	_ymd_to_scalar$670,??_ymd_to_scalar
  3303  0013FA  C023  F01F         	movff	_ymd_to_scalar$670+1,??_ymd_to_scalar+1
  3304  0013FE  0E00               	movlw	0
  3305  001400  BE1F               	btfsc	(??_ymd_to_scalar+1)& (0+255),7,c
  3306  001402  0EFF               	movlw	255
  3307  001404  6E20               	movwf	(??_ymd_to_scalar+2)& (0+255),c
  3308  001406  6E21               	movwf	(??_ymd_to_scalar+3)& (0+255),c
  3309  001408  501E               	movf	??_ymd_to_scalar,w,c
  3310  00140A  5E24               	subwf	ymd_to_scalar@scalar,f,c
  3311  00140C  501F               	movf	??_ymd_to_scalar+1,w,c
  3312  00140E  5A25               	subwfb	ymd_to_scalar@scalar+1,f,c
  3313  001410  5020               	movf	??_ymd_to_scalar+2,w,c
  3314  001412  5A26               	subwfb	ymd_to_scalar@scalar+2,f,c
  3315  001414  5021               	movf	??_ymd_to_scalar+3,w,c
  3316  001416  5A27               	subwfb	ymd_to_scalar@scalar+3,f,c
  3317  001418                     l631:
  3318  001418  0618               	decf	ymd_to_scalar@yr,f,c
  3319  00141A  A0D8               	btfss	status,0,c
  3320  00141C  0619               	decf	ymd_to_scalar@yr+1,f,c
  3321  00141E  C018  F00E         	movff	ymd_to_scalar@yr,years_to_days@yr
  3322  001422  C019  F00F         	movff	ymd_to_scalar@yr+1,years_to_days@yr+1
  3323  001426  EC26  F009         	call	_years_to_days	;wreg free
  3324  00142A  500E               	movf	?_years_to_days,w,c
  3325  00142C  2624               	addwf	ymd_to_scalar@scalar,f,c
  3326  00142E  500F               	movf	?_years_to_days+1,w,c
  3327  001430  2225               	addwfc	ymd_to_scalar@scalar+1,f,c
  3328  001432  5010               	movf	?_years_to_days+2,w,c
  3329  001434  2226               	addwfc	ymd_to_scalar@scalar+2,f,c
  3330  001436  5011               	movf	?_years_to_days+3,w,c
  3331  001438  2227               	addwfc	ymd_to_scalar@scalar+3,f,c
  3332  00143A  C024  F018         	movff	ymd_to_scalar@scalar,?_ymd_to_scalar
  3333  00143E  C025  F019         	movff	ymd_to_scalar@scalar+1,?_ymd_to_scalar+1
  3334  001442  C026  F01A         	movff	ymd_to_scalar@scalar+2,?_ymd_to_scalar+2
  3335  001446  C027  F01B         	movff	ymd_to_scalar@scalar+3,?_ymd_to_scalar+3
  3336  00144A  0012               	return	
  3337  00144C                     __end_of_ymd_to_scalar:
  3338                           	opt stack 0
  3339                           tblptru	equ	0xFF8
  3340                           tblptrh	equ	0xFF7
  3341                           tblptrl	equ	0xFF6
  3342                           tablat	equ	0xFF5
  3343                           prodh	equ	0xFF4
  3344                           prodl	equ	0xFF3
  3345                           postinc0	equ	0xFEE
  3346                           wreg	equ	0xFE8
  3347                           postdec1	equ	0xFE5
  3348                           plusw1	equ	0xFE3
  3349                           fsr1l	equ	0xFE1
  3350                           postinc2	equ	0xFDE
  3351                           postdec2	equ	0xFDD
  3352                           plusw2	equ	0xFDB
  3353                           fsr2h	equ	0xFDA
  3354                           fsr2l	equ	0xFD9
  3355                           status	equ	0xFD8
  3356                           
  3357 ;; *************** function _years_to_days *****************
  3358 ;; Defined at:
  3359 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\mktime.c"
  3360 ;; Parameters:    Size  Location     Type
  3361 ;;  yr              2   13[COMRAM] unsigned int 
  3362 ;; Auto vars:     Size  Location     Type
  3363 ;;  ret             4   19[COMRAM] long 
  3364 ;; Return value:  Size  Location     Type
  3365 ;;                  4   13[COMRAM] long 
  3366 ;; Registers used:
  3367 ;;		wreg, status,2, status,0, cstack
  3368 ;; Tracked objects:
  3369 ;;		On entry : 0/0
  3370 ;;		On exit  : 0/0
  3371 ;;		Unchanged: 0/0
  3372 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3373 ;;      Params:         4       0       0       0       0       0       0       0       0
  3374 ;;      Locals:         4       0       0       0       0       0       0       0       0
  3375 ;;      Temps:          2       0       0       0       0       0       0       0       0
  3376 ;;      Totals:        10       0       0       0       0       0       0       0       0
  3377 ;;Total ram usage:       10 bytes
  3378 ;; Hardware stack levels used:    1
  3379 ;; Hardware stack levels required when called:    1
  3380 ;; This function calls:
  3381 ;;		___lmul
  3382 ;;		___lwdiv
  3383 ;; This function is called by:
  3384 ;;		_ymd_to_scalar
  3385 ;; This function uses a non-reentrant model
  3386 ;;
  3387                           
  3388                           	psect	text14
  3389  00124C                     __ptext14:
  3390                           	opt stack 0
  3391  00124C                     _years_to_days:
  3392                           	opt stack 27
  3393                           
  3394                           ;incstack = 0
  3395  00124C  C00E  F001         	movff	years_to_days@yr,___lmul@multiplier
  3396  001250  C00F  F002         	movff	years_to_days@yr+1,___lmul@multiplier+1
  3397  001254  6A03               	clrf	___lmul@multiplier+2,c
  3398  001256  6A04               	clrf	___lmul@multiplier+3,c
  3399  001258  0E6D               	movlw	109
  3400  00125A  6E05               	movwf	___lmul@multiplicand,c
  3401  00125C  0E01               	movlw	1
  3402  00125E  6E06               	movwf	___lmul@multiplicand+1,c
  3403  001260  0E00               	movlw	0
  3404  001262  6E07               	movwf	___lmul@multiplicand+2,c
  3405  001264  0E00               	movlw	0
  3406  001266  6E08               	movwf	___lmul@multiplicand+3,c
  3407  001268  EC8A  F00B         	call	___lmul	;wreg free
  3408  00126C  C001  F014         	movff	?___lmul,years_to_days@ret
  3409  001270  C002  F015         	movff	?___lmul+1,years_to_days@ret+1
  3410  001274  C003  F016         	movff	?___lmul+2,years_to_days@ret+2
  3411  001278  C004  F017         	movff	?___lmul+3,years_to_days@ret+3
  3412  00127C  C00E  F007         	movff	years_to_days@yr,___lwdiv@dividend
  3413  001280  C00F  F008         	movff	years_to_days@yr+1,___lwdiv@dividend+1
  3414  001284  0E00               	movlw	0
  3415  001286  6E0A               	movwf	___lwdiv@divisor+1,c
  3416  001288  0E64               	movlw	100
  3417  00128A  6E09               	movwf	___lwdiv@divisor,c
  3418  00128C  ECB5  F00B         	call	___lwdiv	;wreg free
  3419  001290  1E07               	comf	?___lwdiv,f,c
  3420  001292  1E08               	comf	?___lwdiv+1,f,c
  3421  001294  4A07               	infsnz	?___lwdiv,f,c
  3422  001296  2A08               	incf	?___lwdiv+1,f,c
  3423  001298  C00E  F012         	movff	years_to_days@yr,??_years_to_days
  3424  00129C  C00F  F013         	movff	years_to_days@yr+1,??_years_to_days+1
  3425  0012A0  90D8               	bcf	status,0,c
  3426  0012A2  3213               	rrcf	??_years_to_days+1,f,c
  3427  0012A4  3212               	rrcf	??_years_to_days,f,c
  3428  0012A6  90D8               	bcf	status,0,c
  3429  0012A8  3213               	rrcf	??_years_to_days+1,f,c
  3430  0012AA  3212               	rrcf	??_years_to_days,f,c
  3431  0012AC  5007               	movf	?___lwdiv,w,c
  3432  0012AE  2612               	addwf	??_years_to_days,f,c
  3433  0012B0  5008               	movf	?___lwdiv+1,w,c
  3434  0012B2  2213               	addwfc	??_years_to_days+1,f,c
  3435  0012B4  5012               	movf	??_years_to_days,w,c
  3436  0012B6  2614               	addwf	years_to_days@ret,f,c
  3437  0012B8  5013               	movf	??_years_to_days+1,w,c
  3438  0012BA  2215               	addwfc	years_to_days@ret+1,f,c
  3439  0012BC  0E00               	movlw	0
  3440  0012BE  2216               	addwfc	years_to_days@ret+2,f,c
  3441  0012C0  0E00               	movlw	0
  3442  0012C2  2217               	addwfc	years_to_days@ret+3,f,c
  3443  0012C4  C00E  F007         	movff	years_to_days@yr,___lwdiv@dividend
  3444  0012C8  C00F  F008         	movff	years_to_days@yr+1,___lwdiv@dividend+1
  3445  0012CC  0E01               	movlw	1
  3446  0012CE  6E0A               	movwf	___lwdiv@divisor+1,c
  3447  0012D0  0E90               	movlw	144
  3448  0012D2  6E09               	movwf	___lwdiv@divisor,c
  3449  0012D4  ECB5  F00B         	call	___lwdiv	;wreg free
  3450  0012D8  5007               	movf	?___lwdiv,w,c
  3451  0012DA  2614               	addwf	years_to_days@ret,f,c
  3452  0012DC  5008               	movf	?___lwdiv+1,w,c
  3453  0012DE  2215               	addwfc	years_to_days@ret+1,f,c
  3454  0012E0  0E00               	movlw	0
  3455  0012E2  2216               	addwfc	years_to_days@ret+2,f,c
  3456  0012E4  0E00               	movlw	0
  3457  0012E6  2217               	addwfc	years_to_days@ret+3,f,c
  3458  0012E8  C014  F00E         	movff	years_to_days@ret,?_years_to_days
  3459  0012EC  C015  F00F         	movff	years_to_days@ret+1,?_years_to_days+1
  3460  0012F0  C016  F010         	movff	years_to_days@ret+2,?_years_to_days+2
  3461  0012F4  C017  F011         	movff	years_to_days@ret+3,?_years_to_days+3
  3462  0012F8  0012               	return	
  3463  0012FA                     __end_of_years_to_days:
  3464                           	opt stack 0
  3465                           tblptru	equ	0xFF8
  3466                           tblptrh	equ	0xFF7
  3467                           tblptrl	equ	0xFF6
  3468                           tablat	equ	0xFF5
  3469                           prodh	equ	0xFF4
  3470                           prodl	equ	0xFF3
  3471                           postinc0	equ	0xFEE
  3472                           wreg	equ	0xFE8
  3473                           postdec1	equ	0xFE5
  3474                           plusw1	equ	0xFE3
  3475                           fsr1l	equ	0xFE1
  3476                           postinc2	equ	0xFDE
  3477                           postdec2	equ	0xFDD
  3478                           plusw2	equ	0xFDB
  3479                           fsr2h	equ	0xFDA
  3480                           fsr2l	equ	0xFD9
  3481                           status	equ	0xFD8
  3482                           
  3483 ;; *************** function ___lmul *****************
  3484 ;; Defined at:
  3485 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul32.c"
  3486 ;; Parameters:    Size  Location     Type
  3487 ;;  multiplier      4    0[COMRAM] unsigned long 
  3488 ;;  multiplicand    4    4[COMRAM] unsigned long 
  3489 ;; Auto vars:     Size  Location     Type
  3490 ;;  product         4    8[COMRAM] unsigned long 
  3491 ;; Return value:  Size  Location     Type
  3492 ;;                  4    0[COMRAM] unsigned long 
  3493 ;; Registers used:
  3494 ;;		wreg, status,2, status,0
  3495 ;; Tracked objects:
  3496 ;;		On entry : 0/0
  3497 ;;		On exit  : 0/0
  3498 ;;		Unchanged: 0/0
  3499 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3500 ;;      Params:         8       0       0       0       0       0       0       0       0
  3501 ;;      Locals:         4       0       0       0       0       0       0       0       0
  3502 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3503 ;;      Totals:        12       0       0       0       0       0       0       0       0
  3504 ;;Total ram usage:       12 bytes
  3505 ;; Hardware stack levels used:    1
  3506 ;; This function calls:
  3507 ;;		Nothing
  3508 ;; This function is called by:
  3509 ;;		_localtime
  3510 ;;		_years_to_days
  3511 ;;		_mktime
  3512 ;; This function uses a non-reentrant model
  3513 ;;
  3514                           
  3515                           	psect	text15
  3516  001714                     __ptext15:
  3517                           	opt stack 0
  3518  001714                     ___lmul:
  3519                           	opt stack 28
  3520                           
  3521                           ;incstack = 0
  3522  001714  0E00               	movlw	0
  3523  001716  6E09               	movwf	___lmul@product,c
  3524  001718  0E00               	movlw	0
  3525  00171A  6E0A               	movwf	___lmul@product+1,c
  3526  00171C  0E00               	movlw	0
  3527  00171E  6E0B               	movwf	___lmul@product+2,c
  3528  001720  0E00               	movlw	0
  3529  001722  6E0C               	movwf	___lmul@product+3,c
  3530  001724  A001               	btfss	___lmul@multiplier,0,c
  3531  001726  D008               	goto	l169
  3532  001728  5005               	movf	___lmul@multiplicand,w,c
  3533  00172A  2609               	addwf	___lmul@product,f,c
  3534  00172C  5006               	movf	___lmul@multiplicand+1,w,c
  3535  00172E  220A               	addwfc	___lmul@product+1,f,c
  3536  001730  5007               	movf	___lmul@multiplicand+2,w,c
  3537  001732  220B               	addwfc	___lmul@product+2,f,c
  3538  001734  5008               	movf	___lmul@multiplicand+3,w,c
  3539  001736  220C               	addwfc	___lmul@product+3,f,c
  3540  001738                     l169:
  3541  001738  90D8               	bcf	status,0,c
  3542  00173A  3605               	rlcf	___lmul@multiplicand,f,c
  3543  00173C  3606               	rlcf	___lmul@multiplicand+1,f,c
  3544  00173E  3607               	rlcf	___lmul@multiplicand+2,f,c
  3545  001740  3608               	rlcf	___lmul@multiplicand+3,f,c
  3546  001742  90D8               	bcf	status,0,c
  3547  001744  3204               	rrcf	___lmul@multiplier+3,f,c
  3548  001746  3203               	rrcf	___lmul@multiplier+2,f,c
  3549  001748  3202               	rrcf	___lmul@multiplier+1,f,c
  3550  00174A  3201               	rrcf	___lmul@multiplier,f,c
  3551  00174C  5001               	movf	___lmul@multiplier,w,c
  3552  00174E  1002               	iorwf	___lmul@multiplier+1,w,c
  3553  001750  1003               	iorwf	___lmul@multiplier+2,w,c
  3554  001752  1004               	iorwf	___lmul@multiplier+3,w,c
  3555  001754  A4D8               	btfss	status,2,c
  3556  001756  D7E6               	goto	l168
  3557  001758  C009  F001         	movff	___lmul@product,?___lmul
  3558  00175C  C00A  F002         	movff	___lmul@product+1,?___lmul+1
  3559  001760  C00B  F003         	movff	___lmul@product+2,?___lmul+2
  3560  001764  C00C  F004         	movff	___lmul@product+3,?___lmul+3
  3561  001768  0012               	return		;funcret
  3562  00176A                     __end_of___lmul:
  3563                           	opt stack 0
  3564                           tblptru	equ	0xFF8
  3565                           tblptrh	equ	0xFF7
  3566                           tblptrl	equ	0xFF6
  3567                           tablat	equ	0xFF5
  3568                           prodh	equ	0xFF4
  3569                           prodl	equ	0xFF3
  3570                           postinc0	equ	0xFEE
  3571                           wreg	equ	0xFE8
  3572                           postdec1	equ	0xFE5
  3573                           plusw1	equ	0xFE3
  3574                           fsr1l	equ	0xFE1
  3575                           postinc2	equ	0xFDE
  3576                           postdec2	equ	0xFDD
  3577                           plusw2	equ	0xFDB
  3578                           fsr2h	equ	0xFDA
  3579                           fsr2l	equ	0xFD9
  3580                           status	equ	0xFD8
  3581                           
  3582 ;; *************** function _months_to_days *****************
  3583 ;; Defined at:
  3584 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\mktime.c"
  3585 ;; Parameters:    Size  Location     Type
  3586 ;;  month           2   13[COMRAM] unsigned int 
  3587 ;; Auto vars:     Size  Location     Type
  3588 ;;		None
  3589 ;; Return value:  Size  Location     Type
  3590 ;;                  2   13[COMRAM] unsigned int 
  3591 ;; Registers used:
  3592 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3593 ;; Tracked objects:
  3594 ;;		On entry : 0/0
  3595 ;;		On exit  : 0/0
  3596 ;;		Unchanged: 0/0
  3597 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3598 ;;      Params:         2       0       0       0       0       0       0       0       0
  3599 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3600 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3601 ;;      Totals:         2       0       0       0       0       0       0       0       0
  3602 ;;Total ram usage:        2 bytes
  3603 ;; Hardware stack levels used:    1
  3604 ;; Hardware stack levels required when called:    1
  3605 ;; This function calls:
  3606 ;;		___lwdiv
  3607 ;;		___wmul
  3608 ;; This function is called by:
  3609 ;;		_ymd_to_scalar
  3610 ;; This function uses a non-reentrant model
  3611 ;;
  3612                           
  3613                           	psect	text16
  3614  001840                     __ptext16:
  3615                           	opt stack 0
  3616  001840                     _months_to_days:
  3617                           	opt stack 27
  3618                           
  3619                           ;incstack = 0
  3620  001840  C00E  F001         	movff	months_to_days@month,___wmul@multiplier
  3621  001844  C00F  F002         	movff	months_to_days@month+1,___wmul@multiplier+1
  3622  001848  0E0B               	movlw	11
  3623  00184A  6E04               	movwf	___wmul@multiplicand+1,c
  3624  00184C  0EF1               	movlw	241
  3625  00184E  6E03               	movwf	___wmul@multiplicand,c
  3626  001850  EC69  F00C         	call	___wmul	;wreg free
  3627  001854  0E41               	movlw	65
  3628  001856  2401               	addwf	?___wmul,w,c
  3629  001858  6E07               	movwf	___lwdiv@dividend,c
  3630  00185A  0EF4               	movlw	244
  3631  00185C  2002               	addwfc	?___wmul+1,w,c
  3632  00185E  6E08               	movwf	___lwdiv@dividend+1,c
  3633  001860  0E00               	movlw	0
  3634  001862  6E0A               	movwf	___lwdiv@divisor+1,c
  3635  001864  0E64               	movlw	100
  3636  001866  6E09               	movwf	___lwdiv@divisor,c
  3637  001868  ECB5  F00B         	call	___lwdiv	;wreg free
  3638  00186C  C007  F00E         	movff	?___lwdiv,?_months_to_days
  3639  001870  C008  F00F         	movff	?___lwdiv+1,?_months_to_days+1
  3640  001874  0012               	return	
  3641  001876                     __end_of_months_to_days:
  3642                           	opt stack 0
  3643                           tblptru	equ	0xFF8
  3644                           tblptrh	equ	0xFF7
  3645                           tblptrl	equ	0xFF6
  3646                           tablat	equ	0xFF5
  3647                           prodh	equ	0xFF4
  3648                           prodl	equ	0xFF3
  3649                           postinc0	equ	0xFEE
  3650                           wreg	equ	0xFE8
  3651                           postdec1	equ	0xFE5
  3652                           plusw1	equ	0xFE3
  3653                           fsr1l	equ	0xFE1
  3654                           postinc2	equ	0xFDE
  3655                           postdec2	equ	0xFDD
  3656                           plusw2	equ	0xFDB
  3657                           fsr2h	equ	0xFDA
  3658                           fsr2l	equ	0xFD9
  3659                           status	equ	0xFD8
  3660                           
  3661 ;; *************** function ___wmul *****************
  3662 ;; Defined at:
  3663 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  3664 ;; Parameters:    Size  Location     Type
  3665 ;;  multiplier      2    0[COMRAM] unsigned int 
  3666 ;;  multiplicand    2    2[COMRAM] unsigned int 
  3667 ;; Auto vars:     Size  Location     Type
  3668 ;;  product         2    4[COMRAM] unsigned int 
  3669 ;; Return value:  Size  Location     Type
  3670 ;;                  2    0[COMRAM] unsigned int 
  3671 ;; Registers used:
  3672 ;;		wreg, status,2, status,0, prodl, prodh
  3673 ;; Tracked objects:
  3674 ;;		On entry : 0/0
  3675 ;;		On exit  : 0/0
  3676 ;;		Unchanged: 0/0
  3677 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3678 ;;      Params:         4       0       0       0       0       0       0       0       0
  3679 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3680 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3681 ;;      Totals:         6       0       0       0       0       0       0       0       0
  3682 ;;Total ram usage:        6 bytes
  3683 ;; Hardware stack levels used:    1
  3684 ;; This function calls:
  3685 ;;		Nothing
  3686 ;; This function is called by:
  3687 ;;		_printf
  3688 ;;		_months_to_days
  3689 ;;		_asctime
  3690 ;; This function uses a non-reentrant model
  3691 ;;
  3692                           
  3693                           	psect	text17
  3694  0018D2                     __ptext17:
  3695                           	opt stack 0
  3696  0018D2                     ___wmul:
  3697                           	opt stack 28
  3698                           
  3699                           ;incstack = 0
  3700  0018D2  5001               	movf	___wmul@multiplier,w,c
  3701  0018D4  0203               	mulwf	___wmul@multiplicand,c
  3702  0018D6  CFF3 F005          	movff	prodl,___wmul@product
  3703  0018DA  CFF4 F006          	movff	prodh,___wmul@product+1
  3704  0018DE  5001               	movf	___wmul@multiplier,w,c
  3705  0018E0  0204               	mulwf	___wmul@multiplicand+1,c
  3706  0018E2  50F3               	movf	prodl,w,c
  3707  0018E4  2606               	addwf	___wmul@product+1,f,c
  3708  0018E6  5002               	movf	___wmul@multiplier+1,w,c
  3709  0018E8  0203               	mulwf	___wmul@multiplicand,c
  3710  0018EA  50F3               	movf	prodl,w,c
  3711  0018EC  2606               	addwf	___wmul@product+1,f,c
  3712  0018EE  C005  F001         	movff	___wmul@product,?___wmul
  3713  0018F2  C006  F002         	movff	___wmul@product+1,?___wmul+1
  3714  0018F6  0012               	return	
  3715  0018F8                     __end_of___wmul:
  3716                           	opt stack 0
  3717                           tblptru	equ	0xFF8
  3718                           tblptrh	equ	0xFF7
  3719                           tblptrl	equ	0xFF6
  3720                           tablat	equ	0xFF5
  3721                           prodh	equ	0xFF4
  3722                           prodl	equ	0xFF3
  3723                           postinc0	equ	0xFEE
  3724                           wreg	equ	0xFE8
  3725                           postdec1	equ	0xFE5
  3726                           plusw1	equ	0xFE3
  3727                           fsr1l	equ	0xFE1
  3728                           postinc2	equ	0xFDE
  3729                           postdec2	equ	0xFDD
  3730                           plusw2	equ	0xFDB
  3731                           fsr2h	equ	0xFDA
  3732                           fsr2l	equ	0xFD9
  3733                           status	equ	0xFD8
  3734                           
  3735 ;; *************** function ___lwdiv *****************
  3736 ;; Defined at:
  3737 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
  3738 ;; Parameters:    Size  Location     Type
  3739 ;;  dividend        2    6[COMRAM] unsigned int 
  3740 ;;  divisor         2    8[COMRAM] unsigned int 
  3741 ;; Auto vars:     Size  Location     Type
  3742 ;;  quotient        2   10[COMRAM] unsigned int 
  3743 ;;  counter         1   12[COMRAM] unsigned char 
  3744 ;; Return value:  Size  Location     Type
  3745 ;;                  2    6[COMRAM] unsigned int 
  3746 ;; Registers used:
  3747 ;;		wreg, status,2, status,0
  3748 ;; Tracked objects:
  3749 ;;		On entry : 0/0
  3750 ;;		On exit  : 0/0
  3751 ;;		Unchanged: 0/0
  3752 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3753 ;;      Params:         4       0       0       0       0       0       0       0       0
  3754 ;;      Locals:         3       0       0       0       0       0       0       0       0
  3755 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3756 ;;      Totals:         7       0       0       0       0       0       0       0       0
  3757 ;;Total ram usage:        7 bytes
  3758 ;; Hardware stack levels used:    1
  3759 ;; This function calls:
  3760 ;;		Nothing
  3761 ;; This function is called by:
  3762 ;;		_printf
  3763 ;;		_months_to_days
  3764 ;;		_years_to_days
  3765 ;; This function uses a non-reentrant model
  3766 ;;
  3767                           
  3768                           	psect	text18
  3769  00176A                     __ptext18:
  3770                           	opt stack 0
  3771  00176A                     ___lwdiv:
  3772                           	opt stack 28
  3773                           
  3774                           ;incstack = 0
  3775  00176A  0E00               	movlw	0
  3776  00176C  6E0C               	movwf	___lwdiv@quotient+1,c
  3777  00176E  0E00               	movlw	0
  3778  001770  6E0B               	movwf	___lwdiv@quotient,c
  3779  001772  5009               	movf	___lwdiv@divisor,w,c
  3780  001774  100A               	iorwf	___lwdiv@divisor+1,w,c
  3781  001776  B4D8               	btfsc	status,2,c
  3782  001778  D01C               	goto	l601
  3783  00177A  0E01               	movlw	1
  3784  00177C  6E0D               	movwf	___lwdiv@counter,c
  3785  00177E  D004               	goto	l596
  3786  001780  90D8               	bcf	status,0,c
  3787  001782  3609               	rlcf	___lwdiv@divisor,f,c
  3788  001784  360A               	rlcf	___lwdiv@divisor+1,f,c
  3789  001786  2A0D               	incf	___lwdiv@counter,f,c
  3790  001788                     l596:
  3791  001788  AE0A               	btfss	___lwdiv@divisor+1,7,c
  3792  00178A  D7FA               	goto	l597
  3793  00178C                     u1070:
  3794  00178C  90D8               	bcf	status,0,c
  3795  00178E  360B               	rlcf	___lwdiv@quotient,f,c
  3796  001790  360C               	rlcf	___lwdiv@quotient+1,f,c
  3797  001792  5009               	movf	___lwdiv@divisor,w,c
  3798  001794  5C07               	subwf	___lwdiv@dividend,w,c
  3799  001796  500A               	movf	___lwdiv@divisor+1,w,c
  3800  001798  5808               	subwfb	___lwdiv@dividend+1,w,c
  3801  00179A  A0D8               	btfss	status,0,c
  3802  00179C  D005               	goto	l600
  3803  00179E  5009               	movf	___lwdiv@divisor,w,c
  3804  0017A0  5E07               	subwf	___lwdiv@dividend,f,c
  3805  0017A2  500A               	movf	___lwdiv@divisor+1,w,c
  3806  0017A4  5A08               	subwfb	___lwdiv@dividend+1,f,c
  3807  0017A6  800B               	bsf	___lwdiv@quotient,0,c
  3808  0017A8                     l600:
  3809  0017A8  90D8               	bcf	status,0,c
  3810  0017AA  320A               	rrcf	___lwdiv@divisor+1,f,c
  3811  0017AC  3209               	rrcf	___lwdiv@divisor,f,c
  3812  0017AE  2E0D               	decfsz	___lwdiv@counter,f,c
  3813  0017B0  D7ED               	goto	u1070
  3814  0017B2                     l601:
  3815  0017B2  C00B  F007         	movff	___lwdiv@quotient,?___lwdiv
  3816  0017B6  C00C  F008         	movff	___lwdiv@quotient+1,?___lwdiv+1
  3817  0017BA  0012               	return		;funcret
  3818  0017BC                     __end_of___lwdiv:
  3819                           	opt stack 0
  3820                           tblptru	equ	0xFF8
  3821                           tblptrh	equ	0xFF7
  3822                           tblptrl	equ	0xFF6
  3823                           tablat	equ	0xFF5
  3824                           prodh	equ	0xFF4
  3825                           prodl	equ	0xFF3
  3826                           postinc0	equ	0xFEE
  3827                           wreg	equ	0xFE8
  3828                           postdec1	equ	0xFE5
  3829                           plusw1	equ	0xFE3
  3830                           fsr1l	equ	0xFE1
  3831                           postinc2	equ	0xFDE
  3832                           postdec2	equ	0xFDD
  3833                           plusw2	equ	0xFDB
  3834                           fsr2h	equ	0xFDA
  3835                           fsr2l	equ	0xFD9
  3836                           status	equ	0xFD8
  3837                           
  3838 ;; *************** function _isleap *****************
  3839 ;; Defined at:
  3840 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\mktime.c"
  3841 ;; Parameters:    Size  Location     Type
  3842 ;;  yr              2   18[COMRAM] unsigned int 
  3843 ;; Auto vars:     Size  Location     Type
  3844 ;;		None
  3845 ;; Return value:  Size  Location     Type
  3846 ;;                  2   18[COMRAM] int 
  3847 ;; Registers used:
  3848 ;;		wreg, status,2, status,0, cstack
  3849 ;; Tracked objects:
  3850 ;;		On entry : 0/0
  3851 ;;		On exit  : 0/0
  3852 ;;		Unchanged: 0/0
  3853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3854 ;;      Params:         2       0       0       0       0       0       0       0       0
  3855 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3856 ;;      Temps:          2       0       0       0       0       0       0       0       0
  3857 ;;      Totals:         5       0       0       0       0       0       0       0       0
  3858 ;;Total ram usage:        5 bytes
  3859 ;; Hardware stack levels used:    1
  3860 ;; Hardware stack levels required when called:    1
  3861 ;; This function calls:
  3862 ;;		___lwmod
  3863 ;; This function is called by:
  3864 ;;		_ymd_to_scalar
  3865 ;; This function uses a non-reentrant model
  3866 ;;
  3867                           
  3868                           	psect	text19
  3869  001660                     __ptext19:
  3870                           	opt stack 0
  3871  001660                     _isleap:
  3872                           	opt stack 27
  3873                           
  3874                           ;incstack = 0
  3875  001660  0E01               	movlw	1
  3876  001662  6E17               	movwf	_isleap$657,c
  3877  001664  C013  F00E         	movff	isleap@yr,___lwmod@dividend
  3878  001668  C014  F00F         	movff	isleap@yr+1,___lwmod@dividend+1
  3879  00166C  0E01               	movlw	1
  3880  00166E  6E11               	movwf	___lwmod@divisor+1,c
  3881  001670  0E90               	movlw	144
  3882  001672  6E10               	movwf	___lwmod@divisor,c
  3883  001674  ECFF  F00B         	call	___lwmod	;wreg free
  3884  001678  500E               	movf	?___lwmod,w,c
  3885  00167A  100F               	iorwf	?___lwmod+1,w,c
  3886  00167C  B4D8               	btfsc	status,2,c
  3887  00167E  D01A               	goto	l621
  3888  001680  0E03               	movlw	3
  3889  001682  1413               	andwf	isleap@yr,w,c
  3890  001684  6E15               	movwf	??_isleap& (0+255),c
  3891  001686  0E00               	movlw	0
  3892  001688  1414               	andwf	isleap@yr+1,w,c
  3893  00168A  6E16               	movwf	(??_isleap+1)& (0+255),c
  3894  00168C  5015               	movf	??_isleap,w,c
  3895  00168E  1016               	iorwf	??_isleap+1,w,c
  3896  001690  A4D8               	btfss	status,2,c
  3897  001692  D00E               	goto	u1150
  3898  001694  C013  F00E         	movff	isleap@yr,___lwmod@dividend
  3899  001698  C014  F00F         	movff	isleap@yr+1,___lwmod@dividend+1
  3900  00169C  0E00               	movlw	0
  3901  00169E  6E11               	movwf	___lwmod@divisor+1,c
  3902  0016A0  0E64               	movlw	100
  3903  0016A2  6E10               	movwf	___lwmod@divisor,c
  3904  0016A4  ECFF  F00B         	call	___lwmod	;wreg free
  3905  0016A8  500E               	movf	?___lwmod,w,c
  3906  0016AA  100F               	iorwf	?___lwmod+1,w,c
  3907  0016AC  A4D8               	btfss	status,2,c
  3908  0016AE  D002               	goto	l621
  3909  0016B0                     u1150:
  3910  0016B0  0E00               	movlw	0
  3911  0016B2  6E17               	movwf	_isleap$657,c
  3912  0016B4                     l621:
  3913  0016B4  C017  F013         	movff	_isleap$657,?_isleap
  3914  0016B8  6A14               	clrf	?_isleap+1,c
  3915  0016BA  0012               	return	
  3916  0016BC                     __end_of_isleap:
  3917                           	opt stack 0
  3918                           tblptru	equ	0xFF8
  3919                           tblptrh	equ	0xFF7
  3920                           tblptrl	equ	0xFF6
  3921                           tablat	equ	0xFF5
  3922                           prodh	equ	0xFF4
  3923                           prodl	equ	0xFF3
  3924                           postinc0	equ	0xFEE
  3925                           wreg	equ	0xFE8
  3926                           postdec1	equ	0xFE5
  3927                           plusw1	equ	0xFE3
  3928                           fsr1l	equ	0xFE1
  3929                           postinc2	equ	0xFDE
  3930                           postdec2	equ	0xFDD
  3931                           plusw2	equ	0xFDB
  3932                           fsr2h	equ	0xFDA
  3933                           fsr2l	equ	0xFD9
  3934                           status	equ	0xFD8
  3935                           
  3936 ;; *************** function ___lwmod *****************
  3937 ;; Defined at:
  3938 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
  3939 ;; Parameters:    Size  Location     Type
  3940 ;;  dividend        2   13[COMRAM] unsigned int 
  3941 ;;  divisor         2   15[COMRAM] unsigned int 
  3942 ;; Auto vars:     Size  Location     Type
  3943 ;;  counter         1   17[COMRAM] unsigned char 
  3944 ;; Return value:  Size  Location     Type
  3945 ;;                  2   13[COMRAM] unsigned int 
  3946 ;; Registers used:
  3947 ;;		wreg, status,2, status,0
  3948 ;; Tracked objects:
  3949 ;;		On entry : 0/0
  3950 ;;		On exit  : 0/0
  3951 ;;		Unchanged: 0/0
  3952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3953 ;;      Params:         4       0       0       0       0       0       0       0       0
  3954 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3955 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3956 ;;      Totals:         5       0       0       0       0       0       0       0       0
  3957 ;;Total ram usage:        5 bytes
  3958 ;; Hardware stack levels used:    1
  3959 ;; This function calls:
  3960 ;;		Nothing
  3961 ;; This function is called by:
  3962 ;;		_printf
  3963 ;;		_dylen
  3964 ;;		_isleap
  3965 ;; This function uses a non-reentrant model
  3966 ;;
  3967                           
  3968                           	psect	text20
  3969  0017FE                     __ptext20:
  3970                           	opt stack 0
  3971  0017FE                     ___lwmod:
  3972                           	opt stack 28
  3973                           
  3974                           ;incstack = 0
  3975  0017FE  5010               	movf	___lwmod@divisor,w,c
  3976  001800  1011               	iorwf	___lwmod@divisor+1,w,c
  3977  001802  B4D8               	btfsc	status,2,c
  3978  001804  D018               	goto	l611
  3979  001806  0E01               	movlw	1
  3980  001808  6E12               	movwf	___lwmod@counter,c
  3981  00180A  D004               	goto	l606
  3982  00180C  90D8               	bcf	status,0,c
  3983  00180E  3610               	rlcf	___lwmod@divisor,f,c
  3984  001810  3611               	rlcf	___lwmod@divisor+1,f,c
  3985  001812  2A12               	incf	___lwmod@counter,f,c
  3986  001814                     l606:
  3987  001814  AE11               	btfss	___lwmod@divisor+1,7,c
  3988  001816  D7FA               	goto	l607
  3989  001818                     u800:
  3990  001818  5010               	movf	___lwmod@divisor,w,c
  3991  00181A  5C0E               	subwf	___lwmod@dividend,w,c
  3992  00181C  5011               	movf	___lwmod@divisor+1,w,c
  3993  00181E  580F               	subwfb	___lwmod@dividend+1,w,c
  3994  001820  A0D8               	btfss	status,0,c
  3995  001822  D004               	goto	l610
  3996  001824  5010               	movf	___lwmod@divisor,w,c
  3997  001826  5E0E               	subwf	___lwmod@dividend,f,c
  3998  001828  5011               	movf	___lwmod@divisor+1,w,c
  3999  00182A  5A0F               	subwfb	___lwmod@dividend+1,f,c
  4000  00182C                     l610:
  4001  00182C  90D8               	bcf	status,0,c
  4002  00182E  3211               	rrcf	___lwmod@divisor+1,f,c
  4003  001830  3210               	rrcf	___lwmod@divisor,f,c
  4004  001832  2E12               	decfsz	___lwmod@counter,f,c
  4005  001834  D7F1               	goto	u800
  4006  001836                     l611:
  4007  001836  C00E  F00E         	movff	___lwmod@dividend,?___lwmod
  4008  00183A  C00F  F00F         	movff	___lwmod@dividend+1,?___lwmod+1
  4009  00183E  0012               	return		;funcret
  4010  001840                     __end_of___lwmod:
  4011                           	opt stack 0
  4012                           tblptru	equ	0xFF8
  4013                           tblptrh	equ	0xFF7
  4014                           tblptrl	equ	0xFF6
  4015                           tablat	equ	0xFF5
  4016                           prodh	equ	0xFF4
  4017                           prodl	equ	0xFF3
  4018                           postinc0	equ	0xFEE
  4019                           wreg	equ	0xFE8
  4020                           postdec1	equ	0xFE5
  4021                           plusw1	equ	0xFE3
  4022                           fsr1l	equ	0xFE1
  4023                           postinc2	equ	0xFDE
  4024                           postdec2	equ	0xFDD
  4025                           plusw2	equ	0xFDB
  4026                           fsr2h	equ	0xFDA
  4027                           fsr2l	equ	0xFD9
  4028                           status	equ	0xFD8
  4029                           
  4030 ;; *************** function _lcd_init *****************
  4031 ;; Defined at:
  4032 ;;		line 27 in file "lcd.c"
  4033 ;; Parameters:    Size  Location     Type
  4034 ;;		None
  4035 ;; Auto vars:     Size  Location     Type
  4036 ;;  i               1    6[COMRAM] unsigned char 
  4037 ;; Return value:  Size  Location     Type
  4038 ;;                  1    wreg      void 
  4039 ;; Registers used:
  4040 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4041 ;; Tracked objects:
  4042 ;;		On entry : 0/0
  4043 ;;		On exit  : 0/0
  4044 ;;		Unchanged: 0/0
  4045 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4046 ;;      Params:         0       0       0       0       0       0       0       0       0
  4047 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4048 ;;      Temps:          1       0       0       0       0       0       0       0       0
  4049 ;;      Totals:         2       0       0       0       0       0       0       0       0
  4050 ;;Total ram usage:        2 bytes
  4051 ;; Hardware stack levels used:    1
  4052 ;; Hardware stack levels required when called:    2
  4053 ;; This function calls:
  4054 ;;		_send_byte
  4055 ;;		_send_nibble
  4056 ;; This function is called by:
  4057 ;;		_main
  4058 ;; This function uses a non-reentrant model
  4059 ;;
  4060                           
  4061                           	psect	text21
  4062  00119C                     __ptext21:
  4063                           	opt stack 0
  4064  00119C                     _lcd_init:
  4065                           	opt stack 28
  4066                           
  4067                           ;lcd.c: 28: byte i;
  4068                           ;lcd.c: 29: TRISD = 0xF0;
  4069                           
  4070                           ;incstack = 0
  4071  00119C  0EF0               	movlw	240
  4072  00119E  6E95               	movwf	3989,c	;volatile
  4073                           
  4074                           ;lcd.c: 30: TRISCbits.RC0 = TRISCbits.RC1 = 0;
  4075  0011A0  9294               	bcf	3988,1,c	;volatile
  4076  0011A2  9094               	bcf	3988,0,c	;volatile
  4077                           
  4078                           ;lcd.c: 31: LATCbits.LC0 = LATCbits.LC1 = 0;
  4079  0011A4  928B               	bcf	3979,1,c	;volatile
  4080  0011A6  908B               	bcf	3979,0,c	;volatile
  4081                           
  4082                           ;lcd.c: 32: LATD = 0x0F & 0x00;
  4083  0011A8  0E00               	movlw	0
  4084  0011AA  6E8C               	movwf	3980,c	;volatile
  4085                           
  4086                           ;lcd.c: 33: _delay((unsigned long)((15)*(20000000/4000.0)));
  4087  0011AC  0E62               	movlw	98
  4088  0011AE  6E06               	movwf	??_lcd_init& (0+255),c
  4089  0011B0  0E66               	movlw	102
  4090  0011B2                     u1537:
  4091  0011B2  2EE8               	decfsz	wreg,f,c
  4092  0011B4  D7FE               	bra	u1537
  4093  0011B6  2E06               	decfsz	??_lcd_init& (0+255),f,c
  4094  0011B8  D7FC               	bra	u1537
  4095                           
  4096                           ;lcd.c: 34: for (i = 0; i < 3;_delay((unsigned long)((5)*(20000000/4000.0))), ++i)
  4097  0011BA  0E00               	movlw	0
  4098  0011BC  6E07               	movwf	lcd_init@i,c
  4099  0011BE                     l1920:
  4100  0011BE  0E02               	movlw	2
  4101  0011C0  6407               	cpfsgt	lcd_init@i,c
  4102  0011C2  D001               	goto	l62
  4103  0011C4  D00F               	goto	u1430
  4104  0011C6                     l62:
  4105                           
  4106                           ;lcd.c: 35: send_nibble(0,3);
  4107  0011C6  0E03               	movlw	3
  4108  0011C8  6E01               	movwf	send_nibble@data,c
  4109  0011CA  0E00               	movlw	0
  4110  0011CC  EC52  F00C         	call	_send_nibble
  4111  0011D0  0E21               	movlw	33
  4112  0011D2  6E06               	movwf	??_lcd_init& (0+255),c
  4113  0011D4  0E76               	movlw	118
  4114  0011D6                     u1547:
  4115  0011D6  2EE8               	decfsz	wreg,f,c
  4116  0011D8  D7FE               	bra	u1547
  4117  0011DA  2E06               	decfsz	??_lcd_init& (0+255),f,c
  4118  0011DC  D7FC               	bra	u1547
  4119  0011DE  D000               	nop2	
  4120  0011E0  2A07               	incf	lcd_init@i,f,c
  4121  0011E2  D7ED               	goto	l1920
  4122  0011E4                     u1430:
  4123                           
  4124                           ;lcd.c: 36: send_nibble(0,2);
  4125  0011E4  0E02               	movlw	2
  4126  0011E6  6E01               	movwf	send_nibble@data,c
  4127  0011E8  0E00               	movlw	0
  4128  0011EA  EC52  F00C         	call	_send_nibble
  4129                           
  4130                           ;lcd.c: 37: _delay((unsigned long)((5)*(20000000/4000.0)));
  4131  0011EE  0E21               	movlw	33
  4132  0011F0  6E06               	movwf	??_lcd_init& (0+255),c
  4133  0011F2  0E76               	movlw	118
  4134  0011F4                     u1557:
  4135  0011F4  2EE8               	decfsz	wreg,f,c
  4136  0011F6  D7FE               	bra	u1557
  4137  0011F8  2E06               	decfsz	??_lcd_init& (0+255),f,c
  4138  0011FA  D7FC               	bra	u1557
  4139  0011FC  D000               	nop2	
  4140                           
  4141                           ;lcd.c: 38: for (i = 0; i < 4; _delay((unsigned long)((5)*(20000000/4000.0))),++i)
  4142  0011FE  0E00               	movlw	0
  4143  001200  6E07               	movwf	lcd_init@i,c
  4144  001202                     l1938:
  4145  001202  0E03               	movlw	3
  4146  001204  6407               	cpfsgt	lcd_init@i,c
  4147  001206  D001               	goto	l64
  4148  001208  D018               	goto	u1450
  4149  00120A                     l64:
  4150                           
  4151                           ;lcd.c: 39: send_byte(0,init_str[i]);
  4152  00120A  5007               	movf	lcd_init@i,w,c
  4153  00120C  0D01               	mullw	1
  4154  00120E  0E17               	movlw	low _init_str
  4155  001210  24F3               	addwf	prodl,w,c
  4156  001212  6EF6               	movwf	tblptrl,c
  4157  001214  0E08               	movlw	high _init_str
  4158  001216  20F4               	addwfc	prodh,w,c
  4159  001218  6EF7               	movwf	tblptrh,c
  4160  00121A                     	if	0	;There are less than 3 active tblptr bytes
  4161  00121A                     	endif
  4162  00121A  0008               	tblrd		*
  4163  00121C  CFF5 F004          	movff	tablat,send_byte@data
  4164  001220  0E00               	movlw	0
  4165  001222  EC8B  F00C         	call	_send_byte
  4166  001226  0E21               	movlw	33
  4167  001228  6E06               	movwf	??_lcd_init& (0+255),c
  4168  00122A  0E76               	movlw	118
  4169  00122C                     u1567:
  4170  00122C  2EE8               	decfsz	wreg,f,c
  4171  00122E  D7FE               	bra	u1567
  4172  001230  2E06               	decfsz	??_lcd_init& (0+255),f,c
  4173  001232  D7FC               	bra	u1567
  4174  001234  D000               	nop2	
  4175  001236  2A07               	incf	lcd_init@i,f,c
  4176  001238  D7E4               	goto	l1938
  4177  00123A                     u1450:
  4178                           
  4179                           ;lcd.c: 40: _delay((unsigned long)((1)*(20000000/4000.0)));
  4180  00123A  0E07               	movlw	7
  4181  00123C  6E06               	movwf	??_lcd_init& (0+255),c
  4182  00123E  0E7D               	movlw	125
  4183  001240                     u1577:
  4184  001240  2EE8               	decfsz	wreg,f,c
  4185  001242  D7FE               	bra	u1577
  4186  001244  2E06               	decfsz	??_lcd_init& (0+255),f,c
  4187  001246  D7FC               	bra	u1577
  4188  001248  F000               	nop	
  4189  00124A  0012               	return		;funcret
  4190  00124C                     __end_of_lcd_init:
  4191                           	opt stack 0
  4192                           tblptru	equ	0xFF8
  4193                           tblptrh	equ	0xFF7
  4194                           tblptrl	equ	0xFF6
  4195                           tablat	equ	0xFF5
  4196                           prodh	equ	0xFF4
  4197                           prodl	equ	0xFF3
  4198                           postinc0	equ	0xFEE
  4199                           wreg	equ	0xFE8
  4200                           postdec1	equ	0xFE5
  4201                           plusw1	equ	0xFE3
  4202                           fsr1l	equ	0xFE1
  4203                           postinc2	equ	0xFDE
  4204                           postdec2	equ	0xFDD
  4205                           plusw2	equ	0xFDB
  4206                           fsr2h	equ	0xFDA
  4207                           fsr2l	equ	0xFD9
  4208                           status	equ	0xFD8
  4209                           
  4210 ;; *************** function _send_byte *****************
  4211 ;; Defined at:
  4212 ;;		line 11 in file "lcd.c"
  4213 ;; Parameters:    Size  Location     Type
  4214 ;;  comand          1    wreg     unsigned char 
  4215 ;;  data            1    3[COMRAM] unsigned char 
  4216 ;; Auto vars:     Size  Location     Type
  4217 ;;  comand          1    4[COMRAM] unsigned char 
  4218 ;; Return value:  Size  Location     Type
  4219 ;;                  1    wreg      void 
  4220 ;; Registers used:
  4221 ;;		wreg, status,2, status,0, cstack
  4222 ;; Tracked objects:
  4223 ;;		On entry : 0/0
  4224 ;;		On exit  : 0/0
  4225 ;;		Unchanged: 0/0
  4226 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4227 ;;      Params:         1       0       0       0       0       0       0       0       0
  4228 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4229 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4230 ;;      Totals:         2       0       0       0       0       0       0       0       0
  4231 ;;Total ram usage:        2 bytes
  4232 ;; Hardware stack levels used:    1
  4233 ;; Hardware stack levels required when called:    1
  4234 ;; This function calls:
  4235 ;;		_send_nibble
  4236 ;; This function is called by:
  4237 ;;		_lcd_gotoxy
  4238 ;;		_lcd_init
  4239 ;;		_putch
  4240 ;;		_set_sgram_byte
  4241 ;; This function uses a non-reentrant model
  4242 ;;
  4243                           
  4244                           	psect	text22
  4245  001916                     __ptext22:
  4246                           	opt stack 0
  4247  001916                     _send_byte:
  4248                           	opt stack 26
  4249                           
  4250                           ;incstack = 0
  4251                           ;send_byte@comand stored from wreg
  4252  001916  6E05               	movwf	send_byte@comand,c
  4253                           
  4254                           ;lcd.c: 12: send_nibble(comand,data>>4);
  4255  001918  3804               	swapf	send_byte@data,w,c
  4256  00191A  0B0F               	andlw	15
  4257  00191C  6E01               	movwf	send_nibble@data,c
  4258  00191E  5005               	movf	send_byte@comand,w,c
  4259  001920  EC52  F00C         	call	_send_nibble
  4260                           
  4261                           ;lcd.c: 13: send_nibble(comand,data);
  4262  001924  C004  F001         	movff	send_byte@data,send_nibble@data
  4263  001928  5005               	movf	send_byte@comand,w,c
  4264  00192A  EC52  F00C         	call	_send_nibble
  4265  00192E  0012               	return		;funcret
  4266  001930                     __end_of_send_byte:
  4267                           	opt stack 0
  4268                           tblptru	equ	0xFF8
  4269                           tblptrh	equ	0xFF7
  4270                           tblptrl	equ	0xFF6
  4271                           tablat	equ	0xFF5
  4272                           prodh	equ	0xFF4
  4273                           prodl	equ	0xFF3
  4274                           postinc0	equ	0xFEE
  4275                           wreg	equ	0xFE8
  4276                           postdec1	equ	0xFE5
  4277                           plusw1	equ	0xFE3
  4278                           fsr1l	equ	0xFE1
  4279                           postinc2	equ	0xFDE
  4280                           postdec2	equ	0xFDD
  4281                           plusw2	equ	0xFDB
  4282                           fsr2h	equ	0xFDA
  4283                           fsr2l	equ	0xFD9
  4284                           status	equ	0xFD8
  4285                           
  4286 ;; *************** function _send_nibble *****************
  4287 ;; Defined at:
  4288 ;;		line 4 in file "lcd.c"
  4289 ;; Parameters:    Size  Location     Type
  4290 ;;  comand          1    wreg     unsigned char 
  4291 ;;  data            1    0[COMRAM] unsigned char 
  4292 ;; Auto vars:     Size  Location     Type
  4293 ;;  comand          1    1[COMRAM] unsigned char 
  4294 ;;  i               1    2[COMRAM] unsigned char 
  4295 ;; Return value:  Size  Location     Type
  4296 ;;                  1    wreg      void 
  4297 ;; Registers used:
  4298 ;;		wreg, status,2, status,0
  4299 ;; Tracked objects:
  4300 ;;		On entry : 0/0
  4301 ;;		On exit  : 0/0
  4302 ;;		Unchanged: 0/0
  4303 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4304 ;;      Params:         1       0       0       0       0       0       0       0       0
  4305 ;;      Locals:         2       0       0       0       0       0       0       0       0
  4306 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4307 ;;      Totals:         3       0       0       0       0       0       0       0       0
  4308 ;;Total ram usage:        3 bytes
  4309 ;; Hardware stack levels used:    1
  4310 ;; This function calls:
  4311 ;;		Nothing
  4312 ;; This function is called by:
  4313 ;;		_send_byte
  4314 ;;		_lcd_init
  4315 ;; This function uses a non-reentrant model
  4316 ;;
  4317                           
  4318                           	psect	text23
  4319  0018A4                     __ptext23:
  4320                           	opt stack 0
  4321  0018A4                     _send_nibble:
  4322                           	opt stack 26
  4323                           
  4324                           ;incstack = 0
  4325                           ;send_nibble@comand stored from wreg
  4326  0018A4  6E02               	movwf	send_nibble@comand,c
  4327                           
  4328                           ;lcd.c: 5: LATCbits.LC1 = comand; __nop();
  4329  0018A6  B002               	btfsc	send_nibble@comand,0,c
  4330  0018A8  D002               	bra	u765
  4331  0018AA  928B               	bcf	3979,1,c	;volatile
  4332  0018AC  D001               	bra	u766
  4333  0018AE                     u765:
  4334  0018AE  828B               	bsf	3979,1,c	;volatile
  4335  0018B0                     u766:
  4336  0018B0  F000               	nop	
  4337                           
  4338                           ;lcd.c: 6: LATCbits.LC0 = 1; __nop();
  4339  0018B2  808B               	bsf	3979,0,c	;volatile
  4340  0018B4  F000               	nop	
  4341                           
  4342                           ;lcd.c: 7: LATD = 0x0F & data; __nop();
  4343  0018B6  5001               	movf	send_nibble@data,w,c
  4344  0018B8  0B0F               	andlw	15
  4345  0018BA  6E8C               	movwf	3980,c	;volatile
  4346  0018BC  F000               	nop	
  4347                           
  4348                           ;lcd.c: 8: LATCbits.LC0 = 0;
  4349  0018BE  908B               	bcf	3979,0,c	;volatile
  4350                           
  4351                           ;lcd.c: 9: for(byte i=0;i<20;i++) __nop();
  4352  0018C0  0E00               	movlw	0
  4353  0018C2  6E03               	movwf	send_nibble@i,c
  4354  0018C4                     l1456:
  4355  0018C4  0E13               	movlw	19
  4356  0018C6  6403               	cpfsgt	send_nibble@i,c
  4357  0018C8  D001               	goto	l42
  4358  0018CA  0012               	return	
  4359  0018CC                     l42:
  4360  0018CC  F000               	nop	
  4361  0018CE  2A03               	incf	send_nibble@i,f,c
  4362  0018D0  D7F9               	goto	l1456
  4363  0018D2                     __end_of_send_nibble:
  4364                           	opt stack 0
  4365                           tblptru	equ	0xFF8
  4366                           tblptrh	equ	0xFF7
  4367                           tblptrl	equ	0xFF6
  4368                           tablat	equ	0xFF5
  4369                           prodh	equ	0xFF4
  4370                           prodl	equ	0xFF3
  4371                           postinc0	equ	0xFEE
  4372                           wreg	equ	0xFE8
  4373                           postdec1	equ	0xFE5
  4374                           plusw1	equ	0xFE3
  4375                           fsr1l	equ	0xFE1
  4376                           postinc2	equ	0xFDE
  4377                           postdec2	equ	0xFDD
  4378                           plusw2	equ	0xFDB
  4379                           fsr2h	equ	0xFDA
  4380                           fsr2l	equ	0xFD9
  4381                           status	equ	0xFD8
  4382                           tblptru	equ	0xFF8
  4383                           tblptrh	equ	0xFF7
  4384                           tblptrl	equ	0xFF6
  4385                           tablat	equ	0xFF5
  4386                           prodh	equ	0xFF4
  4387                           prodl	equ	0xFF3
  4388                           postinc0	equ	0xFEE
  4389                           wreg	equ	0xFE8
  4390                           postdec1	equ	0xFE5
  4391                           plusw1	equ	0xFE3
  4392                           fsr1l	equ	0xFE1
  4393                           postinc2	equ	0xFDE
  4394                           postdec2	equ	0xFDD
  4395                           plusw2	equ	0xFDB
  4396                           fsr2h	equ	0xFDA
  4397                           fsr2l	equ	0xFD9
  4398                           status	equ	0xFD8
  4399                           
  4400                           	psect	rparam
  4401  0000                     tblptru	equ	0xFF8
  4402                           tblptrh	equ	0xFF7
  4403                           tblptrl	equ	0xFF6
  4404                           tablat	equ	0xFF5
  4405                           prodh	equ	0xFF4
  4406                           prodl	equ	0xFF3
  4407                           postinc0	equ	0xFEE
  4408                           wreg	equ	0xFE8
  4409                           postdec1	equ	0xFE5
  4410                           plusw1	equ	0xFE3
  4411                           fsr1l	equ	0xFE1
  4412                           postinc2	equ	0xFDE
  4413                           postdec2	equ	0xFDD
  4414                           plusw2	equ	0xFDB
  4415                           fsr2h	equ	0xFDA
  4416                           fsr2l	equ	0xFD9
  4417                           status	equ	0xFD8


Data Sizes:
    Strings     170
    Constant    26
    Data        94
    BSS         55
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     79      89
    BANK0           160      0     139
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    show_time_by_clock$1031	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_31(CODE[4]), STR_30(CODE[4]), STR_29(CODE[4]), STR_28(CODE[4]), 
		 -> STR_27(CODE[4]), STR_26(CODE[4]), STR_25(CODE[4]), STR_24(CODE[4]), 
		 -> STR_23(CODE[4]), STR_22(CODE[4]), STR_21(CODE[4]), STR_20(CODE[4]), 

    show_time_by_clock$1030	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_38(CODE[3]), STR_37(CODE[3]), STR_36(CODE[3]), STR_35(CODE[3]), 
		 -> STR_34(CODE[3]), STR_33(CODE[3]), STR_32(CODE[3]), 

    mktime@timeptr	PTR struct tm size(2) Largest target is 18
		 -> main@tp(COMRAM[18]), 

    sp__ctime	PTR unsigned char  size(2) Largest target is 27
		 -> asctime@buf(BANK0[27]), 

    sp__asctime	PTR unsigned char  size(2) Largest target is 27
		 -> asctime@buf(BANK0[27]), 

    gmtime@tp	PTR const long  size(2) Largest target is 4
		 -> localtime@t(COMRAM[4]), 

    sp__gmtime	PTR struct tm size(2) Largest target is 18
		 -> gmtime@tim(BANK0[18]), 

    localtime@tp	PTR const long  size(2) Largest target is 4
		 -> clock(COMRAM[4]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_40(CODE[7]), STR_38(CODE[3]), STR_37(CODE[3]), STR_36(CODE[3]), 
		 -> STR_35(CODE[3]), STR_34(CODE[3]), STR_33(CODE[3]), STR_32(CODE[3]), 
		 -> STR_31(CODE[4]), STR_30(CODE[4]), STR_29(CODE[4]), STR_28(CODE[4]), 
		 -> STR_27(CODE[4]), STR_26(CODE[4]), STR_25(CODE[4]), STR_24(CODE[4]), 
		 -> STR_23(CODE[4]), STR_22(CODE[4]), STR_21(CODE[4]), STR_20(CODE[4]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 35
		 -> STR_39(CODE[35]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    sp__localtime	PTR struct tm size(2) Largest target is 18
		 -> gmtime@tim(BANK0[18]), 

    show_time_by_clock@timer	PTR struct tm size(2) Largest target is 18
		 -> gmtime@tim(BANK0[18]), main@tp(COMRAM[18]), 

    time_lcd@dTs	PTR const unsigned char [7] size(2) Largest target is 3
		 -> STR_38(CODE[3]), STR_37(CODE[3]), STR_36(CODE[3]), STR_35(CODE[3]), 
		 -> STR_34(CODE[3]), STR_33(CODE[3]), STR_32(CODE[3]), 

    time_lcd@mTs	PTR const unsigned char [12] size(2) Largest target is 4
		 -> STR_31(CODE[4]), STR_30(CODE[4]), STR_29(CODE[4]), STR_28(CODE[4]), 
		 -> STR_27(CODE[4]), STR_26(CODE[4]), STR_25(CODE[4]), STR_24(CODE[4]), 
		 -> STR_23(CODE[4]), STR_22(CODE[4]), STR_21(CODE[4]), STR_20(CODE[4]), 

    dTs	PTR const unsigned char [7] size(2) Largest target is 3
		 -> STR_19(CODE[3]), STR_18(CODE[3]), STR_17(CODE[3]), STR_16(CODE[3]), 
		 -> STR_15(CODE[3]), STR_14(CODE[3]), STR_13(CODE[3]), 

    mTs	PTR const unsigned char [12] size(2) Largest target is 4
		 -> STR_12(CODE[4]), STR_11(CODE[4]), STR_10(CODE[4]), STR_9(CODE[4]), 
		 -> STR_8(CODE[4]), STR_7(CODE[4]), STR_6(CODE[4]), STR_5(CODE[4]), 
		 -> STR_4(CODE[4]), STR_3(CODE[4]), STR_2(CODE[4]), STR_1(CODE[4]), 


Critical Paths under _main in COMRAM

    _main->_show_time_by_clock
    _show_time_by_clock->_printf
    _printf->___lwmod
    _putch->_lcd_gotoxy
    _lcd_gotoxy->_send_byte
    _localtime->_gmtime
    _gmtime->_dylen
    _dylen->___lwmod
    _mktime->_ymd_to_scalar
    _ymd_to_scalar->_isleap
    _ymd_to_scalar->_years_to_days
    _years_to_days->___lwdiv
    _months_to_days->___lwdiv
    ___lwdiv->___wmul
    _isleap->___lwmod
    ___lwmod->___lwdiv
    _lcd_init->_send_byte
    _send_byte->_send_nibble

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                20    20      0   18782
                                             59 COMRAM    20    20      0
                           _lcd_init
                             _mktime
                 _show_time_by_clock
 ---------------------------------------------------------------------------------
 (1) _show_time_by_clock                                   8     6      2   10743
                                             51 COMRAM     8     6      2
                          _localtime
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              37    21     16    5676
                                             18 COMRAM    33    17     16
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                2     2      0    2164
                                             10 COMRAM     2     2      0
                         _lcd_gotoxy
                          _send_byte
 ---------------------------------------------------------------------------------
 (4) _lcd_gotoxy                                           5     4      1    1182
                                              5 COMRAM     5     4      1
                          _send_byte
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _localtime                                           10     8      2    4836
                                             31 COMRAM    10     8      2
                             ___lmul
                             _gmtime
 ---------------------------------------------------------------------------------
 (3) _gmtime                                               9     7      2    3673
                                             22 COMRAM     9     7      2
                            ___aldiv
                            ___almod
                            ___awmod
                              _dylen
 ---------------------------------------------------------------------------------
 (4) _dylen                                                4     2      2    1213
                                             18 COMRAM     4     2      2
                            ___lwmod
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4     648
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___almod                                             10     2      8     752
                                              0 COMRAM    10     2      8
 ---------------------------------------------------------------------------------
 (4) ___aldiv                                             14     6      8     756
                                              0 COMRAM    14     6      8
 ---------------------------------------------------------------------------------
 (1) _mktime                                              14    10      4    6533
                                             39 COMRAM    14    10      4
                             ___lmul
                      _ymd_to_scalar
 ---------------------------------------------------------------------------------
 (2) _ymd_to_scalar                                       16    10      6    5209
                                             23 COMRAM    16    10      6
                             _isleap
                     _months_to_days
                      _years_to_days
 ---------------------------------------------------------------------------------
 (3) _years_to_days                                       10     6      4    1937
                                             13 COMRAM    10     6      4
                             ___lmul
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              12     4      8     978
                                              0 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (3) _months_to_days                                       2     0      2    1571
                                             13 COMRAM     2     0      2
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     703
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     770
                                              6 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _isleap                                               5     3      2    1085
                                             18 COMRAM     5     3      2
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     919
                                             13 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             2     2      0    1446
                                              5 COMRAM     2     2      0
                          _send_byte
                        _send_nibble
 ---------------------------------------------------------------------------------
 (4) _send_byte                                            2     1      1     938
                                              3 COMRAM     2     1      1
                        _send_nibble
 ---------------------------------------------------------------------------------
 (5) _send_nibble                                          3     2      1     394
                                              0 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _lcd_init
     _send_byte
       _send_nibble
     _send_nibble
   _mktime
     ___lmul
     _ymd_to_scalar
       _isleap
         ___lwmod
           ___lwdiv (ARG)
             ___wmul (ARG)
       _months_to_days
         ___lwdiv
           ___wmul (ARG)
         ___wmul
       _years_to_days
         ___lmul
         ___lwdiv
           ___wmul (ARG)
   _show_time_by_clock
     _localtime
       ___lmul
       _gmtime
         ___aldiv
         ___almod
         ___awmod
         _dylen
           ___lwmod
             ___lwdiv (ARG)
               ___wmul (ARG)
     _printf
       ___lwdiv
         ___wmul (ARG)
       ___lwmod
         ___lwdiv (ARG)
           ___wmul (ARG)
       ___wmul
       _isdigit
       _putch
         _lcd_gotoxy
           _send_byte
             _send_nibble
         _send_byte
           _send_nibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0      8B       5       86.9%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     4F      59       1       93.7%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      E4      20        0.0%
DATA                 0      0      E4       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Thu Jun 14 01:28:37 2018

              _years_to_days 124C                           l23 156C                           l42 18CC  
                         l62 11C6                           l70 16C0                           l64 120A  
                         l56 1886                           l72 16CC                           l73 16E6  
                         l74 16F2                           l69 16FE          months_to_days@month 000E  
        ___wmul@multiplicand 0003                  __CFG_BORV$3 000000                 __CFG_CP0$OFF 000000  
               __CFG_CP1$OFF 000000                 __CFG_CP2$OFF 000000                 __CFG_CP3$OFF 000000  
                        l120 0A60                          l104 08D0                          l121 0980  
                        l113 0922                          l105 08E0                          l122 09A8  
                        l115 0A32                          l131 0A20                          l123 09B6  
                        l107 08F4                          l220 1174                          l212 10EC  
                        l140 0AF6                          l132 0A0C                          l124 09B2  
                        l108 08EE                          l221 118A                          l213 1104  
                        l141 0AFE                          l142 0B2A                          l126 09EA  
                        l215 1132                          l151 0B58                          l143 0B14  
                        l135 0A88                          l216 1126                          l232 1370  
                        l152 0BA6                          l128 09FA                          l233 137E  
                        l225 1316                          l153 0B5E                          l129 09F4  
                        l234 1394                          l226 132A                          l219 1166  
                        l139 0AD2                          l228 1348                          l340 1500  
                        l229 133C                          l341 14F8                          l600 17A8  
                        l168 1724                          l344 1518                          l601 17B2  
                        l169 1738                          l345 1522                          l337 14DE  
                        l610 182C                          l346 1530                          l338 14EA  
                        l611 1836                          l364 15F8                          l621 16B4  
                        l517 190E                          l606 1814                          l607 180C  
                        l631 1418                          l375 0F52                          l376 0F38  
                        l633 13EE                          l642 0DC8                          l378 0FAA  
                        l379 0F9A                          l639 0C12                          l596 1788  
                        l597 1780                 __CFG_CPB$OFF 000000                 __CFG_CPD$OFF 000000  
                        u800 1818                          u940 134C                          u765 18AE  
                        u766 18B0                          u880 1136                 __CFG_BOR$OFF 000000  
                        _dTs 00B0                          _mTs 0078                 ___awmod@sign 0006  
                        wreg 000FE8                 __CFG_FOSC$HS 000000                  lcd_gotoxy@x 0007  
                lcd_gotoxy@y 0006                 __CFG_LVP$OFF 000000                 __CFG_WDT$OFF 000000  
                       l1456 18C4                         l1812 0A0C                         l1920 11BE  
                       l1808 09F4                         l1834 0A8C                         l1938 1202  
                       STR_1 0888                         STR_2 0880                         STR_3 089C  
                       STR_4 08A0                         STR_5 08AC                         STR_6 0890  
                       STR_7 088C                         STR_8 0894                         STR_9 0898  
                       u1000 1504                         u1050 15EE                         u1150 16B0  
                       u1070 178C                         u1400 13D2                         u1430 11E4  
                       u1350 0B32                         u1270 0AB8                         u1360 0B46  
                       _LATD 000F8C                         u1450 123A                         u1460 0BE8  
                       u1380 0BAE                         u1517 158E                         u1470 0C08  
                       u1527 16DC                         u1537 11B2                         u1481 1548  
                       u1547 11D6                         u1557 11F4                         u1567 122C  
                       u1577 1240                         _main 153A                         fsr2h 000FDA  
                       fsr1l 000FE1                         fsr2l 000FD9                         prodh 000FF4  
                       prodl 000FF3                         start 0000                __CFG_IESO$OFF 000000  
              __CFG_MCLRE$ON 000000                 ___param_bank 000000               ?_years_to_days 000E  
    show_time_by_clock@timer 0034  __size_of_show_time_by_clock 00EA                __CFG_PLLDIV$1 000000  
             __CFG_CCP2MX$ON 000000              __end_of___aldiv 119C              __end_of___almod 13A6  
                      ?_main 0001       __size_of_ymd_to_scalar 00A6                        STR_10 08A4  
                      STR_11 08A8                        STR_12 0884                        STR_20 0888  
                      STR_13 08BC                        STR_21 0880                        STR_14 08C2  
                      STR_30 08A8                        STR_22 089C                        STR_15 08B0  
                      STR_31 0884                        STR_23 08A0                        STR_40 0879  
                      STR_16 08B6                        STR_32 08BC                        STR_24 08AC  
                      STR_41 0863                        STR_17 08BF                        STR_33 08C2  
                      STR_25 0890                        STR_42 081B                        STR_18 08B9  
                      STR_34 08B0                        STR_26 088C                        STR_19 08B3  
                      STR_35 08B6                        STR_27 0894                        STR_36 08BF  
                      STR_28 0898              __end_of___awmod 153A                        STR_37 08B9  
                      STR_29 08A4                        STR_38 08B3                        STR_39 0840  
            __end_of___lwdiv 17BC              __end_of___lwmod 1840                __CFG_USBDIV$1 000000  
                      _TRISD 000F95                __CFG_PWRT$OFF 000000                __CFG_WRT0$OFF 000000  
            send_byte@comand 0005                __CFG_WRT1$OFF 000000                __CFG_WRT2$OFF 000000  
        ___lmul@multiplicand 0005                __CFG_WRT3$OFF 000000               __CFG_EBTR0$OFF 000000  
             __CFG_FCMEN$OFF 000000               __CFG_EBTR1$OFF 000000               __CFG_EBTR2$OFF 000000  
             __CFG_EBTR3$OFF 000000                __CFG_WRTB$OFF 000000                __CFG_WRTC$OFF 000000  
              __CFG_WRTD$OFF 000000               __CFG_EBTRB$OFF 000000                        _clock 0056  
            __end_of_dpowers 0817                        _dylen 159E              __end_of_isdigit 1916  
                      _putch 16BC              __end_of_moninit 080D                        tablat 000FF5  
           ymd_to_scalar@day 001C              send_nibble@data 0001                        plusw1 000FE3  
                      plusw2 000FDB                        status 000FD8               __CFG_ICPRT$OFF 000000  
            years_to_days@yr 000E              __initialization 17BC                 __end_of_main 159E  
              lcd_gotoxy@dir 000A                       ??_main 003C                __activetblptr 000002  
                     ?_dylen 0013                 ?_send_nibble 0001                       ?_putch 0001  
              _ymd_to_scalar 13A6              ??_years_to_days 0012               __CFG_XINST$OFF 000000  
           __end_of_lcd_init 124C                       ___lmul 1714                    ??___aldiv 0009  
                  ??___almod 0009                       ___wmul 18D2               __CFG_STVREN$ON 000000  
                  ??___awmod 0005                    ??___lwdiv 000B                    ??___lwmod 0012  
                     _gmtime 0DDA                       _isleap 1660                       clear_0 17E2  
                     clear_1 17EE             __end_of_init_str 081B                       _mktime 0BC8  
            ___awmod@divisor 0003              ___awmod@counter 0005                       _printf 08C6  
                     main@tp 003E                    ??_isdigit 0001                 __mediumconst 0000  
                     tblptrh 000FF7                       tblptrl 000FF6                       tblptru 000FF8  
                     putch@c 000C                  localtime@tp 0020             years_to_days@ret 0014  
             ?_ymd_to_scalar 0018                   __accesstop 0060      __end_of__initialization 17F4  
            __CFG_PBADEN$OFF 000000                ___rparam_used 000001               __pcstackCOMRAM 0001  
               __pidataBANK0 1602                __end_of_dylen 1602                __end_of_putch 1714  
    __size_of_months_to_days 0036                      ??_dylen 0015                      ??_putch 000B  
                 __pbssBANK0 00BE           __size_of_localtime 007E                      ?___lmul 0001  
                    ?___wmul 0001           __size_of_send_byte 001A                      ?_gmtime 0017  
                    ?_isleap 0013               ___lmul@product 0009                      ?_mktime 0028  
                    ?_printf 0013                   _lcd_gotoxy 1876              ??_ymd_to_scalar 001E  
                  ?_lcd_init 0001              __CFG_VREGEN$OFF 000000         __size_of_send_nibble 002E  
                    __Hparam 0000                      __Lparam 0000   __end_of_show_time_by_clock 10D0  
                    ___aldiv 10D0                      ___almod 12FA              __size_of___lmul 0056  
                    ___awmod 14CA              __size_of___wmul 0026                      ___lwdiv 176A  
                    ___lwmod 17FE                 __psmallconst 0800                   _isleap$657 0017  
                    __pcinit 17BC              __size_of_gmtime 020C              __size_of_isleap 005C  
                    __ramtop 0800              __size_of_mktime 0212                      __ptext0 153A  
                    __ptext1 0FE6                      __ptext2 08C6                      __ptext3 16BC  
                    __ptext4 1876                      __ptext5 18F8                      __ptext6 144C  
                    __ptext7 0DDA                      __ptext8 159E                      __ptext9 14CA  
            __size_of_printf 0302                      _dpowers 080D                      _isdigit 18F8  
           ___awmod@dividend 0001             ___aldiv@dividend 0001            __end_of_localtime 14CA  
              mktime@timeptr 0028                      _moninit 0801                   ??_lcd_init 0006  
       end_of_initialization 17F4            __end_of_send_byte 1930                      dylen@yr 0013  
              __Lmediumconst 0000            send_nibble@comand 0002                      printf@c 0031  
                    printf@f 0013                  time_lcd@dTs 00A2             ___aldiv@quotient 000B  
                time_lcd@mTs 0060                      postdec1 000FE5                      postdec2 000FDD  
                    postinc0 000FEE                      postinc2 000FDE               _months_to_days 1840  
                 asctime@buf 00BE                    _TRISCbits 000F94                  ?_lcd_gotoxy 0006  
                printf@width 0032                send_byte@data 0004        __end_of_years_to_days 12FA  
             __end_of___lmul 176A               __end_of___wmul 18F8               __end_of_gmtime 0FE6  
             __end_of_isleap 16BC       __end_of_months_to_days 1876               __end_of_mktime 0DDA  
            ymd_to_scalar@mo 001A               __end_of_printf 0BC8              ymd_to_scalar@yr 0018  
        start_initialization 17BC                     ??___lmul 0009          __size_of_lcd_gotoxy 002E  
                   ??___wmul 0005                  __pdataBANK0 0060             __CFG_LPT1OSC$OFF 000000  
                   ??_gmtime 0019                     ??_isleap 0015                     ??_mktime 002C  
                   ??_printf 0023              ?_months_to_days 000E                   localtime@t 0026  
                __pbssCOMRAM 0050            __size_of_lcd_init 00B0             ___lwdiv@dividend 0007  
                   ?___aldiv 0001                     ?___almod 0001                     ?___awmod 0001  
                   ?___lwdiv 0007                     ?___lwmod 000E             ___almod@dividend 0001  
                __smallconst 0800                     ?_isdigit 0001           _show_time_by_clock 0FE6  
              ??_send_nibble 0002             ___lwdiv@quotient 000B               __size_of_dylen 0064  
                  _localtime 144C               __size_of_putch 0058          ?_show_time_by_clock 0034  
      __end_of_ymd_to_scalar 144C              ___aldiv@divisor 0005              ___aldiv@counter 0009  
             ___wmul@product 0005                     _LATCbits 000F8B                    _send_byte 1916  
           __CFG_WDTPS$32768 000000                    main@F3907 0090                    _time_zone 0054  
       ??_show_time_by_clock 0036            ___wmul@multiplier 0001                    lcd_init@i 0007  
                 printf@flag 0030                   printf@prec 0027                 send_nibble@i 0003  
               ??_lcd_gotoxy 0007            ___lmul@multiplier 0001                    copy_data0 17D0  
                 ?_localtime 0020          __end_of_send_nibble 18D2                   ?_send_byte 0004  
                   __Hrparam 0000                    gmtime@tim 00D9                     __Lrparam 0000  
         __end_of_lcd_gotoxy 18A4             __size_of___aldiv 00CC             __size_of___almod 00AC  
           __size_of___awmod 0070             __size_of___lwdiv 0052             __size_of___lwmod 0042  
                _isdigit$594 0002             __size_of_isdigit 001E              ___lwdiv@divisor 0009  
            ___lwdiv@counter 000D                     __ptext10 12FA                     __ptext11 10D0  
                   __ptext20 17FE                     __ptext12 0BC8                     __ptext21 119C  
                   __ptext13 13A6                     __ptext22 1916                     __ptext14 124C  
                   __ptext23 18A4                     __ptext15 1714                     __ptext16 1840  
                   __ptext17 18D2                     __ptext18 176A                     __ptext19 1660  
                   _lcd_init 119C              ___almod@divisor 0005              ___almod@counter 0009  
              __size_of_main 0064                     _init_str 0817               _lcd_gotoxy$195 0008  
                   _timezone 0050             ??_months_to_days 0010                    printf@len 002E  
                  printf@val 002C        __CFG_CPUDIV$OSC1_PLL2 000000                     gmtime@tc 001C  
                   gmtime@tp 0017                     isdigit@c 0003       __size_of_years_to_days 00AE  
                   isleap@yr 0013                  _send_nibble 18A4                  ??_localtime 0022  
           ___lwmod@dividend 000E                     mktime@tt 0032                  ??_send_byte 0005  
        ymd_to_scalar@scalar 0024                     printf@ap 0028                     printf@cp 002A  
          _ymd_to_scalar$670 0022              ___lwmod@divisor 0010              ___lwmod@counter 0012  
               ___aldiv@sign 000A                 ___almod@sign 000A  
