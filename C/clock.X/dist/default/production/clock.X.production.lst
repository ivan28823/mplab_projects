

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sun Apr 22 19:32:40 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1
    22                           	psect	text13,global,reloc=2,class=CODE,delta=1
    23                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    24                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    25  0000                     
    26                           ; Version 1.45
    27                           ; Generated 16/11/2017 GMT
    28                           ; 
    29                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    30                           ; All rights reserved.
    31                           ; 
    32                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    33                           ; 
    34                           ; Redistribution and use in source and binary forms, with or without modification, are
    35                           ; permitted provided that the following conditions are met:
    36                           ; 
    37                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    38                           ;        conditions and the following disclaimer.
    39                           ; 
    40                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    41                           ;        of conditions and the following disclaimer in the documentation and/or other
    42                           ;        materials provided with the distribution.
    43                           ; 
    44                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    45                           ;        software without specific prior written permission.
    46                           ; 
    47                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    48                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    49                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    50                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    51                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    52                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    53                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    54                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    55                           ; 
    56                           ; 
    57                           ; Code-generator required, PIC18F4550 Definitions
    58                           ; 
    59                           ; SFR Addresses
    60  0000                     
    61                           	psect	smallconst
    62  000800                     __psmallconst:
    63                           	opt stack 0
    64  000800  00                 	db	0
    65  000801                     _monthdays:
    66                           	opt stack 0
    67  000801  1F                 	db	31
    68  000802  1C                 	db	28
    69  000803  1F                 	db	31
    70  000804  1E                 	db	30
    71  000805  1F                 	db	31
    72  000806  1E                 	db	30
    73  000807  1F                 	db	31
    74  000808  1F                 	db	31
    75  000809  1E                 	db	30
    76  00080A  1F                 	db	31
    77  00080B  1E                 	db	30
    78  00080C  1F                 	db	31
    79  00080D                     __end_of_monthdays:
    80                           	opt stack 0
    81  00080D                     _dpowers:
    82                           	opt stack 0
    83  00080D  0001               	dw	1
    84  00080F  000A               	dw	10
    85  000811  0064               	dw	100
    86  000813  03E8               	dw	1000
    87  000815  2710               	dw	10000
    88  000817                     __end_of_dpowers:
    89                           	opt stack 0
    90  000817                     _init_str:
    91                           	opt stack 0
    92  000817  28                 	db	40
    93  000818  0C                 	db	12
    94  000819  01                 	db	1
    95  00081A  06                 	db	6
    96  00081B                     __end_of_init_str:
    97                           	opt stack 0
    98  00081B                     _month:
    99                           	opt stack 0
   100  00081B  45                 	db	69
   101  00081C  4E                 	db	78
   102  00081D  45                 	db	69
   103  00081E  00                 	db	0
   104  00081F  46                 	db	70
   105  000820  45                 	db	69
   106  000821  42                 	db	66
   107  000822  00                 	db	0
   108  000823  4D                 	db	77
   109  000824  41                 	db	65
   110  000825  52                 	db	82
   111  000826  00                 	db	0
   112  000827  41                 	db	65
   113  000828  42                 	db	66
   114  000829  52                 	db	82
   115  00082A  00                 	db	0
   116  00082B  4D                 	db	77
   117  00082C  41                 	db	65
   118  00082D  59                 	db	89
   119  00082E  00                 	db	0
   120  00082F  4A                 	db	74
   121  000830  55                 	db	85
   122  000831  4E                 	db	78
   123  000832  00                 	db	0
   124  000833  4A                 	db	74
   125  000834  55                 	db	85
   126  000835  4C                 	db	76
   127  000836  00                 	db	0
   128  000837  41                 	db	65
   129  000838  47                 	db	71
   130  000839  4F                 	db	79
   131  00083A  00                 	db	0
   132  00083B  53                 	db	83
   133  00083C  45                 	db	69
   134  00083D  50                 	db	80
   135  00083E  00                 	db	0
   136  00083F  4F                 	db	79
   137  000840  43                 	db	67
   138  000841  54                 	db	84
   139  000842  00                 	db	0
   140  000843  4E                 	db	78
   141  000844  4F                 	db	79
   142  000845  56                 	db	86
   143  000846  00                 	db	0
   144  000847  44                 	db	68
   145  000848  49                 	db	73
   146  000849  43                 	db	67
   147  00084A  00                 	db	0
   148  00084B                     __end_of_month:
   149                           	opt stack 0
   150  0000                     _TRISCbits	set	3988
   151  0000                     _TRISD	set	3989
   152  0000                     _LATD	set	3980
   153  0000                     _LATCbits	set	3979
   154  00084B                     STR_1:
   155  00084B  25                 	db	37
   156  00084C  32                 	db	50	;'2'
   157  00084D  64                 	db	100	;'d'
   158  00084E  3A                 	db	58	;':'
   159  00084F  25                 	db	37
   160  000850  32                 	db	50	;'2'
   161  000851  64                 	db	100	;'d'
   162  000852  3A                 	db	58	;':'
   163  000853  25                 	db	37
   164  000854  32                 	db	50	;'2'
   165  000855  64                 	db	100	;'d'
   166  000856  20                 	db	32
   167  000857  25                 	db	37
   168  000858  32                 	db	50	;'2'
   169  000859  64                 	db	100	;'d'
   170  00085A  3A                 	db	58	;':'
   171  00085B  25                 	db	37
   172  00085C  73                 	db	115	;'s'
   173  00085D  3A                 	db	58	;':'
   174  00085E  25                 	db	37
   175  00085F  64                 	db	100	;'d'
   176  000860  00                 	db	0
   177  000861                     STR_2:
   178  000861  28                 	db	40
   179  000862  6E                 	db	110	;'n'
   180  000863  75                 	db	117	;'u'
   181  000864  6C                 	db	108	;'l'
   182  000865  6C                 	db	108	;'l'
   183  000866  29                 	db	41
   184  000867  00                 	db	0
   185                           
   186                           ; #config settings
   187  000868  00                 	db	0	; dummy byte at the end
   188  0000                     
   189                           	psect	cinit
   190  000F40                     __pcinit:
   191                           	opt stack 0
   192  000F40                     start_initialization:
   193                           	opt stack 0
   194  000F40                     __initialization:
   195                           	opt stack 0
   196                           
   197                           ; Clear objects allocated to COMRAM (29 bytes)
   198  000F40  EE00  F035         	lfsr	0,__pbssCOMRAM
   199  000F44  0E1D               	movlw	29
   200  000F46                     clear_0:
   201  000F46  6AEE               	clrf	postinc0,c
   202  000F48  06E8               	decf	wreg,f,c
   203  000F4A  E1FD               	bnz	clear_0
   204  000F4C                     end_of_initialization:
   205                           	opt stack 0
   206  000F4C                     __end_of__initialization:
   207                           	opt stack 0
   208  000F4C  0E00               	movlw	low (__Lmediumconst shr (0+16))
   209  000F4E  6EF8               	movwf	tblptru,c
   210  000F50  0100               	movlb	0
   211  000F52  EFE2  F006         	goto	_main	;jump to C main() function
   212                           tblptru	equ	0xFF8
   213                           postinc0	equ	0xFEE
   214                           wreg	equ	0xFE8
   215                           
   216                           	psect	bssCOMRAM
   217  000035                     __pbssCOMRAM:
   218                           	opt stack 0
   219  000035                     _Gtime:
   220                           	opt stack 0
   221  000035                     	ds	7
   222  00003C                     _DataStr:
   223                           	opt stack 0
   224  00003C                     	ds	22
   225                           tblptru	equ	0xFF8
   226                           postinc0	equ	0xFEE
   227                           wreg	equ	0xFE8
   228                           
   229                           	psect	cstackCOMRAM
   230  000001                     __pcstackCOMRAM:
   231                           	opt stack 0
   232  000001                     ??_isdigit:
   233  000001                     ?___wmul:
   234                           	opt stack 0
   235  000001                     ?___lwdiv:
   236                           	opt stack 0
   237  000001                     send_nibble@data:
   238                           	opt stack 0
   239  000001                     set_time@m:
   240                           	opt stack 0
   241  000001                     LeapYear@year:
   242                           	opt stack 0
   243  000001                     ___wmul@multiplier:
   244                           	opt stack 0
   245  000001                     ___lwdiv@dividend:
   246                           	opt stack 0
   247                           
   248                           ; 2 bytes @ 0x0
   249  000001                     	ds	1
   250  000002                     send_nibble@comand:
   251                           	opt stack 0
   252  000002                     set_time@h:
   253                           	opt stack 0
   254  000002                     _isdigit$426:
   255                           	opt stack 0
   256                           
   257                           ; 1 bytes @ 0x1
   258  000002                     	ds	1
   259  000003                     ??_LeapYear:
   260  000003                     send_nibble@i:
   261                           	opt stack 0
   262  000003                     set_time@d:
   263                           	opt stack 0
   264  000003                     isdigit@c:
   265                           	opt stack 0
   266  000003                     ___wmul@multiplicand:
   267                           	opt stack 0
   268  000003                     ___lwdiv@divisor:
   269                           	opt stack 0
   270                           
   271                           ; 2 bytes @ 0x2
   272  000003                     	ds	1
   273  000004                     send_byte@data:
   274                           	opt stack 0
   275  000004                     set_time@mo:
   276                           	opt stack 0
   277                           
   278                           ; 1 bytes @ 0x3
   279  000004                     	ds	1
   280  000005                     ??_increment_seg:
   281  000005                     send_byte@comand:
   282                           	opt stack 0
   283  000005                     set_time@y:
   284                           	opt stack 0
   285  000005                     ___wmul@product:
   286                           	opt stack 0
   287  000005                     ___lwdiv@quotient:
   288                           	opt stack 0
   289                           
   290                           ; 2 bytes @ 0x4
   291  000005                     	ds	1
   292  000006                     ??_lcd_init:
   293  000006                     lcd_gotoxy@y:
   294                           	opt stack 0
   295                           
   296                           ; 1 bytes @ 0x5
   297  000006                     	ds	1
   298  000007                     lcd_gotoxy@x:
   299                           	opt stack 0
   300  000007                     lcd_init@i:
   301                           	opt stack 0
   302  000007                     set_time@s:
   303                           	opt stack 0
   304  000007                     ___lwdiv@counter:
   305                           	opt stack 0
   306                           
   307                           ; 1 bytes @ 0x6
   308  000007                     	ds	1
   309  000008                     ?___lwmod:
   310                           	opt stack 0
   311  000008                     _lcd_gotoxy$134:
   312                           	opt stack 0
   313  000008                     ___lwmod@dividend:
   314                           	opt stack 0
   315                           
   316                           ; 2 bytes @ 0x7
   317  000008                     	ds	1
   318  000009                     _increment_seg$165:
   319                           	opt stack 0
   320                           
   321                           ; 2 bytes @ 0x8
   322  000009                     	ds	1
   323  00000A                     lcd_gotoxy@dir:
   324                           	opt stack 0
   325  00000A                     ___lwmod@divisor:
   326                           	opt stack 0
   327                           
   328                           ; 2 bytes @ 0x9
   329  00000A                     	ds	2
   330  00000C                     ___lwmod@counter:
   331                           	opt stack 0
   332                           
   333                           ; 1 bytes @ 0xB
   334  00000C                     	ds	1
   335  00000D                     ?_sprintf:
   336                           	opt stack 0
   337  00000D                     sprintf@sp:
   338                           	opt stack 0
   339                           
   340                           ; 2 bytes @ 0xC
   341  00000D                     	ds	2
   342  00000F                     sprintf@f:
   343                           	opt stack 0
   344                           
   345                           ; 2 bytes @ 0xE
   346  00000F                     	ds	14
   347  00001D                     ??_sprintf:
   348                           
   349                           ; 1 bytes @ 0x1C
   350  00001D                     	ds	4
   351  000021                     sprintf@prec:
   352                           	opt stack 0
   353                           
   354                           ; 1 bytes @ 0x20
   355  000021                     	ds	1
   356  000022                     sprintf@ap:
   357                           	opt stack 0
   358                           
   359                           ; 2 bytes @ 0x21
   360  000022                     	ds	2
   361  000024                     sprintf@flag:
   362                           	opt stack 0
   363                           
   364                           ; 1 bytes @ 0x23
   365  000024                     	ds	1
   366  000025                     sprintf@cp:
   367                           	opt stack 0
   368                           
   369                           ; 2 bytes @ 0x24
   370  000025                     	ds	2
   371  000027                     sprintf@val:
   372                           	opt stack 0
   373                           
   374                           ; 2 bytes @ 0x26
   375  000027                     	ds	2
   376  000029                     sprintf@len:
   377                           	opt stack 0
   378                           
   379                           ; 2 bytes @ 0x28
   380  000029                     	ds	2
   381  00002B                     sprintf@width:
   382                           	opt stack 0
   383                           
   384                           ; 2 bytes @ 0x2A
   385  00002B                     	ds	2
   386  00002D                     sprintf@c:
   387                           	opt stack 0
   388                           
   389                           ; 1 bytes @ 0x2C
   390  00002D                     	ds	1
   391  00002E                     ??_show_data:
   392                           
   393                           ; 1 bytes @ 0x2D
   394  00002E                     	ds	4
   395  000032                     show_data@i:
   396                           	opt stack 0
   397                           
   398                           ; 1 bytes @ 0x31
   399  000032                     	ds	1
   400  000033                     ??_main:
   401                           
   402                           ; 1 bytes @ 0x32
   403  000033                     	ds	2
   404                           tblptru	equ	0xFF8
   405                           postinc0	equ	0xFEE
   406                           wreg	equ	0xFE8
   407                           
   408 ;;
   409 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   410 ;;
   411 ;; *************** function _main *****************
   412 ;; Defined at:
   413 ;;		line 64 in file "main.c"
   414 ;; Parameters:    Size  Location     Type
   415 ;;		None
   416 ;; Auto vars:     Size  Location     Type
   417 ;;		None
   418 ;; Return value:  Size  Location     Type
   419 ;;                  1    wreg      void 
   420 ;; Registers used:
   421 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   422 ;; Tracked objects:
   423 ;;		On entry : 0/0
   424 ;;		On exit  : 0/0
   425 ;;		Unchanged: 0/0
   426 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   427 ;;      Params:         0       0       0       0       0       0       0       0       0
   428 ;;      Locals:         0       0       0       0       0       0       0       0       0
   429 ;;      Temps:          2       0       0       0       0       0       0       0       0
   430 ;;      Totals:         2       0       0       0       0       0       0       0       0
   431 ;;Total ram usage:        2 bytes
   432 ;; Hardware stack levels required when called:    4
   433 ;; This function calls:
   434 ;;		_increment_seg
   435 ;;		_lcd_init
   436 ;;		_set_time
   437 ;;		_show_data
   438 ;; This function is called by:
   439 ;;		Startup code after reset
   440 ;; This function uses a non-reentrant model
   441 ;;
   442                           
   443                           	psect	text0
   444  000DC4                     __ptext0:
   445                           	opt stack 0
   446  000DC4                     _main:
   447                           	opt stack 27
   448                           
   449                           ;main.c: 65: lcd_init();
   450                           
   451                           ;incstack = 0
   452  000DC4  ECB7  F005         	call	_lcd_init	;wreg free
   453                           
   454                           ;main.c: 66: set_time(59,59,23,28,2,2018);
   455  000DC8  0E3B               	movlw	59
   456  000DCA  6E01               	movwf	set_time@m,c
   457  000DCC  0E17               	movlw	23
   458  000DCE  6E02               	movwf	set_time@h,c
   459  000DD0  0E1C               	movlw	28
   460  000DD2  6E03               	movwf	set_time@d,c
   461  000DD4  0E02               	movlw	2
   462  000DD6  6E04               	movwf	set_time@mo,c
   463  000DD8  0E07               	movlw	7
   464  000DDA  6E06               	movwf	set_time@y+1,c
   465  000DDC  0EE2               	movlw	226
   466  000DDE  6E05               	movwf	set_time@y,c
   467  000DE0  0E3B               	movlw	59
   468  000DE2  EC66  F007         	call	_set_time
   469  000DE6                     
   470                           ;main.c: 68: show_data();
   471  000DE6  EC0F  F006         	call	_show_data	;wreg free
   472                           
   473                           ;main.c: 69: increment_seg();
   474  000DEA  EC65  F006         	call	_increment_seg	;wreg free
   475                           
   476                           ;main.c: 70: _delay((unsigned long)((1000)*(20000000/4000.0)));
   477  000DEE  0E1A               	movlw	26
   478  000DF0  6E34               	movwf	(??_main+1)& (0+255),c
   479  000DF2  0E5E               	movlw	94
   480  000DF4  6E33               	movwf	??_main& (0+255),c
   481  000DF6  0E6E               	movlw	110
   482  000DF8                     u997:
   483  000DF8  2EE8               	decfsz	wreg,f,c
   484  000DFA  D7FE               	bra	u997
   485  000DFC  2E33               	decfsz	??_main& (0+255),f,c
   486  000DFE  D7FC               	bra	u997
   487  000E00  2E34               	decfsz	(??_main+1)& (0+255),f,c
   488  000E02  D7FA               	bra	u997
   489  000E04  D000               	nop2	
   490                           
   491                           ;main.c: 71: }
   492  000E06  D7EF               	goto	l80
   493  000E08                     __end_of_main:
   494                           	opt stack 0
   495                           tblptru	equ	0xFF8
   496                           postinc0	equ	0xFEE
   497                           wreg	equ	0xFE8
   498                           
   499 ;; *************** function _show_data *****************
   500 ;; Defined at:
   501 ;;		line 53 in file "main.c"
   502 ;; Parameters:    Size  Location     Type
   503 ;;		None
   504 ;; Auto vars:     Size  Location     Type
   505 ;;  i               1   49[COMRAM] unsigned char 
   506 ;; Return value:  Size  Location     Type
   507 ;;                  1    wreg      void 
   508 ;; Registers used:
   509 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   510 ;; Tracked objects:
   511 ;;		On entry : 0/0
   512 ;;		On exit  : 0/0
   513 ;;		Unchanged: 0/0
   514 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   515 ;;      Params:         0       0       0       0       0       0       0       0       0
   516 ;;      Locals:         1       0       0       0       0       0       0       0       0
   517 ;;      Temps:          4       0       0       0       0       0       0       0       0
   518 ;;      Totals:         5       0       0       0       0       0       0       0       0
   519 ;;Total ram usage:        5 bytes
   520 ;; Hardware stack levels used:    1
   521 ;; Hardware stack levels required when called:    3
   522 ;; This function calls:
   523 ;;		_increment_seg
   524 ;;		_lcd_gotoxy
   525 ;;		_send_byte
   526 ;;		_sprintf
   527 ;; This function is called by:
   528 ;;		_main
   529 ;; This function uses a non-reentrant model
   530 ;;
   531                           
   532                           	psect	text1
   533  000C1E                     __ptext1:
   534                           	opt stack 0
   535  000C1E                     _show_data:
   536                           	opt stack 27
   537                           
   538                           ;main.c: 54: sprintf(DataStr,"%2d:%2d:%2d %2d:%s:%d",Gtime.hour,Gtime.min,Gtime.seg,Gtim
      +                          e.day,month[Gtime.month-1],Gtime.year);
   539                           
   540                           ;incstack = 0
   541  000C1E  0E3C               	movlw	low _DataStr
   542  000C20  6E0D               	movwf	sprintf@sp,c
   543  000C22  0E00               	movlw	high _DataStr
   544  000C24  6E0E               	movwf	sprintf@sp+1,c
   545  000C26  0E4B               	movlw	low STR_1
   546  000C28  6E0F               	movwf	sprintf@f,c
   547  000C2A  0E08               	movlw	high STR_1
   548  000C2C  6E10               	movwf	sprintf@f+1,c
   549  000C2E  C037  F011         	movff	_Gtime+2,?_sprintf+4
   550  000C32  6A12               	clrf	?_sprintf+5,c
   551  000C34  C036  F013         	movff	_Gtime+1,?_sprintf+6
   552  000C38  6A14               	clrf	?_sprintf+7,c
   553  000C3A  C035  F015         	movff	_Gtime,?_sprintf+8
   554  000C3E  6A16               	clrf	?_sprintf+9,c
   555  000C40  C038  F017         	movff	_Gtime+3,?_sprintf+10
   556  000C44  6A18               	clrf	?_sprintf+11,c
   557  000C46  0EFC               	movlw	252
   558  000C48  6E2E               	movwf	??_show_data& (0+255),c
   559  000C4A  0EFF               	movlw	255
   560  000C4C  6E2F               	movwf	(??_show_data+1)& (0+255),c
   561  000C4E  5039               	movf	_Gtime+4,w,c
   562  000C50  6E30               	movwf	(??_show_data+2)& (0+255),c
   563  000C52  6A31               	clrf	(??_show_data+3)& (0+255),c
   564  000C54  90D8               	bcf	status,0,c
   565  000C56  3630               	rlcf	??_show_data+2,f,c
   566  000C58  3631               	rlcf	??_show_data+3,f,c
   567  000C5A  90D8               	bcf	status,0,c
   568  000C5C  3630               	rlcf	??_show_data+2,f,c
   569  000C5E  3631               	rlcf	??_show_data+3,f,c
   570  000C60  502E               	movf	??_show_data,w,c
   571  000C62  2630               	addwf	??_show_data+2,f,c
   572  000C64  502F               	movf	??_show_data+1,w,c
   573  000C66  2231               	addwfc	??_show_data+3,f,c
   574  000C68  0E1B               	movlw	low _month
   575  000C6A  2430               	addwf	??_show_data+2,w,c
   576  000C6C  6E19               	movwf	?_sprintf+12,c
   577  000C6E  0E08               	movlw	high _month
   578  000C70  2031               	addwfc	??_show_data+3,w,c
   579  000C72  6E1A               	movwf	?_sprintf+13,c
   580  000C74  C03A  F01B         	movff	_Gtime+5,?_sprintf+14
   581  000C78  C03B  F01C         	movff	_Gtime+6,?_sprintf+15
   582  000C7C  EC35  F004         	call	_sprintf	;wreg free
   583                           
   584                           ;main.c: 55: lcd_gotoxy(5,1);
   585  000C80  0E01               	movlw	1
   586  000C82  6E06               	movwf	lcd_gotoxy@y,c
   587  000C84  0E05               	movlw	5
   588  000C86  EC25  F007         	call	_lcd_gotoxy
   589                           
   590                           ;main.c: 56: for (char i = 0; i < 20; ++i){
   591  000C8A  0E00               	movlw	0
   592  000C8C  6E32               	movwf	show_data@i,c
   593  000C8E                     l1429:
   594  000C8E  0E13               	movlw	19
   595  000C90  6432               	cpfsgt	show_data@i,c
   596  000C92  D001               	goto	l72
   597  000C94  0012               	return	
   598  000C96                     l72:
   599                           
   600                           ;main.c: 57: if(i==8)lcd_gotoxy(2,2);
   601  000C96  0E08               	movlw	8
   602  000C98  1832               	xorwf	show_data@i,w,c
   603  000C9A  A4D8               	btfss	status,2,c
   604  000C9C  D005               	goto	l74
   605  000C9E  0E02               	movlw	2
   606  000CA0  6E06               	movwf	lcd_gotoxy@y,c
   607  000CA2  0E02               	movlw	2
   608  000CA4  EC25  F007         	call	_lcd_gotoxy
   609  000CA8                     l74:
   610                           
   611                           ;main.c: 58: send_byte(1,DataStr[i]);
   612  000CA8  5032               	movf	show_data@i,w,c
   613  000CAA  0D01               	mullw	1
   614  000CAC  0E3C               	movlw	low _DataStr
   615  000CAE  24F3               	addwf	prodl,w,c
   616  000CB0  6ED9               	movwf	fsr2l,c
   617  000CB2  0E00               	movlw	high _DataStr
   618  000CB4  20F4               	addwfc	prodh,w,c
   619  000CB6  6EDA               	movwf	fsr2h,c
   620  000CB8  50DF               	movf	indf2,w,c
   621  000CBA  6E04               	movwf	send_byte@data,c
   622  000CBC  0E01               	movlw	1
   623  000CBE  EC93  F007         	call	_send_byte
   624                           
   625                           ;main.c: 59: increment_seg();
   626  000CC2  EC65  F006         	call	_increment_seg	;wreg free
   627  000CC6  2A32               	incf	show_data@i,f,c
   628  000CC8  D7E2               	goto	l1429
   629  000CCA                     __end_of_show_data:
   630                           	opt stack 0
   631                           tblptru	equ	0xFF8
   632                           prodh	equ	0xFF4
   633                           prodl	equ	0xFF3
   634                           postinc0	equ	0xFEE
   635                           wreg	equ	0xFE8
   636                           indf2	equ	0xFDF
   637                           fsr2h	equ	0xFDA
   638                           fsr2l	equ	0xFD9
   639                           status	equ	0xFD8
   640                           
   641 ;; *************** function _sprintf *****************
   642 ;; Defined at:
   643 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
   644 ;; Parameters:    Size  Location     Type
   645 ;;  sp              2   12[COMRAM] PTR unsigned char 
   646 ;;		 -> DataStr(22), 
   647 ;;  f               2   14[COMRAM] PTR const unsigned char 
   648 ;;		 -> STR_1(22), 
   649 ;; Auto vars:     Size  Location     Type
   650 ;;  tmpval          4    0        struct .
   651 ;;  width           2   42[COMRAM] int 
   652 ;;  len             2   40[COMRAM] unsigned int 
   653 ;;  val             2   38[COMRAM] unsigned int 
   654 ;;  cp              2   36[COMRAM] PTR const unsigned char 
   655 ;;		 -> STR_2(7), month(48), 
   656 ;;  ap              2   33[COMRAM] PTR void [1]
   657 ;;		 -> ?_sprintf(2), 
   658 ;;  c               1   44[COMRAM] char 
   659 ;;  flag            1   35[COMRAM] unsigned char 
   660 ;;  prec            1   32[COMRAM] char 
   661 ;; Return value:  Size  Location     Type
   662 ;;                  2   12[COMRAM] int 
   663 ;; Registers used:
   664 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   665 ;; Tracked objects:
   666 ;;		On entry : 0/0
   667 ;;		On exit  : 0/0
   668 ;;		Unchanged: 0/0
   669 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   670 ;;      Params:        16       0       0       0       0       0       0       0       0
   671 ;;      Locals:        13       0       0       0       0       0       0       0       0
   672 ;;      Temps:          4       0       0       0       0       0       0       0       0
   673 ;;      Totals:        33       0       0       0       0       0       0       0       0
   674 ;;Total ram usage:       33 bytes
   675 ;; Hardware stack levels used:    1
   676 ;; Hardware stack levels required when called:    1
   677 ;; This function calls:
   678 ;;		___lwdiv
   679 ;;		___lwmod
   680 ;;		___wmul
   681 ;;		_isdigit
   682 ;; This function is called by:
   683 ;;		_show_data
   684 ;; This function uses a non-reentrant model
   685 ;;
   686                           
   687                           	psect	text2
   688  00086A                     __ptext2:
   689                           	opt stack 0
   690  00086A                     _sprintf:
   691                           	opt stack 28
   692                           
   693                           ;doprnt.c: 494: va_list ap;
   694                           ;doprnt.c: 499: signed char c;
   695                           ;doprnt.c: 501: int width;
   696                           ;doprnt.c: 506: signed char prec;
   697                           ;doprnt.c: 508: unsigned char flag;
   698                           ;doprnt.c: 523: union {
   699                           ;doprnt.c: 524: unsigned long vd;
   700                           ;doprnt.c: 525: double integ;
   701                           ;doprnt.c: 526: } tmpval;
   702                           ;doprnt.c: 528: unsigned int val;
   703                           ;doprnt.c: 529: unsigned len;
   704                           ;doprnt.c: 530: const char * cp;
   705                           ;doprnt.c: 533: *ap = __va_start();
   706                           
   707                           ;incstack = 0
   708  00086A  0E11               	movlw	low (?_sprintf+4)
   709  00086C  6E22               	movwf	sprintf@ap,c
   710  00086E  0E00               	movlw	high (?_sprintf+4)
   711  000870  6E23               	movwf	sprintf@ap+1,c
   712                           
   713                           ;doprnt.c: 536: while(c = *f++) {
   714  000872  D16A               	goto	u880
   715  000874                     
   716                           ;doprnt.c: 538: if(c != '%')
   717  000874  0E25               	movlw	37
   718  000876  182D               	xorwf	sprintf@c,w,c
   719  000878  B4D8               	btfsc	status,2,c
   720  00087A  D009               	goto	l95
   721                           
   722                           ;doprnt.c: 540: {
   723                           ;doprnt.c: 541: ((*sp++ = (c)));
   724  00087C  C00D  FFD9         	movff	sprintf@sp,fsr2l
   725  000880  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
   726  000884  C02D  FFDF         	movff	sprintf@c,indf2
   727  000888  4A0D               	infsnz	sprintf@sp,f,c
   728  00088A  2A0E               	incf	sprintf@sp+1,f,c
   729                           
   730                           ;doprnt.c: 542: continue;
   731  00088C  D15D               	goto	u880
   732  00088E                     l95:
   733                           
   734                           ;doprnt.c: 543: }
   735                           ;doprnt.c: 546: width = 0;
   736  00088E  0E00               	movlw	0
   737  000890  6E2C               	movwf	sprintf@width+1,c
   738  000892  0E00               	movlw	0
   739  000894  6E2B               	movwf	sprintf@width,c
   740                           
   741                           ;doprnt.c: 548: flag = 0;
   742  000896  0E00               	movlw	0
   743  000898  6E24               	movwf	sprintf@flag,c
   744                           
   745                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
   746  00089A  C00F  FFF6         	movff	sprintf@f,tblptrl
   747  00089E  C010  FFF7         	movff	sprintf@f+1,tblptrh
   748  0008A2                     	if	0	;tblptru may be non-zero
   749  0008A2                     	endif
   750  0008A2                     	if	0	;tblptru may be non-zero
   751  0008A2                     	endif
   752  0008A2  0008               	tblrd		*
   753  0008A4  50F5               	movf	tablat,w,c
   754  0008A6  EC76  F007         	call	_isdigit
   755  0008AA  A0D8               	btfss	status,0,c
   756  0008AC  D096               	goto	l99
   757                           
   758                           ;doprnt.c: 598: width = 0;
   759  0008AE  0E00               	movlw	0
   760  0008B0  6E2C               	movwf	sprintf@width+1,c
   761  0008B2  0E00               	movlw	0
   762  0008B4  6E2B               	movwf	sprintf@width,c
   763  0008B6                     
   764                           ;doprnt.c: 600: width *= 10;
   765  0008B6  C02B  F001         	movff	sprintf@width,___wmul@multiplier
   766  0008BA  C02C  F002         	movff	sprintf@width+1,___wmul@multiplier+1
   767  0008BE  0E00               	movlw	0
   768  0008C0  6E04               	movwf	___wmul@multiplicand+1,c
   769  0008C2  0E0A               	movlw	10
   770  0008C4  6E03               	movwf	___wmul@multiplicand,c
   771  0008C6  EC53  F007         	call	___wmul	;wreg free
   772  0008CA  C001  F02B         	movff	?___wmul,sprintf@width
   773  0008CE  C002  F02C         	movff	?___wmul+1,sprintf@width+1
   774                           
   775                           ;doprnt.c: 601: width += *f++ - '0';
   776  0008D2  0ED0               	movlw	208
   777  0008D4  6E1D               	movwf	??_sprintf& (0+255),c
   778  0008D6  0EFF               	movlw	255
   779  0008D8  6E1E               	movwf	(??_sprintf+1)& (0+255),c
   780  0008DA  C00F  FFF6         	movff	sprintf@f,tblptrl
   781  0008DE  C010  FFF7         	movff	sprintf@f+1,tblptrh
   782  0008E2                     	if	0	;tblptru may be non-zero
   783  0008E2                     	endif
   784  0008E2                     	if	0	;tblptru may be non-zero
   785  0008E2                     	endif
   786  0008E2  0008               	tblrd		*
   787  0008E4  50F5               	movf	tablat,w,c
   788  0008E6  6E1F               	movwf	(??_sprintf+2)& (0+255),c
   789  0008E8  6A20               	clrf	(??_sprintf+3)& (0+255),c
   790  0008EA  501D               	movf	??_sprintf,w,c
   791  0008EC  261F               	addwf	??_sprintf+2,f,c
   792  0008EE  501E               	movf	??_sprintf+1,w,c
   793  0008F0  2220               	addwfc	??_sprintf+3,f,c
   794  0008F2  501F               	movf	??_sprintf+2,w,c
   795  0008F4  262B               	addwf	sprintf@width,f,c
   796  0008F6  5020               	movf	??_sprintf+3,w,c
   797  0008F8  222C               	addwfc	sprintf@width+1,f,c
   798  0008FA  4A0F               	infsnz	sprintf@f,f,c
   799  0008FC  2A10               	incf	sprintf@f+1,f,c
   800                           
   801                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
   802  0008FE  C00F  FFF6         	movff	sprintf@f,tblptrl
   803  000902  C010  FFF7         	movff	sprintf@f+1,tblptrh
   804  000906                     	if	0	;tblptru may be non-zero
   805  000906                     	endif
   806  000906                     	if	0	;tblptru may be non-zero
   807  000906                     	endif
   808  000906  0008               	tblrd		*
   809  000908  50F5               	movf	tablat,w,c
   810  00090A  EC76  F007         	call	_isdigit
   811  00090E  A0D8               	btfss	status,0,c
   812  000910  D064               	goto	l99
   813  000912  D7D1               	goto	l97
   814  000914                     
   815                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
   816  000914  C022  FFD9         	movff	sprintf@ap,fsr2l
   817  000918  C023  FFDA         	movff	sprintf@ap+1,fsr2h
   818  00091C  CFDE F025          	movff	postinc2,sprintf@cp
   819  000920  CFDD F026          	movff	postdec2,sprintf@cp+1
   820  000924  0E02               	movlw	2
   821  000926  2622               	addwf	sprintf@ap,f,c
   822  000928  0E00               	movlw	0
   823  00092A  2223               	addwfc	sprintf@ap+1,f,c
   824                           
   825                           ;doprnt.c: 740: if(!cp)
   826  00092C  5025               	movf	sprintf@cp,w,c
   827  00092E  1026               	iorwf	sprintf@cp+1,w,c
   828  000930  A4D8               	btfss	status,2,c
   829  000932  D004               	goto	l106
   830                           
   831                           ;doprnt.c: 741: cp = "(null)";
   832  000934  0E61               	movlw	low STR_2
   833  000936  6E25               	movwf	sprintf@cp,c
   834  000938  0E08               	movlw	high STR_2
   835  00093A  6E26               	movwf	sprintf@cp+1,c
   836  00093C                     l106:
   837                           
   838                           ;doprnt.c: 745: len = 0;
   839  00093C  0E00               	movlw	0
   840  00093E  6E2A               	movwf	sprintf@len+1,c
   841  000940  0E00               	movlw	0
   842  000942  6E29               	movwf	sprintf@len,c
   843                           
   844                           ;doprnt.c: 746: while(cp[len])
   845  000944  D002               	goto	l107
   846  000946                     
   847                           ;doprnt.c: 747: len++;
   848  000946  4A29               	infsnz	sprintf@len,f,c
   849  000948  2A2A               	incf	sprintf@len+1,f,c
   850  00094A                     l107:
   851  00094A  5029               	movf	sprintf@len,w,c
   852  00094C  2425               	addwf	sprintf@cp,w,c
   853  00094E  6E1D               	movwf	??_sprintf& (0+255),c
   854  000950  502A               	movf	sprintf@len+1,w,c
   855  000952  2026               	addwfc	sprintf@cp+1,w,c
   856  000954  6E1E               	movwf	(??_sprintf+1)& (0+255),c
   857  000956  C01D  FFF6         	movff	??_sprintf,tblptrl
   858  00095A  C01E  FFF7         	movff	??_sprintf+1,tblptrh
   859  00095E                     	if	0	;tblptru may be non-zero
   860  00095E                     	endif
   861  00095E                     	if	0	;tblptru may be non-zero
   862  00095E                     	endif
   863  00095E  0008               	tblrd		*
   864  000960  50F5               	movf	tablat,w,c
   865  000962  0900               	iorlw	0
   866  000964  A4D8               	btfss	status,2,c
   867  000966  D7EF               	goto	l108
   868                           
   869                           ;doprnt.c: 757: if(width > len)
   870  000968  502B               	movf	sprintf@width,w,c
   871  00096A  5C29               	subwf	sprintf@len,w,c
   872  00096C  502C               	movf	sprintf@width+1,w,c
   873  00096E  582A               	subwfb	sprintf@len+1,w,c
   874  000970  B0D8               	btfsc	status,0,c
   875  000972  D005               	goto	l110
   876                           
   877                           ;doprnt.c: 758: width -= len;
   878  000974  5029               	movf	sprintf@len,w,c
   879  000976  5E2B               	subwf	sprintf@width,f,c
   880  000978  502A               	movf	sprintf@len+1,w,c
   881  00097A  5A2C               	subwfb	sprintf@width+1,f,c
   882  00097C  D00D               	goto	l112
   883  00097E                     l110:
   884                           
   885                           ;doprnt.c: 759: else
   886                           ;doprnt.c: 760: width = 0;
   887  00097E  0E00               	movlw	0
   888  000980  6E2C               	movwf	sprintf@width+1,c
   889  000982  0E00               	movlw	0
   890  000984  6E2B               	movwf	sprintf@width,c
   891                           
   892                           ;doprnt.c: 764: while(width--)
   893  000986  D008               	goto	l112
   894  000988                     l1285:
   895                           
   896                           ;doprnt.c: 765: ((*sp++ = (' ')));
   897  000988  C00D  FFD9         	movff	sprintf@sp,fsr2l
   898  00098C  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
   899  000990  0E20               	movlw	32
   900  000992  6EDF               	movwf	indf2,c
   901  000994  4A0D               	infsnz	sprintf@sp,f,c
   902  000996  2A0E               	incf	sprintf@sp+1,f,c
   903  000998                     l112:
   904  000998  062B               	decf	sprintf@width,f,c
   905  00099A  A0D8               	btfss	status,0,c
   906  00099C  062C               	decf	sprintf@width+1,f,c
   907  00099E  282B               	incf	sprintf@width,w,c
   908  0009A0  E1F3               	bnz	l1285
   909  0009A2  282C               	incf	sprintf@width+1,w,c
   910  0009A4  B4D8               	btfsc	status,2,c
   911  0009A6  D010               	goto	l115
   912  0009A8  D7EF               	goto	l113
   913  0009AA                     l1291:
   914                           
   915                           ;doprnt.c: 768: ((*sp++ = (*cp++)));
   916  0009AA  C025  FFF6         	movff	sprintf@cp,tblptrl
   917  0009AE  C026  FFF7         	movff	sprintf@cp+1,tblptrh
   918  0009B2                     	if	0	;tblptru may be non-zero
   919  0009B2                     	endif
   920  0009B2                     	if	0	;tblptru may be non-zero
   921  0009B2                     	endif
   922  0009B2  C00D  FFD9         	movff	sprintf@sp,fsr2l
   923  0009B6  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
   924  0009BA  0008               	tblrd		*
   925  0009BC  CFF5 FFDF          	movff	tablat,indf2
   926  0009C0  4A25               	infsnz	sprintf@cp,f,c
   927  0009C2  2A26               	incf	sprintf@cp+1,f,c
   928  0009C4  4A0D               	infsnz	sprintf@sp,f,c
   929  0009C6  2A0E               	incf	sprintf@sp+1,f,c
   930  0009C8                     l115:
   931  0009C8  0629               	decf	sprintf@len,f,c
   932  0009CA  A0D8               	btfss	status,0,c
   933  0009CC  062A               	decf	sprintf@len+1,f,c
   934  0009CE  2829               	incf	sprintf@len,w,c
   935  0009D0  E1EC               	bnz	l1291
   936  0009D2  282A               	incf	sprintf@len+1,w,c
   937  0009D4  B4D8               	btfsc	status,2,c
   938  0009D6  D0B8               	goto	u880
   939  0009D8  D7E8               	goto	l116
   940  0009DA                     l99:
   941  0009DA  C00F  FFF6         	movff	sprintf@f,tblptrl
   942  0009DE  C010  FFF7         	movff	sprintf@f+1,tblptrh
   943  0009E2  4A0F               	infsnz	sprintf@f,f,c
   944  0009E4  2A10               	incf	sprintf@f+1,f,c
   945  0009E6                     	if	0	;tblptru may be non-zero
   946  0009E6                     	endif
   947  0009E6                     	if	0	;tblptru may be non-zero
   948  0009E6                     	endif
   949  0009E6  0008               	tblrd		*
   950  0009E8  CFF5 F02D          	movff	tablat,sprintf@c
   951  0009EC  502D               	movf	sprintf@c,w,c
   952                           
   953                           ; Switch size 1, requested type "space"
   954                           ; Number of cases is 4, Range of values is 0 to 115
   955                           ; switch strategies available:
   956                           ; Name         Instructions Cycles
   957                           ; simple_byte           13     7 (average)
   958                           ;	Chosen strategy is simple_byte
   959  0009EE  0A00               	xorlw	0	; case 0
   960  0009F0  B4D8               	btfsc	status,2,c
   961  0009F2  D0B6               	goto	u890
   962  0009F4  0A64               	xorlw	100	; case 100
   963  0009F6  B4D8               	btfsc	status,2,c
   964  0009F8  D007               	goto	l104
   965  0009FA  0A0D               	xorlw	13	; case 105
   966  0009FC  B4D8               	btfsc	status,2,c
   967  0009FE  D004               	goto	l104
   968  000A00  0A1A               	xorlw	26	; case 115
   969  000A02  B4D8               	btfsc	status,2,c
   970  000A04  D787               	goto	l105
   971  000A06  D0A0               	goto	u880
   972  000A08                     l104:
   973                           
   974                           ;doprnt.c: 1253: {
   975                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
   976  000A08  C022  FFD9         	movff	sprintf@ap,fsr2l
   977  000A0C  C023  FFDA         	movff	sprintf@ap+1,fsr2h
   978  000A10  CFDE F027          	movff	postinc2,sprintf@val
   979  000A14  CFDD F028          	movff	postdec2,sprintf@val+1
   980  000A18  0E02               	movlw	2
   981  000A1A  2622               	addwf	sprintf@ap,f,c
   982  000A1C  0E00               	movlw	0
   983  000A1E  2223               	addwfc	sprintf@ap+1,f,c
   984                           
   985                           ;doprnt.c: 1261: if((int)val < 0) {
   986  000A20  AE28               	btfss	sprintf@val+1,7,c
   987  000A22  D006               	goto	l119
   988                           
   989                           ;doprnt.c: 1262: flag |= 0x03;
   990  000A24  0E03               	movlw	3
   991  000A26  1224               	iorwf	sprintf@flag,f,c
   992                           
   993                           ;doprnt.c: 1263: val = -val;
   994  000A28  6C27               	negf	sprintf@val,c
   995  000A2A  1E28               	comf	sprintf@val+1,f,c
   996  000A2C  B0D8               	btfsc	status,0,c
   997  000A2E  2A28               	incf	sprintf@val+1,f,c
   998  000A30                     l119:
   999                           
  1000                           ;doprnt.c: 1264: }
  1001                           ;doprnt.c: 1266: }
  1002                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1003  000A30  0E01               	movlw	1
  1004  000A32  6E2D               	movwf	sprintf@c,c
  1005  000A34                     l1315:
  1006  000A34  0E05               	movlw	5
  1007  000A36  182D               	xorwf	sprintf@c,w,c
  1008  000A38  B4D8               	btfsc	status,2,c
  1009  000A3A  D012               	goto	u810
  1010                           
  1011                           ;doprnt.c: 1306: if(val < dpowers[c])
  1012  000A3C  502D               	movf	sprintf@c,w,c
  1013  000A3E  0D02               	mullw	2
  1014  000A40  0E0D               	movlw	low _dpowers
  1015  000A42  24F3               	addwf	prodl,w,c
  1016  000A44  6EF6               	movwf	tblptrl,c
  1017  000A46  0E08               	movlw	high _dpowers
  1018  000A48  20F4               	addwfc	prodh,w,c
  1019  000A4A  6EF7               	movwf	tblptrh,c
  1020  000A4C                     	if	0	;There are less than 3 active tblptr bytes
  1021  000A4C                     	endif
  1022  000A4C  0009               	tblrd		*+
  1023  000A4E  50F5               	movf	tablat,w,c
  1024  000A50  5C27               	subwf	sprintf@val,w,c
  1025  000A52  0009               	tblrd		*+
  1026  000A54  50F5               	movf	tablat,w,c
  1027  000A56  5828               	subwfb	sprintf@val+1,w,c
  1028  000A58  A0D8               	btfss	status,0,c
  1029  000A5A  D002               	goto	u810
  1030                           
  1031                           ;doprnt.c: 1307: break;
  1032  000A5C  2A2D               	incf	sprintf@c,f,c
  1033  000A5E  D7EA               	goto	l1315
  1034  000A60                     u810:
  1035                           
  1036                           ;doprnt.c: 1345: if(width && flag & 0x03)
  1037  000A60  502B               	movf	sprintf@width,w,c
  1038  000A62  102C               	iorwf	sprintf@width+1,w,c
  1039  000A64  B4D8               	btfsc	status,2,c
  1040  000A66  D009               	goto	l123
  1041  000A68  C024  F01D         	movff	sprintf@flag,??_sprintf
  1042  000A6C  0E03               	movlw	3
  1043  000A6E  161D               	andwf	??_sprintf,f,c
  1044  000A70  B4D8               	btfsc	status,2,c
  1045  000A72  D003               	goto	l123
  1046                           
  1047                           ;doprnt.c: 1346: width--;
  1048  000A74  062B               	decf	sprintf@width,f,c
  1049  000A76  A0D8               	btfss	status,0,c
  1050  000A78  062C               	decf	sprintf@width+1,f,c
  1051  000A7A                     l123:
  1052                           
  1053                           ;doprnt.c: 1381: if(width > c)
  1054  000A7A  0E80               	movlw	128
  1055  000A7C  BE2D               	btfsc	sprintf@c,7,c
  1056  000A7E  0E7F               	movlw	127
  1057  000A80  6E1D               	movwf	??_sprintf& (0+255),c
  1058  000A82  502B               	movf	sprintf@width,w,c
  1059  000A84  5C2D               	subwf	sprintf@c,w,c
  1060  000A86  502C               	movf	sprintf@width+1,w,c
  1061  000A88  0A80               	xorlw	128
  1062  000A8A  581D               	subwfb	??_sprintf& (0+255),w,c
  1063  000A8C  B0D8               	btfsc	status,0,c
  1064  000A8E  D007               	goto	l124
  1065                           
  1066                           ;doprnt.c: 1382: width -= c;
  1067  000A90  502D               	movf	sprintf@c,w,c
  1068  000A92  5E2B               	subwf	sprintf@width,f,c
  1069  000A94  0E00               	movlw	0
  1070  000A96  BE2D               	btfsc	sprintf@c,7,c
  1071  000A98  0EFF               	movlw	255
  1072  000A9A  5A2C               	subwfb	sprintf@width+1,f,c
  1073  000A9C  D004               	goto	l125
  1074  000A9E                     l124:
  1075                           
  1076                           ;doprnt.c: 1383: else
  1077                           ;doprnt.c: 1384: width = 0;
  1078  000A9E  0E00               	movlw	0
  1079  000AA0  6E2C               	movwf	sprintf@width+1,c
  1080  000AA2  0E00               	movlw	0
  1081  000AA4  6E2B               	movwf	sprintf@width,c
  1082  000AA6                     l125:
  1083                           
  1084                           ;doprnt.c: 1422: {
  1085                           ;doprnt.c: 1424: if(width
  1086                           ;doprnt.c: 1428: )
  1087  000AA6  502B               	movf	sprintf@width,w,c
  1088  000AA8  102C               	iorwf	sprintf@width+1,w,c
  1089  000AAA  B4D8               	btfsc	status,2,c
  1090  000AAC  D00F               	goto	u860
  1091  000AAE                     u850:
  1092                           
  1093                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  1094                           
  1095                           ;doprnt.c: 1429: do
  1096  000AAE  C00D  FFD9         	movff	sprintf@sp,fsr2l
  1097  000AB2  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  1098  000AB6  0E20               	movlw	32
  1099  000AB8  6EDF               	movwf	indf2,c
  1100  000ABA  4A0D               	infsnz	sprintf@sp,f,c
  1101  000ABC  2A0E               	incf	sprintf@sp+1,f,c
  1102                           
  1103                           ;doprnt.c: 1431: while(--width);
  1104  000ABE  062B               	decf	sprintf@width,f,c
  1105  000AC0  A0D8               	btfss	status,0,c
  1106  000AC2  062C               	decf	sprintf@width+1,f,c
  1107  000AC4  502B               	movf	sprintf@width,w,c
  1108  000AC6  102C               	iorwf	sprintf@width+1,w,c
  1109  000AC8  A4D8               	btfss	status,2,c
  1110  000ACA  D7F1               	goto	u850
  1111  000ACC                     u860:
  1112                           
  1113                           ;doprnt.c: 1438: if(flag & 0x03)
  1114  000ACC  C024  F01D         	movff	sprintf@flag,??_sprintf
  1115  000AD0  0E03               	movlw	3
  1116  000AD2  161D               	andwf	??_sprintf,f,c
  1117  000AD4  B4D8               	btfsc	status,2,c
  1118  000AD6  D008               	goto	l129
  1119                           
  1120                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  1121  000AD8  C00D  FFD9         	movff	sprintf@sp,fsr2l
  1122  000ADC  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  1123  000AE0  0E2D               	movlw	45
  1124  000AE2  6EDF               	movwf	indf2,c
  1125  000AE4  4A0D               	infsnz	sprintf@sp,f,c
  1126  000AE6  2A0E               	incf	sprintf@sp+1,f,c
  1127  000AE8                     l129:
  1128                           
  1129                           ;doprnt.c: 1469: }
  1130                           ;doprnt.c: 1472: prec = c;
  1131  000AE8  C02D  F021         	movff	sprintf@c,sprintf@prec
  1132                           
  1133                           ;doprnt.c: 1474: while(prec--) {
  1134  000AEC  D029               	goto	l130
  1135  000AEE                     
  1136                           ;doprnt.c: 1478: {
  1137                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  1138  000AEE  5021               	movf	sprintf@prec,w,c
  1139  000AF0  0D02               	mullw	2
  1140  000AF2  0E0D               	movlw	low _dpowers
  1141  000AF4  24F3               	addwf	prodl,w,c
  1142  000AF6  6EF6               	movwf	tblptrl,c
  1143  000AF8  0E08               	movlw	high _dpowers
  1144  000AFA  20F4               	addwfc	prodh,w,c
  1145  000AFC  6EF7               	movwf	tblptrh,c
  1146  000AFE                     	if	0	;There are less than 3 active tblptr bytes
  1147  000AFE                     	endif
  1148  000AFE  0009               	tblrd		*+
  1149  000B00  CFF5 F003          	movff	tablat,___lwdiv@divisor
  1150  000B04  000A               	tblrd		*-
  1151  000B06  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
  1152  000B0A  C027  F001         	movff	sprintf@val,___lwdiv@dividend
  1153  000B0E  C028  F002         	movff	sprintf@val+1,___lwdiv@dividend+1
  1154  000B12  ECB9  F006         	call	___lwdiv	;wreg free
  1155  000B16  C001  F008         	movff	?___lwdiv,___lwmod@dividend
  1156  000B1A  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
  1157  000B1E  0E00               	movlw	0
  1158  000B20  6E0B               	movwf	___lwmod@divisor+1,c
  1159  000B22  0E0A               	movlw	10
  1160  000B24  6E0A               	movwf	___lwmod@divisor,c
  1161  000B26  EC04  F007         	call	___lwmod	;wreg free
  1162  000B2A  5008               	movf	?___lwmod,w,c
  1163  000B2C  0F30               	addlw	48
  1164  000B2E  6E2D               	movwf	sprintf@c,c
  1165                           
  1166                           ;doprnt.c: 1523: }
  1167                           ;doprnt.c: 1524: ((*sp++ = (c)));
  1168  000B30  C00D  FFD9         	movff	sprintf@sp,fsr2l
  1169  000B34  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  1170  000B38  C02D  FFDF         	movff	sprintf@c,indf2
  1171  000B3C  4A0D               	infsnz	sprintf@sp,f,c
  1172  000B3E  2A0E               	incf	sprintf@sp+1,f,c
  1173  000B40                     l130:
  1174  000B40  0621               	decf	sprintf@prec,f,c
  1175  000B42  2821               	incf	sprintf@prec,w,c
  1176  000B44  A4D8               	btfss	status,2,c
  1177  000B46  D7D3               	goto	l131
  1178  000B48                     u880:
  1179  000B48  C00F  FFF6         	movff	sprintf@f,tblptrl
  1180  000B4C  C010  FFF7         	movff	sprintf@f+1,tblptrh
  1181  000B50  4A0F               	infsnz	sprintf@f,f,c
  1182  000B52  2A10               	incf	sprintf@f+1,f,c
  1183  000B54                     	if	0	;tblptru may be non-zero
  1184  000B54                     	endif
  1185  000B54                     	if	0	;tblptru may be non-zero
  1186  000B54                     	endif
  1187  000B54  0008               	tblrd		*
  1188  000B56  CFF5 F02D          	movff	tablat,sprintf@c
  1189  000B5A  502D               	movf	sprintf@c,w,c
  1190  000B5C  A4D8               	btfss	status,2,c
  1191  000B5E  D68A               	goto	l94
  1192  000B60                     u890:
  1193                           
  1194                           ;doprnt.c: 1538: *sp = 0;
  1195                           
  1196                           ;doprnt.c: 1525: }
  1197                           ;doprnt.c: 1533: }
  1198                           ;doprnt.c: 1535: alldone:
  1199  000B60  C00D  FFD9         	movff	sprintf@sp,fsr2l
  1200  000B64  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  1201  000B68  0E00               	movlw	0
  1202  000B6A  6EDF               	movwf	indf2,c
  1203  000B6C  0012               	return	
  1204  000B6E                     __end_of_sprintf:
  1205                           	opt stack 0
  1206                           tblptru	equ	0xFF8
  1207                           tblptrh	equ	0xFF7
  1208                           tblptrl	equ	0xFF6
  1209                           tablat	equ	0xFF5
  1210                           prodh	equ	0xFF4
  1211                           prodl	equ	0xFF3
  1212                           postinc0	equ	0xFEE
  1213                           wreg	equ	0xFE8
  1214                           indf2	equ	0xFDF
  1215                           postinc2	equ	0xFDE
  1216                           postdec2	equ	0xFDD
  1217                           fsr2h	equ	0xFDA
  1218                           fsr2l	equ	0xFD9
  1219                           status	equ	0xFD8
  1220                           
  1221 ;; *************** function _isdigit *****************
  1222 ;; Defined at:
  1223 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  1224 ;; Parameters:    Size  Location     Type
  1225 ;;  c               1    wreg     unsigned char 
  1226 ;; Auto vars:     Size  Location     Type
  1227 ;;  c               1    2[COMRAM] unsigned char 
  1228 ;; Return value:  Size  Location     Type
  1229 ;;		None               void
  1230 ;; Registers used:
  1231 ;;		wreg, status,2, status,0
  1232 ;; Tracked objects:
  1233 ;;		On entry : 0/0
  1234 ;;		On exit  : 0/0
  1235 ;;		Unchanged: 0/0
  1236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1237 ;;      Params:         0       0       0       0       0       0       0       0       0
  1238 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1239 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1240 ;;      Totals:         3       0       0       0       0       0       0       0       0
  1241 ;;Total ram usage:        3 bytes
  1242 ;; Hardware stack levels used:    1
  1243 ;; This function calls:
  1244 ;;		Nothing
  1245 ;; This function is called by:
  1246 ;;		_sprintf
  1247 ;; This function uses a non-reentrant model
  1248 ;;
  1249                           
  1250                           	psect	text3
  1251  000EEC                     __ptext3:
  1252                           	opt stack 0
  1253  000EEC                     _isdigit:
  1254                           	opt stack 28
  1255                           
  1256                           ;incstack = 0
  1257                           ;isdigit@c stored from wreg
  1258  000EEC  6E03               	movwf	isdigit@c,c
  1259  000EEE  0E00               	movlw	0
  1260  000EF0  6E02               	movwf	_isdigit$426,c
  1261  000EF2  0E3A               	movlw	58
  1262  000EF4  6003               	cpfslt	isdigit@c,c
  1263  000EF6  D005               	goto	l464
  1264  000EF8  0E2F               	movlw	47
  1265  000EFA  6403               	cpfsgt	isdigit@c,c
  1266  000EFC  D002               	goto	l464
  1267  000EFE  0E01               	movlw	1
  1268  000F00  6E02               	movwf	_isdigit$426,c
  1269  000F02                     l464:
  1270  000F02  C002  F001         	movff	_isdigit$426,??_isdigit
  1271  000F06  3001               	rrcf	??_isdigit,w,c
  1272  000F08  0012               	return	
  1273  000F0A                     __end_of_isdigit:
  1274                           	opt stack 0
  1275                           tblptru	equ	0xFF8
  1276                           tblptrh	equ	0xFF7
  1277                           tblptrl	equ	0xFF6
  1278                           tablat	equ	0xFF5
  1279                           prodh	equ	0xFF4
  1280                           prodl	equ	0xFF3
  1281                           postinc0	equ	0xFEE
  1282                           wreg	equ	0xFE8
  1283                           indf2	equ	0xFDF
  1284                           postinc2	equ	0xFDE
  1285                           postdec2	equ	0xFDD
  1286                           fsr2h	equ	0xFDA
  1287                           fsr2l	equ	0xFD9
  1288                           status	equ	0xFD8
  1289                           
  1290 ;; *************** function ___wmul *****************
  1291 ;; Defined at:
  1292 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  1293 ;; Parameters:    Size  Location     Type
  1294 ;;  multiplier      2    0[COMRAM] unsigned int 
  1295 ;;  multiplicand    2    2[COMRAM] unsigned int 
  1296 ;; Auto vars:     Size  Location     Type
  1297 ;;  product         2    4[COMRAM] unsigned int 
  1298 ;; Return value:  Size  Location     Type
  1299 ;;                  2    0[COMRAM] unsigned int 
  1300 ;; Registers used:
  1301 ;;		wreg, status,2, status,0, prodl, prodh
  1302 ;; Tracked objects:
  1303 ;;		On entry : 0/0
  1304 ;;		On exit  : 0/0
  1305 ;;		Unchanged: 0/0
  1306 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1307 ;;      Params:         4       0       0       0       0       0       0       0       0
  1308 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1309 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1310 ;;      Totals:         6       0       0       0       0       0       0       0       0
  1311 ;;Total ram usage:        6 bytes
  1312 ;; Hardware stack levels used:    1
  1313 ;; This function calls:
  1314 ;;		Nothing
  1315 ;; This function is called by:
  1316 ;;		_sprintf
  1317 ;; This function uses a non-reentrant model
  1318 ;;
  1319                           
  1320                           	psect	text4
  1321  000EA6                     __ptext4:
  1322                           	opt stack 0
  1323  000EA6                     ___wmul:
  1324                           	opt stack 28
  1325                           
  1326                           ;incstack = 0
  1327  000EA6  5001               	movf	___wmul@multiplier,w,c
  1328  000EA8  0203               	mulwf	___wmul@multiplicand,c
  1329  000EAA  CFF3 F005          	movff	prodl,___wmul@product
  1330  000EAE  CFF4 F006          	movff	prodh,___wmul@product+1
  1331  000EB2  5001               	movf	___wmul@multiplier,w,c
  1332  000EB4  0204               	mulwf	___wmul@multiplicand+1,c
  1333  000EB6  50F3               	movf	prodl,w,c
  1334  000EB8  2606               	addwf	___wmul@product+1,f,c
  1335  000EBA  5002               	movf	___wmul@multiplier+1,w,c
  1336  000EBC  0203               	mulwf	___wmul@multiplicand,c
  1337  000EBE  50F3               	movf	prodl,w,c
  1338  000EC0  2606               	addwf	___wmul@product+1,f,c
  1339  000EC2  C005  F001         	movff	___wmul@product,?___wmul
  1340  000EC6  C006  F002         	movff	___wmul@product+1,?___wmul+1
  1341  000ECA  0012               	return	
  1342  000ECC                     __end_of___wmul:
  1343                           	opt stack 0
  1344                           tblptru	equ	0xFF8
  1345                           tblptrh	equ	0xFF7
  1346                           tblptrl	equ	0xFF6
  1347                           tablat	equ	0xFF5
  1348                           prodh	equ	0xFF4
  1349                           prodl	equ	0xFF3
  1350                           postinc0	equ	0xFEE
  1351                           wreg	equ	0xFE8
  1352                           indf2	equ	0xFDF
  1353                           postinc2	equ	0xFDE
  1354                           postdec2	equ	0xFDD
  1355                           fsr2h	equ	0xFDA
  1356                           fsr2l	equ	0xFD9
  1357                           status	equ	0xFD8
  1358                           
  1359 ;; *************** function ___lwmod *****************
  1360 ;; Defined at:
  1361 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
  1362 ;; Parameters:    Size  Location     Type
  1363 ;;  dividend        2    7[COMRAM] unsigned int 
  1364 ;;  divisor         2    9[COMRAM] unsigned int 
  1365 ;; Auto vars:     Size  Location     Type
  1366 ;;  counter         1   11[COMRAM] unsigned char 
  1367 ;; Return value:  Size  Location     Type
  1368 ;;                  2    7[COMRAM] unsigned int 
  1369 ;; Registers used:
  1370 ;;		wreg, status,2, status,0
  1371 ;; Tracked objects:
  1372 ;;		On entry : 0/0
  1373 ;;		On exit  : 0/0
  1374 ;;		Unchanged: 0/0
  1375 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1376 ;;      Params:         4       0       0       0       0       0       0       0       0
  1377 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1378 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1379 ;;      Totals:         5       0       0       0       0       0       0       0       0
  1380 ;;Total ram usage:        5 bytes
  1381 ;; Hardware stack levels used:    1
  1382 ;; This function calls:
  1383 ;;		Nothing
  1384 ;; This function is called by:
  1385 ;;		_sprintf
  1386 ;; This function uses a non-reentrant model
  1387 ;;
  1388                           
  1389                           	psect	text5
  1390  000E08                     __ptext5:
  1391                           	opt stack 0
  1392  000E08                     ___lwmod:
  1393                           	opt stack 28
  1394                           
  1395                           ;incstack = 0
  1396  000E08  500A               	movf	___lwmod@divisor,w,c
  1397  000E0A  100B               	iorwf	___lwmod@divisor+1,w,c
  1398  000E0C  B4D8               	btfsc	status,2,c
  1399  000E0E  D018               	goto	l558
  1400  000E10  0E01               	movlw	1
  1401  000E12  6E0C               	movwf	___lwmod@counter,c
  1402  000E14  D004               	goto	l553
  1403  000E16  90D8               	bcf	status,0,c
  1404  000E18  360A               	rlcf	___lwmod@divisor,f,c
  1405  000E1A  360B               	rlcf	___lwmod@divisor+1,f,c
  1406  000E1C  2A0C               	incf	___lwmod@counter,f,c
  1407  000E1E                     l553:
  1408  000E1E  AE0B               	btfss	___lwmod@divisor+1,7,c
  1409  000E20  D7FA               	goto	l554
  1410  000E22                     u610:
  1411  000E22  500A               	movf	___lwmod@divisor,w,c
  1412  000E24  5C08               	subwf	___lwmod@dividend,w,c
  1413  000E26  500B               	movf	___lwmod@divisor+1,w,c
  1414  000E28  5809               	subwfb	___lwmod@dividend+1,w,c
  1415  000E2A  A0D8               	btfss	status,0,c
  1416  000E2C  D004               	goto	l557
  1417  000E2E  500A               	movf	___lwmod@divisor,w,c
  1418  000E30  5E08               	subwf	___lwmod@dividend,f,c
  1419  000E32  500B               	movf	___lwmod@divisor+1,w,c
  1420  000E34  5A09               	subwfb	___lwmod@dividend+1,f,c
  1421  000E36                     l557:
  1422  000E36  90D8               	bcf	status,0,c
  1423  000E38  320B               	rrcf	___lwmod@divisor+1,f,c
  1424  000E3A  320A               	rrcf	___lwmod@divisor,f,c
  1425  000E3C  2E0C               	decfsz	___lwmod@counter,f,c
  1426  000E3E  D7F1               	goto	u610
  1427  000E40                     l558:
  1428  000E40  C008  F008         	movff	___lwmod@dividend,?___lwmod
  1429  000E44  C009  F009         	movff	___lwmod@dividend+1,?___lwmod+1
  1430  000E48  0012               	return		;funcret
  1431  000E4A                     __end_of___lwmod:
  1432                           	opt stack 0
  1433                           tblptru	equ	0xFF8
  1434                           tblptrh	equ	0xFF7
  1435                           tblptrl	equ	0xFF6
  1436                           tablat	equ	0xFF5
  1437                           prodh	equ	0xFF4
  1438                           prodl	equ	0xFF3
  1439                           postinc0	equ	0xFEE
  1440                           wreg	equ	0xFE8
  1441                           indf2	equ	0xFDF
  1442                           postinc2	equ	0xFDE
  1443                           postdec2	equ	0xFDD
  1444                           fsr2h	equ	0xFDA
  1445                           fsr2l	equ	0xFD9
  1446                           status	equ	0xFD8
  1447                           
  1448 ;; *************** function ___lwdiv *****************
  1449 ;; Defined at:
  1450 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
  1451 ;; Parameters:    Size  Location     Type
  1452 ;;  dividend        2    0[COMRAM] unsigned int 
  1453 ;;  divisor         2    2[COMRAM] unsigned int 
  1454 ;; Auto vars:     Size  Location     Type
  1455 ;;  quotient        2    4[COMRAM] unsigned int 
  1456 ;;  counter         1    6[COMRAM] unsigned char 
  1457 ;; Return value:  Size  Location     Type
  1458 ;;                  2    0[COMRAM] unsigned int 
  1459 ;; Registers used:
  1460 ;;		wreg, status,2, status,0
  1461 ;; Tracked objects:
  1462 ;;		On entry : 0/0
  1463 ;;		On exit  : 0/0
  1464 ;;		Unchanged: 0/0
  1465 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1466 ;;      Params:         4       0       0       0       0       0       0       0       0
  1467 ;;      Locals:         3       0       0       0       0       0       0       0       0
  1468 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1469 ;;      Totals:         7       0       0       0       0       0       0       0       0
  1470 ;;Total ram usage:        7 bytes
  1471 ;; Hardware stack levels used:    1
  1472 ;; This function calls:
  1473 ;;		Nothing
  1474 ;; This function is called by:
  1475 ;;		_sprintf
  1476 ;; This function uses a non-reentrant model
  1477 ;;
  1478                           
  1479                           	psect	text6
  1480  000D72                     __ptext6:
  1481                           	opt stack 0
  1482  000D72                     ___lwdiv:
  1483                           	opt stack 28
  1484                           
  1485                           ;incstack = 0
  1486  000D72  0E00               	movlw	0
  1487  000D74  6E06               	movwf	___lwdiv@quotient+1,c
  1488  000D76  0E00               	movlw	0
  1489  000D78  6E05               	movwf	___lwdiv@quotient,c
  1490  000D7A  5003               	movf	___lwdiv@divisor,w,c
  1491  000D7C  1004               	iorwf	___lwdiv@divisor+1,w,c
  1492  000D7E  B4D8               	btfsc	status,2,c
  1493  000D80  D01C               	goto	l548
  1494  000D82  0E01               	movlw	1
  1495  000D84  6E07               	movwf	___lwdiv@counter,c
  1496  000D86  D004               	goto	l543
  1497  000D88  90D8               	bcf	status,0,c
  1498  000D8A  3603               	rlcf	___lwdiv@divisor,f,c
  1499  000D8C  3604               	rlcf	___lwdiv@divisor+1,f,c
  1500  000D8E  2A07               	incf	___lwdiv@counter,f,c
  1501  000D90                     l543:
  1502  000D90  AE04               	btfss	___lwdiv@divisor+1,7,c
  1503  000D92  D7FA               	goto	l544
  1504  000D94                     u580:
  1505  000D94  90D8               	bcf	status,0,c
  1506  000D96  3605               	rlcf	___lwdiv@quotient,f,c
  1507  000D98  3606               	rlcf	___lwdiv@quotient+1,f,c
  1508  000D9A  5003               	movf	___lwdiv@divisor,w,c
  1509  000D9C  5C01               	subwf	___lwdiv@dividend,w,c
  1510  000D9E  5004               	movf	___lwdiv@divisor+1,w,c
  1511  000DA0  5802               	subwfb	___lwdiv@dividend+1,w,c
  1512  000DA2  A0D8               	btfss	status,0,c
  1513  000DA4  D005               	goto	l547
  1514  000DA6  5003               	movf	___lwdiv@divisor,w,c
  1515  000DA8  5E01               	subwf	___lwdiv@dividend,f,c
  1516  000DAA  5004               	movf	___lwdiv@divisor+1,w,c
  1517  000DAC  5A02               	subwfb	___lwdiv@dividend+1,f,c
  1518  000DAE  8005               	bsf	___lwdiv@quotient,0,c
  1519  000DB0                     l547:
  1520  000DB0  90D8               	bcf	status,0,c
  1521  000DB2  3204               	rrcf	___lwdiv@divisor+1,f,c
  1522  000DB4  3203               	rrcf	___lwdiv@divisor,f,c
  1523  000DB6  2E07               	decfsz	___lwdiv@counter,f,c
  1524  000DB8  D7ED               	goto	u580
  1525  000DBA                     l548:
  1526  000DBA  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  1527  000DBE  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1528  000DC2  0012               	return		;funcret
  1529  000DC4                     __end_of___lwdiv:
  1530                           	opt stack 0
  1531                           tblptru	equ	0xFF8
  1532                           tblptrh	equ	0xFF7
  1533                           tblptrl	equ	0xFF6
  1534                           tablat	equ	0xFF5
  1535                           prodh	equ	0xFF4
  1536                           prodl	equ	0xFF3
  1537                           postinc0	equ	0xFEE
  1538                           wreg	equ	0xFE8
  1539                           indf2	equ	0xFDF
  1540                           postinc2	equ	0xFDE
  1541                           postdec2	equ	0xFDD
  1542                           fsr2h	equ	0xFDA
  1543                           fsr2l	equ	0xFD9
  1544                           status	equ	0xFD8
  1545                           
  1546 ;; *************** function _lcd_gotoxy *****************
  1547 ;; Defined at:
  1548 ;;		line 43 in file "lcd.c"
  1549 ;; Parameters:    Size  Location     Type
  1550 ;;  x               1    wreg     unsigned char 
  1551 ;;  y               1    5[COMRAM] unsigned char 
  1552 ;; Auto vars:     Size  Location     Type
  1553 ;;  x               1    6[COMRAM] unsigned char 
  1554 ;;  dir             1    9[COMRAM] unsigned char 
  1555 ;; Return value:  Size  Location     Type
  1556 ;;                  1    wreg      void 
  1557 ;; Registers used:
  1558 ;;		wreg, status,2, status,0, cstack
  1559 ;; Tracked objects:
  1560 ;;		On entry : 0/0
  1561 ;;		On exit  : 0/0
  1562 ;;		Unchanged: 0/0
  1563 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1564 ;;      Params:         1       0       0       0       0       0       0       0       0
  1565 ;;      Locals:         4       0       0       0       0       0       0       0       0
  1566 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1567 ;;      Totals:         5       0       0       0       0       0       0       0       0
  1568 ;;Total ram usage:        5 bytes
  1569 ;; Hardware stack levels used:    1
  1570 ;; Hardware stack levels required when called:    2
  1571 ;; This function calls:
  1572 ;;		_send_byte
  1573 ;; This function is called by:
  1574 ;;		_show_data
  1575 ;; This function uses a non-reentrant model
  1576 ;;
  1577                           
  1578                           	psect	text7
  1579  000E4A                     __ptext7:
  1580                           	opt stack 0
  1581  000E4A                     _lcd_gotoxy:
  1582                           	opt stack 27
  1583                           
  1584                           ;incstack = 0
  1585                           ;lcd_gotoxy@x stored from wreg
  1586  000E4A  6E07               	movwf	lcd_gotoxy@x,c
  1587                           
  1588                           ;lcd.c: 44: byte dir = y!=1? 0x40:0;
  1589  000E4C  0406               	decf	lcd_gotoxy@y,w,c
  1590  000E4E  A4D8               	btfss	status,2,c
  1591  000E50  D004               	goto	l33
  1592  000E52  0E00               	movlw	0
  1593  000E54  6E09               	movwf	_lcd_gotoxy$134+1,c
  1594  000E56  0E00               	movlw	0
  1595  000E58  D003               	goto	L1
  1596  000E5A                     l33:
  1597  000E5A  0E00               	movlw	0
  1598  000E5C  6E09               	movwf	_lcd_gotoxy$134+1,c
  1599  000E5E  0E40               	movlw	64
  1600  000E60                     L1:
  1601  000E60  6E08               	movwf	_lcd_gotoxy$134,c
  1602  000E62  C008  F00A         	movff	_lcd_gotoxy$134,lcd_gotoxy@dir
  1603                           
  1604                           ;lcd.c: 45: dir += x-1;
  1605  000E66  0407               	decf	lcd_gotoxy@x,w,c
  1606  000E68  260A               	addwf	lcd_gotoxy@dir,f,c
  1607                           
  1608                           ;lcd.c: 46: send_byte(0,0x80|dir);
  1609  000E6A  500A               	movf	lcd_gotoxy@dir,w,c
  1610  000E6C  0980               	iorlw	128
  1611  000E6E  6E04               	movwf	send_byte@data,c
  1612  000E70  0E00               	movlw	0
  1613  000E72  EC93  F007         	call	_send_byte
  1614  000E76  0012               	return		;funcret
  1615  000E78                     __end_of_lcd_gotoxy:
  1616                           	opt stack 0
  1617                           tblptru	equ	0xFF8
  1618                           tblptrh	equ	0xFF7
  1619                           tblptrl	equ	0xFF6
  1620                           tablat	equ	0xFF5
  1621                           prodh	equ	0xFF4
  1622                           prodl	equ	0xFF3
  1623                           postinc0	equ	0xFEE
  1624                           wreg	equ	0xFE8
  1625                           indf2	equ	0xFDF
  1626                           postinc2	equ	0xFDE
  1627                           postdec2	equ	0xFDD
  1628                           fsr2h	equ	0xFDA
  1629                           fsr2l	equ	0xFD9
  1630                           status	equ	0xFD8
  1631                           
  1632 ;; *************** function _increment_seg *****************
  1633 ;; Defined at:
  1634 ;;		line 34 in file "main.c"
  1635 ;; Parameters:    Size  Location     Type
  1636 ;;		None
  1637 ;; Auto vars:     Size  Location     Type
  1638 ;;		None
  1639 ;; Return value:  Size  Location     Type
  1640 ;;                  1    wreg      void 
  1641 ;; Registers used:
  1642 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1643 ;; Tracked objects:
  1644 ;;		On entry : 0/0
  1645 ;;		On exit  : 0/0
  1646 ;;		Unchanged: 0/0
  1647 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1648 ;;      Params:         0       0       0       0       0       0       0       0       0
  1649 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1650 ;;      Temps:          4       0       0       0       0       0       0       0       0
  1651 ;;      Totals:         6       0       0       0       0       0       0       0       0
  1652 ;;Total ram usage:        6 bytes
  1653 ;; Hardware stack levels used:    1
  1654 ;; Hardware stack levels required when called:    1
  1655 ;; This function calls:
  1656 ;;		_LeapYear
  1657 ;; This function is called by:
  1658 ;;		_show_data
  1659 ;;		_main
  1660 ;; This function uses a non-reentrant model
  1661 ;;
  1662                           
  1663                           	psect	text8
  1664  000CCA                     __ptext8:
  1665                           	opt stack 0
  1666  000CCA                     _increment_seg:
  1667                           	opt stack 28
  1668                           
  1669                           ;main.c: 35: if(Gtime.seg++>=59){
  1670                           
  1671                           ;incstack = 0
  1672  000CCA  2A35               	incf	_Gtime,f,c
  1673  000CCC  0435               	decf	_Gtime,w,c
  1674  000CCE  6E05               	movwf	??_increment_seg& (0+255),c
  1675  000CD0  0E3A               	movlw	58
  1676  000CD2  6405               	cpfsgt	??_increment_seg,c
  1677  000CD4  0012               	return	
  1678                           
  1679                           ;main.c: 36: Gtime.seg=0;
  1680  000CD6  0E00               	movlw	0
  1681  000CD8  6E35               	movwf	_Gtime,c
  1682                           
  1683                           ;main.c: 37: if(++Gtime.min>59){
  1684  000CDA  2A36               	incf	_Gtime+1,f,c
  1685  000CDC  0E3B               	movlw	59
  1686  000CDE  6436               	cpfsgt	_Gtime+1,c
  1687  000CE0  0012               	return	
  1688                           
  1689                           ;main.c: 38: Gtime.min=0;
  1690  000CE2  0E00               	movlw	0
  1691  000CE4  6E36               	movwf	_Gtime+1,c
  1692                           
  1693                           ;main.c: 39: if(++Gtime.hour>23){
  1694  000CE6  2A37               	incf	_Gtime+2,f,c
  1695  000CE8  0E17               	movlw	23
  1696  000CEA  6437               	cpfsgt	_Gtime+2,c
  1697  000CEC  0012               	return	
  1698                           
  1699                           ;main.c: 40: Gtime.hour=0;
  1700  000CEE  0E00               	movlw	0
  1701  000CF0  6E37               	movwf	_Gtime+2,c
  1702                           
  1703                           ;main.c: 41: if(++Gtime.day>(Gtime.month!=2? monthdays[Gtime.month-1] :28 + LeapYear(Gti
      +                          me.year))){
  1704  000CF2  0E02               	movlw	2
  1705  000CF4  1839               	xorwf	_Gtime+4,w,c
  1706  000CF6  A4D8               	btfss	status,2,c
  1707  000CF8  D00E               	goto	l65
  1708  000CFA  C03A  F001         	movff	_Gtime+5,LeapYear@year
  1709  000CFE  C03B  F002         	movff	_Gtime+6,LeapYear@year+1
  1710  000D02  EC85  F007         	call	_LeapYear	;wreg free
  1711  000D06  6E05               	movwf	??_increment_seg& (0+255),c
  1712  000D08  0E1C               	movlw	28
  1713  000D0A  2405               	addwf	??_increment_seg,w,c
  1714  000D0C  6E09               	movwf	_increment_seg$165,c
  1715  000D0E  6A0A               	clrf	_increment_seg$165+1,c
  1716  000D10  0E00               	movlw	0
  1717  000D12  220A               	addwfc	_increment_seg$165+1,f,c
  1718  000D14  D015               	goto	l67
  1719  000D16                     l65:
  1720  000D16  0EFF               	movlw	255
  1721  000D18  6E05               	movwf	??_increment_seg& (0+255),c
  1722  000D1A  0EFF               	movlw	255
  1723  000D1C  6E06               	movwf	(??_increment_seg+1)& (0+255),c
  1724  000D1E  5039               	movf	_Gtime+4,w,c
  1725  000D20  6E07               	movwf	(??_increment_seg+2)& (0+255),c
  1726  000D22  6A08               	clrf	(??_increment_seg+3)& (0+255),c
  1727  000D24  5005               	movf	??_increment_seg,w,c
  1728  000D26  2607               	addwf	??_increment_seg+2,f,c
  1729  000D28  5006               	movf	??_increment_seg+1,w,c
  1730  000D2A  2208               	addwfc	??_increment_seg+3,f,c
  1731  000D2C  0E01               	movlw	low _monthdays
  1732  000D2E  2407               	addwf	??_increment_seg+2,w,c
  1733  000D30  6EF6               	movwf	tblptrl,c
  1734  000D32  0E08               	movlw	high _monthdays
  1735  000D34  2008               	addwfc	??_increment_seg+3,w,c
  1736  000D36  6EF7               	movwf	tblptrh,c
  1737  000D38                     	if	0	;There are less than 3 active tblptr bytes
  1738  000D38                     	endif
  1739  000D38  0008               	tblrd		*
  1740  000D3A  50F5               	movf	tablat,w,c
  1741  000D3C  6E09               	movwf	_increment_seg$165,c
  1742  000D3E  6A0A               	clrf	_increment_seg$165+1,c
  1743  000D40                     l67:
  1744  000D40  2A38               	incf	_Gtime+3,f,c
  1745  000D42  5038               	movf	_Gtime+3,w,c
  1746  000D44  6E05               	movwf	??_increment_seg& (0+255),c
  1747  000D46  6A06               	clrf	(??_increment_seg+1)& (0+255),c
  1748  000D48  5005               	movf	??_increment_seg,w,c
  1749  000D4A  5C09               	subwf	_increment_seg$165,w,c
  1750  000D4C  500A               	movf	_increment_seg$165+1,w,c
  1751  000D4E  0A80               	xorlw	128
  1752  000D50  6E07               	movwf	(??_increment_seg+2)& (0+255),c
  1753  000D52  5006               	movf	??_increment_seg+1,w,c
  1754  000D54  0A80               	xorlw	128
  1755  000D56  5807               	subwfb	(??_increment_seg+2)& (0+255),w,c
  1756  000D58  B0D8               	btfsc	status,0,c
  1757  000D5A  0012               	return	
  1758                           
  1759                           ;main.c: 42: Gtime.day=1;
  1760  000D5C  0E01               	movlw	1
  1761  000D5E  6E38               	movwf	_Gtime+3,c
  1762                           
  1763                           ;main.c: 43: if(++Gtime.month>12){
  1764  000D60  2A39               	incf	_Gtime+4,f,c
  1765  000D62  0E0C               	movlw	12
  1766  000D64  6439               	cpfsgt	_Gtime+4,c
  1767  000D66  0012               	return	
  1768                           
  1769                           ;main.c: 44: Gtime.month=1;
  1770  000D68  0E01               	movlw	1
  1771  000D6A  6E39               	movwf	_Gtime+4,c
  1772                           
  1773                           ;main.c: 45: ++Gtime.year;
  1774  000D6C  4A3A               	infsnz	_Gtime+5,f,c
  1775  000D6E  2A3B               	incf	_Gtime+6,f,c
  1776  000D70  0012               	return	
  1777  000D72                     __end_of_increment_seg:
  1778                           	opt stack 0
  1779                           tblptru	equ	0xFF8
  1780                           tblptrh	equ	0xFF7
  1781                           tblptrl	equ	0xFF6
  1782                           tablat	equ	0xFF5
  1783                           prodh	equ	0xFF4
  1784                           prodl	equ	0xFF3
  1785                           postinc0	equ	0xFEE
  1786                           wreg	equ	0xFE8
  1787                           indf2	equ	0xFDF
  1788                           postinc2	equ	0xFDE
  1789                           postdec2	equ	0xFDD
  1790                           fsr2h	equ	0xFDA
  1791                           fsr2l	equ	0xFD9
  1792                           status	equ	0xFD8
  1793                           
  1794 ;; *************** function _LeapYear *****************
  1795 ;; Defined at:
  1796 ;;		line 22 in file "main.c"
  1797 ;; Parameters:    Size  Location     Type
  1798 ;;  year            2    0[COMRAM] int 
  1799 ;; Auto vars:     Size  Location     Type
  1800 ;;		None
  1801 ;; Return value:  Size  Location     Type
  1802 ;;                  1    wreg      unsigned char 
  1803 ;; Registers used:
  1804 ;;		wreg, status,2, status,0
  1805 ;; Tracked objects:
  1806 ;;		On entry : 0/0
  1807 ;;		On exit  : 0/0
  1808 ;;		Unchanged: 0/0
  1809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1810 ;;      Params:         2       0       0       0       0       0       0       0       0
  1811 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1812 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1813 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1814 ;;Total ram usage:        4 bytes
  1815 ;; Hardware stack levels used:    1
  1816 ;; This function calls:
  1817 ;;		Nothing
  1818 ;; This function is called by:
  1819 ;;		_increment_seg
  1820 ;; This function uses a non-reentrant model
  1821 ;;
  1822                           
  1823                           	psect	text9
  1824  000F0A                     __ptext9:
  1825                           	opt stack 0
  1826  000F0A                     _LeapYear:
  1827                           	opt stack 28
  1828                           
  1829                           ;main.c: 23: return year%4? 1:0;
  1830                           
  1831                           ;incstack = 0
  1832  000F0A  0E03               	movlw	3
  1833  000F0C  1401               	andwf	LeapYear@year,w,c
  1834  000F0E  6E03               	movwf	??_LeapYear& (0+255),c
  1835  000F10  0E00               	movlw	0
  1836  000F12  1402               	andwf	LeapYear@year+1,w,c
  1837  000F14  6E04               	movwf	(??_LeapYear+1)& (0+255),c
  1838  000F16  5003               	movf	??_LeapYear,w,c
  1839  000F18  1004               	iorwf	??_LeapYear+1,w,c
  1840  000F1A  B4D8               	btfsc	status,2,c
  1841  000F1C  D002               	goto	u530
  1842  000F1E  0E01               	movlw	1
  1843  000F20  0012               	return	
  1844  000F22                     u530:
  1845  000F22  0E00               	movlw	0
  1846  000F24  0012               	return	
  1847  000F26                     __end_of_LeapYear:
  1848                           	opt stack 0
  1849                           tblptru	equ	0xFF8
  1850                           tblptrh	equ	0xFF7
  1851                           tblptrl	equ	0xFF6
  1852                           tablat	equ	0xFF5
  1853                           prodh	equ	0xFF4
  1854                           prodl	equ	0xFF3
  1855                           postinc0	equ	0xFEE
  1856                           wreg	equ	0xFE8
  1857                           indf2	equ	0xFDF
  1858                           postinc2	equ	0xFDE
  1859                           postdec2	equ	0xFDD
  1860                           fsr2h	equ	0xFDA
  1861                           fsr2l	equ	0xFD9
  1862                           status	equ	0xFD8
  1863                           
  1864 ;; *************** function _set_time *****************
  1865 ;; Defined at:
  1866 ;;		line 25 in file "main.c"
  1867 ;; Parameters:    Size  Location     Type
  1868 ;;  s               1    wreg     unsigned char 
  1869 ;;  m               1    0[COMRAM] unsigned char 
  1870 ;;  h               1    1[COMRAM] unsigned char 
  1871 ;;  d               1    2[COMRAM] unsigned char 
  1872 ;;  mo              1    3[COMRAM] unsigned char 
  1873 ;;  y               2    4[COMRAM] int 
  1874 ;; Auto vars:     Size  Location     Type
  1875 ;;  s               1    6[COMRAM] unsigned char 
  1876 ;; Return value:  Size  Location     Type
  1877 ;;                  1    wreg      void 
  1878 ;; Registers used:
  1879 ;;		wreg
  1880 ;; Tracked objects:
  1881 ;;		On entry : 0/0
  1882 ;;		On exit  : 0/0
  1883 ;;		Unchanged: 0/0
  1884 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1885 ;;      Params:         6       0       0       0       0       0       0       0       0
  1886 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1887 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1888 ;;      Totals:         7       0       0       0       0       0       0       0       0
  1889 ;;Total ram usage:        7 bytes
  1890 ;; Hardware stack levels used:    1
  1891 ;; This function calls:
  1892 ;;		Nothing
  1893 ;; This function is called by:
  1894 ;;		_main
  1895 ;; This function uses a non-reentrant model
  1896 ;;
  1897                           
  1898                           	psect	text10
  1899  000ECC                     __ptext10:
  1900                           	opt stack 0
  1901  000ECC                     _set_time:
  1902                           	opt stack 30
  1903                           
  1904                           ;incstack = 0
  1905                           ;set_time@s stored from wreg
  1906  000ECC  6E07               	movwf	set_time@s,c
  1907                           
  1908                           ;main.c: 27: Gtime.seg = s;
  1909  000ECE  C007  F035         	movff	set_time@s,_Gtime
  1910                           
  1911                           ;main.c: 28: Gtime.min = m;
  1912  000ED2  C001  F036         	movff	set_time@m,_Gtime+1
  1913                           
  1914                           ;main.c: 29: Gtime.hour = h;
  1915  000ED6  C002  F037         	movff	set_time@h,_Gtime+2
  1916                           
  1917                           ;main.c: 30: Gtime.day = d;
  1918  000EDA  C003  F038         	movff	set_time@d,_Gtime+3
  1919                           
  1920                           ;main.c: 31: Gtime.month = mo;
  1921  000EDE  C004  F039         	movff	set_time@mo,_Gtime+4
  1922                           
  1923                           ;main.c: 32: Gtime.year = y;
  1924  000EE2  C005  F03A         	movff	set_time@y,_Gtime+5
  1925  000EE6  C006  F03B         	movff	set_time@y+1,_Gtime+6
  1926  000EEA  0012               	return		;funcret
  1927  000EEC                     __end_of_set_time:
  1928                           	opt stack 0
  1929                           tblptru	equ	0xFF8
  1930                           tblptrh	equ	0xFF7
  1931                           tblptrl	equ	0xFF6
  1932                           tablat	equ	0xFF5
  1933                           prodh	equ	0xFF4
  1934                           prodl	equ	0xFF3
  1935                           postinc0	equ	0xFEE
  1936                           wreg	equ	0xFE8
  1937                           indf2	equ	0xFDF
  1938                           postinc2	equ	0xFDE
  1939                           postdec2	equ	0xFDD
  1940                           fsr2h	equ	0xFDA
  1941                           fsr2l	equ	0xFD9
  1942                           status	equ	0xFD8
  1943                           
  1944 ;; *************** function _lcd_init *****************
  1945 ;; Defined at:
  1946 ;;		line 48 in file "lcd.c"
  1947 ;; Parameters:    Size  Location     Type
  1948 ;;		None
  1949 ;; Auto vars:     Size  Location     Type
  1950 ;;  i               1    6[COMRAM] unsigned char 
  1951 ;; Return value:  Size  Location     Type
  1952 ;;                  1    wreg      void 
  1953 ;; Registers used:
  1954 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1955 ;; Tracked objects:
  1956 ;;		On entry : 0/0
  1957 ;;		On exit  : 0/0
  1958 ;;		Unchanged: 0/0
  1959 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1960 ;;      Params:         0       0       0       0       0       0       0       0       0
  1961 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1962 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1963 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1964 ;;Total ram usage:        2 bytes
  1965 ;; Hardware stack levels used:    1
  1966 ;; Hardware stack levels required when called:    2
  1967 ;; This function calls:
  1968 ;;		_send_byte
  1969 ;;		_send_nibble
  1970 ;; This function is called by:
  1971 ;;		_main
  1972 ;; This function uses a non-reentrant model
  1973 ;;
  1974                           
  1975                           	psect	text11
  1976  000B6E                     __ptext11:
  1977                           	opt stack 0
  1978  000B6E                     _lcd_init:
  1979                           	opt stack 28
  1980                           
  1981                           ;lcd.c: 49: byte i;
  1982                           ;lcd.c: 50: TRISD = 0xF0;
  1983                           
  1984                           ;incstack = 0
  1985  000B6E  0EF0               	movlw	240
  1986  000B70  6E95               	movwf	3989,c	;volatile
  1987                           
  1988                           ;lcd.c: 51: TRISCbits.RC0 = TRISCbits.RC1 = 0;
  1989  000B72  9294               	bcf	3988,1,c	;volatile
  1990  000B74  9094               	bcf	3988,0,c	;volatile
  1991                           
  1992                           ;lcd.c: 52: LATCbits.LC0 = LATCbits.LC1 = 0;
  1993  000B76  928B               	bcf	3979,1,c	;volatile
  1994  000B78  908B               	bcf	3979,0,c	;volatile
  1995                           
  1996                           ;lcd.c: 53: LATD = 0x0F & 0x00;
  1997  000B7A  0E00               	movlw	0
  1998  000B7C  6E8C               	movwf	3980,c	;volatile
  1999                           
  2000                           ;lcd.c: 54: _delay((unsigned long)((15)*(20000000/4000.0)));
  2001  000B7E  0E62               	movlw	98
  2002  000B80  6E06               	movwf	??_lcd_init& (0+255),c
  2003  000B82  0E66               	movlw	102
  2004  000B84                     u1007:
  2005  000B84  2EE8               	decfsz	wreg,f,c
  2006  000B86  D7FE               	bra	u1007
  2007  000B88  2E06               	decfsz	??_lcd_init& (0+255),f,c
  2008  000B8A  D7FC               	bra	u1007
  2009                           
  2010                           ;lcd.c: 55: for (i = 0; i < 3;_delay((unsigned long)((5)*(20000000/4000.0))), ++i)
  2011  000B8C  0E00               	movlw	0
  2012  000B8E  6E07               	movwf	lcd_init@i,c
  2013  000B90                     l1379:
  2014  000B90  0E02               	movlw	2
  2015  000B92  6407               	cpfsgt	lcd_init@i,c
  2016  000B94  D001               	goto	l39
  2017  000B96  D00F               	goto	u910
  2018  000B98                     l39:
  2019                           
  2020                           ;lcd.c: 56: send_nibble(0,3);
  2021  000B98  0E03               	movlw	3
  2022  000B9A  6E01               	movwf	send_nibble@data,c
  2023  000B9C  0E00               	movlw	0
  2024  000B9E  EC3C  F007         	call	_send_nibble
  2025  000BA2  0E21               	movlw	33
  2026  000BA4  6E06               	movwf	??_lcd_init& (0+255),c
  2027  000BA6  0E76               	movlw	118
  2028  000BA8                     u1017:
  2029  000BA8  2EE8               	decfsz	wreg,f,c
  2030  000BAA  D7FE               	bra	u1017
  2031  000BAC  2E06               	decfsz	??_lcd_init& (0+255),f,c
  2032  000BAE  D7FC               	bra	u1017
  2033  000BB0  D000               	nop2	
  2034  000BB2  2A07               	incf	lcd_init@i,f,c
  2035  000BB4  D7ED               	goto	l1379
  2036  000BB6                     u910:
  2037                           
  2038                           ;lcd.c: 57: send_nibble(0,2);
  2039  000BB6  0E02               	movlw	2
  2040  000BB8  6E01               	movwf	send_nibble@data,c
  2041  000BBA  0E00               	movlw	0
  2042  000BBC  EC3C  F007         	call	_send_nibble
  2043                           
  2044                           ;lcd.c: 58: _delay((unsigned long)((5)*(20000000/4000.0)));
  2045  000BC0  0E21               	movlw	33
  2046  000BC2  6E06               	movwf	??_lcd_init& (0+255),c
  2047  000BC4  0E76               	movlw	118
  2048  000BC6                     u1027:
  2049  000BC6  2EE8               	decfsz	wreg,f,c
  2050  000BC8  D7FE               	bra	u1027
  2051  000BCA  2E06               	decfsz	??_lcd_init& (0+255),f,c
  2052  000BCC  D7FC               	bra	u1027
  2053  000BCE  D000               	nop2	
  2054                           
  2055                           ;lcd.c: 59: for (i = 0; i < 4; _delay((unsigned long)((5)*(20000000/4000.0))),++i)
  2056  000BD0  0E00               	movlw	0
  2057  000BD2  6E07               	movwf	lcd_init@i,c
  2058  000BD4                     l1397:
  2059  000BD4  0E03               	movlw	3
  2060  000BD6  6407               	cpfsgt	lcd_init@i,c
  2061  000BD8  D001               	goto	l41
  2062  000BDA  D018               	goto	u930
  2063  000BDC                     l41:
  2064                           
  2065                           ;lcd.c: 60: send_byte(0,init_str[i]);
  2066  000BDC  5007               	movf	lcd_init@i,w,c
  2067  000BDE  0D01               	mullw	1
  2068  000BE0  0E17               	movlw	low _init_str
  2069  000BE2  24F3               	addwf	prodl,w,c
  2070  000BE4  6EF6               	movwf	tblptrl,c
  2071  000BE6  0E08               	movlw	high _init_str
  2072  000BE8  20F4               	addwfc	prodh,w,c
  2073  000BEA  6EF7               	movwf	tblptrh,c
  2074  000BEC                     	if	0	;There are less than 3 active tblptr bytes
  2075  000BEC                     	endif
  2076  000BEC  0008               	tblrd		*
  2077  000BEE  CFF5 F004          	movff	tablat,send_byte@data
  2078  000BF2  0E00               	movlw	0
  2079  000BF4  EC93  F007         	call	_send_byte
  2080  000BF8  0E21               	movlw	33
  2081  000BFA  6E06               	movwf	??_lcd_init& (0+255),c
  2082  000BFC  0E76               	movlw	118
  2083  000BFE                     u1037:
  2084  000BFE  2EE8               	decfsz	wreg,f,c
  2085  000C00  D7FE               	bra	u1037
  2086  000C02  2E06               	decfsz	??_lcd_init& (0+255),f,c
  2087  000C04  D7FC               	bra	u1037
  2088  000C06  D000               	nop2	
  2089  000C08  2A07               	incf	lcd_init@i,f,c
  2090  000C0A  D7E4               	goto	l1397
  2091  000C0C                     u930:
  2092                           
  2093                           ;lcd.c: 61: _delay((unsigned long)((1)*(20000000/4000.0)));
  2094  000C0C  0E07               	movlw	7
  2095  000C0E  6E06               	movwf	??_lcd_init& (0+255),c
  2096  000C10  0E7D               	movlw	125
  2097  000C12                     u1047:
  2098  000C12  2EE8               	decfsz	wreg,f,c
  2099  000C14  D7FE               	bra	u1047
  2100  000C16  2E06               	decfsz	??_lcd_init& (0+255),f,c
  2101  000C18  D7FC               	bra	u1047
  2102  000C1A  F000               	nop	
  2103  000C1C  0012               	return		;funcret
  2104  000C1E                     __end_of_lcd_init:
  2105                           	opt stack 0
  2106                           tblptru	equ	0xFF8
  2107                           tblptrh	equ	0xFF7
  2108                           tblptrl	equ	0xFF6
  2109                           tablat	equ	0xFF5
  2110                           prodh	equ	0xFF4
  2111                           prodl	equ	0xFF3
  2112                           postinc0	equ	0xFEE
  2113                           wreg	equ	0xFE8
  2114                           indf2	equ	0xFDF
  2115                           postinc2	equ	0xFDE
  2116                           postdec2	equ	0xFDD
  2117                           fsr2h	equ	0xFDA
  2118                           fsr2l	equ	0xFD9
  2119                           status	equ	0xFD8
  2120                           
  2121 ;; *************** function _send_byte *****************
  2122 ;; Defined at:
  2123 ;;		line 32 in file "lcd.c"
  2124 ;; Parameters:    Size  Location     Type
  2125 ;;  comand          1    wreg     unsigned char 
  2126 ;;  data            1    3[COMRAM] unsigned char 
  2127 ;; Auto vars:     Size  Location     Type
  2128 ;;  comand          1    4[COMRAM] unsigned char 
  2129 ;; Return value:  Size  Location     Type
  2130 ;;                  1    wreg      void 
  2131 ;; Registers used:
  2132 ;;		wreg, status,2, status,0, cstack
  2133 ;; Tracked objects:
  2134 ;;		On entry : 0/0
  2135 ;;		On exit  : 0/0
  2136 ;;		Unchanged: 0/0
  2137 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2138 ;;      Params:         1       0       0       0       0       0       0       0       0
  2139 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2140 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2141 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2142 ;;Total ram usage:        2 bytes
  2143 ;; Hardware stack levels used:    1
  2144 ;; Hardware stack levels required when called:    1
  2145 ;; This function calls:
  2146 ;;		_send_nibble
  2147 ;; This function is called by:
  2148 ;;		_lcd_gotoxy
  2149 ;;		_lcd_init
  2150 ;;		_show_data
  2151 ;;		_set_sgram_byte
  2152 ;; This function uses a non-reentrant model
  2153 ;;
  2154                           
  2155                           	psect	text12
  2156  000F26                     __ptext12:
  2157                           	opt stack 0
  2158  000F26                     _send_byte:
  2159                           	opt stack 28
  2160                           
  2161                           ;incstack = 0
  2162                           ;send_byte@comand stored from wreg
  2163  000F26  6E05               	movwf	send_byte@comand,c
  2164                           
  2165                           ;lcd.c: 33: send_nibble(comand,data>>4);
  2166  000F28  3804               	swapf	send_byte@data,w,c
  2167  000F2A  0B0F               	andlw	15
  2168  000F2C  6E01               	movwf	send_nibble@data,c
  2169  000F2E  5005               	movf	send_byte@comand,w,c
  2170  000F30  EC3C  F007         	call	_send_nibble
  2171                           
  2172                           ;lcd.c: 34: send_nibble(comand,data);
  2173  000F34  C004  F001         	movff	send_byte@data,send_nibble@data
  2174  000F38  5005               	movf	send_byte@comand,w,c
  2175  000F3A  EC3C  F007         	call	_send_nibble
  2176  000F3E  0012               	return		;funcret
  2177  000F40                     __end_of_send_byte:
  2178                           	opt stack 0
  2179                           tblptru	equ	0xFF8
  2180                           tblptrh	equ	0xFF7
  2181                           tblptrl	equ	0xFF6
  2182                           tablat	equ	0xFF5
  2183                           prodh	equ	0xFF4
  2184                           prodl	equ	0xFF3
  2185                           postinc0	equ	0xFEE
  2186                           wreg	equ	0xFE8
  2187                           indf2	equ	0xFDF
  2188                           postinc2	equ	0xFDE
  2189                           postdec2	equ	0xFDD
  2190                           fsr2h	equ	0xFDA
  2191                           fsr2l	equ	0xFD9
  2192                           status	equ	0xFD8
  2193                           
  2194 ;; *************** function _send_nibble *****************
  2195 ;; Defined at:
  2196 ;;		line 25 in file "lcd.c"
  2197 ;; Parameters:    Size  Location     Type
  2198 ;;  comand          1    wreg     unsigned char 
  2199 ;;  data            1    0[COMRAM] unsigned char 
  2200 ;; Auto vars:     Size  Location     Type
  2201 ;;  comand          1    1[COMRAM] unsigned char 
  2202 ;;  i               1    2[COMRAM] unsigned char 
  2203 ;; Return value:  Size  Location     Type
  2204 ;;                  1    wreg      void 
  2205 ;; Registers used:
  2206 ;;		wreg, status,2, status,0
  2207 ;; Tracked objects:
  2208 ;;		On entry : 0/0
  2209 ;;		On exit  : 0/0
  2210 ;;		Unchanged: 0/0
  2211 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2212 ;;      Params:         1       0       0       0       0       0       0       0       0
  2213 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2214 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2215 ;;      Totals:         3       0       0       0       0       0       0       0       0
  2216 ;;Total ram usage:        3 bytes
  2217 ;; Hardware stack levels used:    1
  2218 ;; This function calls:
  2219 ;;		Nothing
  2220 ;; This function is called by:
  2221 ;;		_send_byte
  2222 ;;		_lcd_init
  2223 ;; This function uses a non-reentrant model
  2224 ;;
  2225                           
  2226                           	psect	text13
  2227  000E78                     __ptext13:
  2228                           	opt stack 0
  2229  000E78                     _send_nibble:
  2230                           	opt stack 28
  2231                           
  2232                           ;incstack = 0
  2233                           ;send_nibble@comand stored from wreg
  2234  000E78  6E02               	movwf	send_nibble@comand,c
  2235                           
  2236                           ;lcd.c: 26: LATCbits.LC1 = comand; __nop();
  2237  000E7A  B002               	btfsc	send_nibble@comand,0,c
  2238  000E7C  D002               	bra	u505
  2239  000E7E  928B               	bcf	3979,1,c	;volatile
  2240  000E80  D001               	bra	u506
  2241  000E82                     u505:
  2242  000E82  828B               	bsf	3979,1,c	;volatile
  2243  000E84                     u506:
  2244  000E84  F000               	nop	
  2245                           
  2246                           ;lcd.c: 27: LATCbits.LC0 = 1; __nop();
  2247  000E86  808B               	bsf	3979,0,c	;volatile
  2248  000E88  F000               	nop	
  2249                           
  2250                           ;lcd.c: 28: LATD = 0x0F & data; __nop();
  2251  000E8A  5001               	movf	send_nibble@data,w,c
  2252  000E8C  0B0F               	andlw	15
  2253  000E8E  6E8C               	movwf	3980,c	;volatile
  2254  000E90  F000               	nop	
  2255                           
  2256                           ;lcd.c: 29: LATCbits.LC0 = 0;
  2257  000E92  908B               	bcf	3979,0,c	;volatile
  2258                           
  2259                           ;lcd.c: 30: for(byte i=0;i<20;i++) __nop();
  2260  000E94  0E00               	movlw	0
  2261  000E96  6E03               	movwf	send_nibble@i,c
  2262  000E98                     l1133:
  2263  000E98  0E13               	movlw	19
  2264  000E9A  6403               	cpfsgt	send_nibble@i,c
  2265  000E9C  D001               	goto	l19
  2266  000E9E  0012               	return	
  2267  000EA0                     l19:
  2268  000EA0  F000               	nop	
  2269  000EA2  2A03               	incf	send_nibble@i,f,c
  2270  000EA4  D7F9               	goto	l1133
  2271  000EA6                     __end_of_send_nibble:
  2272                           	opt stack 0
  2273                           tblptru	equ	0xFF8
  2274                           tblptrh	equ	0xFF7
  2275                           tblptrl	equ	0xFF6
  2276                           tablat	equ	0xFF5
  2277                           prodh	equ	0xFF4
  2278                           prodl	equ	0xFF3
  2279                           postinc0	equ	0xFEE
  2280                           wreg	equ	0xFE8
  2281                           indf2	equ	0xFDF
  2282                           postinc2	equ	0xFDE
  2283                           postdec2	equ	0xFDD
  2284                           fsr2h	equ	0xFDA
  2285                           fsr2l	equ	0xFD9
  2286                           status	equ	0xFD8
  2287                           tblptru	equ	0xFF8
  2288                           tblptrh	equ	0xFF7
  2289                           tblptrl	equ	0xFF6
  2290                           tablat	equ	0xFF5
  2291                           prodh	equ	0xFF4
  2292                           prodl	equ	0xFF3
  2293                           postinc0	equ	0xFEE
  2294                           wreg	equ	0xFE8
  2295                           indf2	equ	0xFDF
  2296                           postinc2	equ	0xFDE
  2297                           postdec2	equ	0xFDD
  2298                           fsr2h	equ	0xFDA
  2299                           fsr2l	equ	0xFD9
  2300                           status	equ	0xFD8
  2301                           
  2302                           	psect	rparam
  2303  0000                     tblptru	equ	0xFF8
  2304                           tblptrh	equ	0xFF7
  2305                           tblptrl	equ	0xFF6
  2306                           tablat	equ	0xFF5
  2307                           prodh	equ	0xFF4
  2308                           prodl	equ	0xFF3
  2309                           postinc0	equ	0xFEE
  2310                           wreg	equ	0xFE8
  2311                           indf2	equ	0xFDF
  2312                           postinc2	equ	0xFDE
  2313                           postdec2	equ	0xFDD
  2314                           fsr2h	equ	0xFDA
  2315                           fsr2l	equ	0xFD9
  2316                           status	equ	0xFD8


Data Sizes:
    Strings     29
    Constant    74
    Data        0
    BSS         29
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     52      81
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    sprintf@cp	PTR const unsigned char  size(2) Largest target is 48
		 -> STR_2(CODE[7]), month(CODE[48]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 22
		 -> STR_1(CODE[22]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 22
		 -> DataStr(COMRAM[22]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_show_data
    _show_data->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _lcd_gotoxy->_send_byte
    _increment_seg->_LeapYear
    _lcd_init->_send_byte
    _send_byte->_send_nibble

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    6364
                                             50 COMRAM     2     2      0
                      _increment_seg
                           _lcd_init
                           _set_time
                          _show_data
 ---------------------------------------------------------------------------------
 (1) _show_data                                            5     5      0    4360
                                             45 COMRAM     5     5      0
                      _increment_seg
                         _lcd_gotoxy
                          _send_byte
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             37    21     16    2180
                                             12 COMRAM    33    17     16
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     311
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     311
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     314
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) _lcd_gotoxy                                           5     4      1    1106
                                              5 COMRAM     5     4      1
                          _send_byte
 ---------------------------------------------------------------------------------
 (2) _increment_seg                                        6     6      0     122
                                              4 COMRAM     6     6      0
                           _LeapYear
 ---------------------------------------------------------------------------------
 (3) _LeapYear                                             4     2      2      98
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _set_time                                             7     1      6     512
                                              0 COMRAM     7     1      6
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             2     2      0    1370
                                              5 COMRAM     2     2      0
                          _send_byte
                        _send_nibble
 ---------------------------------------------------------------------------------
 (2) _send_byte                                            2     1      1     862
                                              3 COMRAM     2     1      1
                        _send_nibble
 ---------------------------------------------------------------------------------
 (3) _send_nibble                                          3     2      1     394
                                              0 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _increment_seg
     _LeapYear
   _lcd_init
     _send_byte
       _send_nibble
     _send_nibble
   _set_time
   _show_data
     _increment_seg
       _LeapYear
     _lcd_gotoxy
       _send_byte
         _send_nibble
     _send_byte
       _send_nibble
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     34      51       1       85.3%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      51      20        0.0%
DATA                 0      0      51       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sun Apr 22 19:32:40 2018

                     l41 0BDC                       l33 0E5A                       l19 0EA0  
                     l39 0B98                       l72 0C96                       l80 0DE6  
                     l65 0D16                       l74 0CA8                       l67 0D40  
                     l94 0874                       l95 088E                       l97 08B6  
                     l99 09DA      ___wmul@multiplicand 0003              __CFG_BORV$3 000000  
           __CFG_CP0$OFF 000000             __CFG_CP1$OFF 000000             __CFG_CP2$OFF 000000  
           __CFG_CP3$OFF 000000                      l110 097E                      l104 0A08  
                    l112 0998                      l113 0988                      l105 0914  
                    l130 0B40                      l106 093C                      l131 0AEE  
                    l123 0A7A                      l115 09C8                      l107 094A  
                    l124 0A9E                      l116 09AA                      l108 0946  
                    l125 0AA6                      l119 0A30                      l129 0AE8  
                    l543 0D90                      l544 0D88                      l464 0F02  
                    l553 0E1E                      l554 0E16                      l547 0DB0  
                    l548 0DBA                      l557 0E36                      l558 0E40  
           __CFG_CPB$OFF 000000                      u505 0E82                      u506 0E84  
                    u530 0F22                      u610 0E22             __CFG_CPD$OFF 000000  
                    u810 0A60                      u580 0D94                      u910 0BB6  
                    u930 0C0C                      u850 0AAE                      u860 0ACC  
                    u880 0B48                      u890 0B60                      u997 0DF8  
           __CFG_BOR$OFF 000000                      prod 000FF3                      wreg 000FE8  
           __CFG_FOSC$HS 000000              lcd_gotoxy@x 0007              lcd_gotoxy@y 0006  
           __CFG_LVP$OFF 000000             __CFG_WDT$OFF 000000                     l1133 0E98  
                   l1315 0A34                     l1291 09AA                     l1285 0988  
                   l1429 0C8E                     l1379 0B90                     l1397 0BD4  
                   STR_1 084B                     STR_2 0861                     u1007 0B84  
                   u1017 0BA8                     u1027 0BC6                     u1037 0BFE  
                   u1047 0C12                     _LATD 000F8C                     _main 0DC4  
                   fsr2h 000FDA                     indf2 000FDF                     fsr2l 000FD9  
                   prodh 000FF4                     prodl 000FF3                     start 0000  
          __CFG_IESO$OFF 000000            __CFG_MCLRE$ON 000000             ___param_bank 000000  
          __CFG_PLLDIV$1 000000           __CFG_CCP2MX$ON 000000                    ?_main 0001  
        __end_of___lwdiv 0DC4          __end_of___lwmod 0E4A            __CFG_USBDIV$1 000000  
                  _TRISD 000F95            __CFG_PWRT$OFF 000000            __CFG_WRT0$OFF 000000  
        send_byte@comand 0005            __CFG_WRT1$OFF 000000            __CFG_WRT2$OFF 000000  
          __CFG_WRT3$OFF 000000                    _Gtime 0035           __CFG_EBTR0$OFF 000000  
         __CFG_FCMEN$OFF 000000           __CFG_EBTR1$OFF 000000           __CFG_EBTR2$OFF 000000  
         __CFG_EBTR3$OFF 000000            __CFG_WRTB$OFF 000000            __CFG_WRTC$OFF 000000  
          __CFG_WRTD$OFF 000000           __CFG_EBTRB$OFF 000000          __end_of_dpowers 0817  
        __end_of_isdigit 0F0A                    _month 081B                    tablat 000FF5  
        send_nibble@data 0001                    status 000FD8          __end_of_sprintf 0B6E  
 __size_of_increment_seg 00A8           __CFG_ICPRT$OFF 000000          __initialization 0F40  
       __end_of_LeapYear 0F26             __end_of_main 0E08            lcd_gotoxy@dir 000A  
                 ??_main 0033            __activetblptr 000002             ?_send_nibble 0001  
         __CFG_XINST$OFF 000000         __end_of_lcd_init 0C1E                   ___wmul 0EA6  
         __CFG_STVREN$ON 000000                ??___lwdiv 0005                ??___lwmod 000C  
                 clear_0 0F46         __end_of_init_str 081B            _increment_seg 0CCA  
              ??_isdigit 0001         __end_of_set_time 0EEC             __mediumconst 0000  
                 tblptrh 000FF7                   tblptrl 000FF6                   tblptru 000FF8  
              ??_sprintf 001D               __accesstop 0060  __end_of__initialization 0F4C  
        __CFG_PBADEN$OFF 000000            ___rparam_used 000001           __pcstackCOMRAM 0001  
          __end_of_month 084B           ?_increment_seg 0001             sprintf@width 002B  
              ?_LeapYear 0001                  ?___wmul 0001       __size_of_send_byte 001A  
     __size_of_show_data 00AC               _lcd_gotoxy 0E4A                ?_lcd_init 0001  
             ??_LeapYear 0003                  _DataStr 003C          __CFG_VREGEN$OFF 000000  
   __size_of_send_nibble 002E                  __Hparam 0000                  __Lparam 0000  
              ?_set_time 0001          __size_of___wmul 0026          ??_increment_seg 0005  
                ___lwdiv 0D72                  ___lwmod 0E08             __psmallconst 0800  
                __pcinit 0F40                  __ramtop 0800                  __ptext0 0DC4  
                __ptext1 0C1E                  __ptext2 086A                  __ptext3 0EEC  
                __ptext4 0EA6                  __ptext5 0E08                  __ptext6 0D72  
                __ptext7 0E4A                  __ptext8 0CCA                  __ptext9 0F0A  
                _dpowers 080D                  _isdigit 0EEC                  _sprintf 086A  
             ??_lcd_init 0006     end_of_initialization 0F4C        __end_of_send_byte 0F40  
          __Lmediumconst 0000        __end_of_monthdays 080D        __end_of_show_data 0CCA  
      send_nibble@comand 0002               ??_set_time 0007                  postdec2 000FDD  
                postinc0 000FEE                  postinc2 000FDE                _TRISCbits 000F94  
            ?_lcd_gotoxy 0006        _increment_seg$165 0009            send_byte@data 0004  
         __end_of___wmul 0ECC      start_initialization 0F40        __size_of_LeapYear 001C  
    __size_of_lcd_gotoxy 002E                 ??___wmul 0005         __CFG_LPT1OSC$OFF 000000  
            __pbssCOMRAM 0035        __size_of_lcd_init 00B0              sprintf@flag 0024  
            sprintf@prec 0021         ___lwdiv@dividend 0001                 ?___lwdiv 0001  
               ?___lwmod 0008        __size_of_set_time 0020              __smallconst 0800  
               ?_isdigit 0001            ??_send_nibble 0002         ___lwdiv@quotient 0005  
               ?_sprintf 000D           ___wmul@product 0005                 _LATCbits 000F8B  
             set_time@mo 0004                _send_byte 0F26                _monthdays 0801  
       __CFG_WDTPS$32768 000000                _show_data 0C1E    __end_of_increment_seg 0D72  
      ___wmul@multiplier 0001               show_data@i 0032                lcd_init@i 0007  
           send_nibble@i 0003             ??_lcd_gotoxy 0007                 _LeapYear 0F0A  
    __end_of_send_nibble 0EA6               ?_send_byte 0004                 __Hrparam 0000  
               __Lrparam 0000       __end_of_lcd_gotoxy 0E78               ?_show_data 0001  
       __size_of___lwdiv 0052         __size_of___lwmod 0042              _isdigit$426 0002  
             sprintf@len 0029               sprintf@val 0027         __size_of_isdigit 001E  
        ___lwdiv@divisor 0003          ___lwdiv@counter 0007                 __ptext10 0ECC  
               __ptext11 0B6E                 __ptext12 0F26                 __ptext13 0E78  
               _lcd_init 0B6E         __size_of_sprintf 0304            __size_of_main 0044  
               _init_str 0817                set_time@d 0003                set_time@h 0002  
              set_time@m 0001                set_time@s 0007                set_time@y 0005  
         _lcd_gotoxy$134 0008                 _set_time 0ECC    __CFG_CPUDIV$OSC1_PLL2 000000  
               isdigit@c 0003              _send_nibble 0E78                sprintf@ap 0022  
              sprintf@cp 0025                sprintf@sp 000D         ___lwmod@dividend 0008  
            ??_send_byte 0005              ??_show_data 002E             LeapYear@year 0001  
               sprintf@c 002D                 sprintf@f 000F          ___lwmod@divisor 000A  
        ___lwmod@counter 000C  
