

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sat Apr 21 12:14:21 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    17                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    18  0000                     
    19                           ; Version 1.45
    20                           ; Generated 16/11/2017 GMT
    21                           ; 
    22                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    23                           ; All rights reserved.
    24                           ; 
    25                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    26                           ; 
    27                           ; Redistribution and use in source and binary forms, with or without modification, are
    28                           ; permitted provided that the following conditions are met:
    29                           ; 
    30                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    31                           ;        conditions and the following disclaimer.
    32                           ; 
    33                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    34                           ;        of conditions and the following disclaimer in the documentation and/or other
    35                           ;        materials provided with the distribution.
    36                           ; 
    37                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    38                           ;        software without specific prior written permission.
    39                           ; 
    40                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    41                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    42                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    43                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    44                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    45                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    46                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    47                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    48                           ; 
    49                           ; 
    50                           ; Code-generator required, PIC18F4550 Definitions
    51                           ; 
    52                           ; SFR Addresses
    53  0000                     
    54                           	psect	idataCOMRAM
    55  000A5C                     __pidataCOMRAM:
    56                           	opt stack 0
    57                           
    58                           ;initializer for main@F3819
    59  000A5C  49                 	db	73
    60  000A5D  76                 	db	118
    61  000A5E  61                 	db	97
    62  000A5F  6E                 	db	110
    63  000A60  20                 	db	32
    64  000A61  20                 	db	32
    65  000A62  4D                 	db	77
    66  000A63  6F                 	db	111
    67  000A64  72                 	db	114
    68  000A65  65                 	db	101
    69  000A66  6E                 	db	110
    70  000A67  6F                 	db	111
    71  000A68  00                 	db	0
    72                           
    73                           ;initializer for _animation
    74  000A69  0E                 	db	14
    75  000A6A  11                 	db	17
    76  000A6B  0E                 	db	14
    77  000A6C  15                 	db	21
    78  000A6D  0E                 	db	14
    79  000A6E  04                 	db	4
    80  000A6F  0A                 	db	10
    81  000A70  11                 	db	17
    82  000A71  0E                 	db	14
    83  000A72  11                 	db	17
    84  000A73  0E                 	db	14
    85  000A74  04                 	db	4
    86  000A75  1F                 	db	31
    87  000A76  04                 	db	4
    88  000A77  0A                 	db	10
    89  000A78  0A                 	db	10
    90  000A79  0E                 	db	14
    91  000A7A  11                 	db	17
    92  000A7B  0E                 	db	14
    93  000A7C  04                 	db	4
    94  000A7D  0E                 	db	14
    95  000A7E  15                 	db	21
    96  000A7F  04                 	db	4
    97  000A80  0E                 	db	14
    98                           
    99                           	psect	smallconst
   100  000800                     __psmallconst:
   101                           	opt stack 0
   102  000800  00                 	db	0
   103  000801                     _init_str:
   104                           	opt stack 0
   105  000801  28                 	db	40
   106  000802  0C                 	db	12
   107  000803  01                 	db	1
   108  000804  06                 	db	6
   109  000805                     __end_of_init_str:
   110                           	opt stack 0
   111  0000                     _CMCON	set	4020
   112  0000                     _ADCON1	set	4033
   113  0000                     _TRISCbits	set	3988
   114  0000                     _TRISD	set	3989
   115  0000                     _LATD	set	3980
   116  0000                     _LATCbits	set	3979
   117                           
   118                           ; #config settings
   119  000805  00                 	db	0	; dummy byte at the end
   120  0000                     
   121                           	psect	cinit
   122  0009D2                     __pcinit:
   123                           	opt stack 0
   124  0009D2                     start_initialization:
   125                           	opt stack 0
   126  0009D2                     __initialization:
   127                           	opt stack 0
   128                           
   129                           ; Initialize objects allocated to COMRAM (37 bytes)
   130                           ; load TBLPTR registers with __pidataCOMRAM
   131  0009D2  0E5C               	movlw	low __pidataCOMRAM
   132  0009D4  6EF6               	movwf	tblptrl,c
   133  0009D6  0E0A               	movlw	high __pidataCOMRAM
   134  0009D8  6EF7               	movwf	tblptrh,c
   135  0009DA  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   136  0009DC  6EF8               	movwf	tblptru,c
   137  0009DE  EE00  F001         	lfsr	0,__pdataCOMRAM
   138  0009E2  EE10 F025          	lfsr	1,37
   139  0009E6                     copy_data0:
   140  0009E6  0009               	tblrd		*+
   141  0009E8  CFF5 FFEE          	movff	tablat,postinc0
   142  0009EC  50E5               	movf	postdec1,w,c
   143  0009EE  50E1               	movf	fsr1l,w,c
   144  0009F0  E1FA               	bnz	copy_data0
   145  0009F2                     end_of_initialization:
   146                           	opt stack 0
   147  0009F2                     __end_of__initialization:
   148                           	opt stack 0
   149  0009F2  0E00               	movlw	low (__Lsmallconst shr (0+16))
   150  0009F4  6EF8               	movwf	tblptru,c
   151  0009F6  0E08               	movlw	high __Lsmallconst
   152  0009F8  6EF7               	movwf	tblptrh,c
   153  0009FA  0100               	movlb	0
   154  0009FC  EF03  F004         	goto	_main	;jump to C main() function
   155                           tblptru	equ	0xFF8
   156                           tblptrh	equ	0xFF7
   157                           tblptrl	equ	0xFF6
   158                           tablat	equ	0xFF5
   159                           postinc0	equ	0xFEE
   160                           postdec1	equ	0xFE5
   161                           fsr1l	equ	0xFE1
   162                           
   163                           	psect	dataCOMRAM
   164  000001                     __pdataCOMRAM:
   165                           	opt stack 0
   166  000001                     main@F3819:
   167                           	opt stack 0
   168  000001                     	ds	13
   169  00000E                     _animation:
   170                           	opt stack 0
   171  00000E                     	ds	24
   172                           tblptru	equ	0xFF8
   173                           tblptrh	equ	0xFF7
   174                           tblptrl	equ	0xFF6
   175                           tablat	equ	0xFF5
   176                           postinc0	equ	0xFEE
   177                           postdec1	equ	0xFE5
   178                           fsr1l	equ	0xFE1
   179                           
   180                           	psect	cstackCOMRAM
   181  000026                     __pcstackCOMRAM:
   182                           	opt stack 0
   183  000026                     send_nibble@data:
   184                           	opt stack 0
   185                           
   186                           ; 1 bytes @ 0x0
   187  000026                     	ds	1
   188  000027                     send_nibble@comand:
   189                           	opt stack 0
   190                           
   191                           ; 1 bytes @ 0x1
   192  000027                     	ds	1
   193  000028                     send_nibble@i:
   194                           	opt stack 0
   195                           
   196                           ; 1 bytes @ 0x2
   197  000028                     	ds	1
   198  000029                     send_byte@data:
   199                           	opt stack 0
   200                           
   201                           ; 1 bytes @ 0x3
   202  000029                     	ds	1
   203  00002A                     send_byte@comand:
   204                           	opt stack 0
   205                           
   206                           ; 1 bytes @ 0x4
   207  00002A                     	ds	1
   208  00002B                     ??_lcd_init:
   209  00002B                     lcd_gotoxy@y:
   210                           	opt stack 0
   211  00002B                     set_sgram_byte@ptr:
   212                           	opt stack 0
   213                           
   214                           ; 2 bytes @ 0x5
   215  00002B                     	ds	1
   216  00002C                     lcd_gotoxy@x:
   217                           	opt stack 0
   218  00002C                     lcd_init@i:
   219                           	opt stack 0
   220                           
   221                           ; 1 bytes @ 0x6
   222  00002C                     	ds	1
   223  00002D                     set_sgram_byte@dir:
   224                           	opt stack 0
   225  00002D                     _lcd_gotoxy$123:
   226                           	opt stack 0
   227                           
   228                           ; 2 bytes @ 0x7
   229  00002D                     	ds	1
   230  00002E                     set_sgram_byte@i:
   231                           	opt stack 0
   232                           
   233                           ; 1 bytes @ 0x8
   234  00002E                     	ds	1
   235  00002F                     lcd_gotoxy@dir:
   236                           	opt stack 0
   237                           
   238                           ; 1 bytes @ 0x9
   239  00002F                     	ds	1
   240  000030                     ??_main:
   241                           
   242                           ; 1 bytes @ 0xA
   243  000030                     	ds	1
   244  000031                     main@my_name:
   245                           	opt stack 0
   246                           
   247                           ; 13 bytes @ 0xB
   248  000031                     	ds	13
   249  00003E                     main@j:
   250                           	opt stack 0
   251                           
   252                           ; 2 bytes @ 0x18
   253  00003E                     	ds	2
   254  000040                     main@i:
   255                           	opt stack 0
   256                           
   257                           ; 1 bytes @ 0x1A
   258  000040                     	ds	1
   259                           tblptru	equ	0xFF8
   260                           tblptrh	equ	0xFF7
   261                           tblptrl	equ	0xFF6
   262                           tablat	equ	0xFF5
   263                           postinc0	equ	0xFEE
   264                           postdec1	equ	0xFE5
   265                           fsr1l	equ	0xFE1
   266                           
   267 ;;
   268 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   269 ;;
   270 ;; *************** function _main *****************
   271 ;; Defined at:
   272 ;;		line 9 in file "main.c"
   273 ;; Parameters:    Size  Location     Type
   274 ;;		None
   275 ;; Auto vars:     Size  Location     Type
   276 ;;  j               2   24[COMRAM] int 
   277 ;;  my_name        13   11[COMRAM] unsigned char [13]
   278 ;;  i               1   26[COMRAM] unsigned char 
   279 ;; Return value:  Size  Location     Type
   280 ;;                  1    wreg      void 
   281 ;; Registers used:
   282 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   283 ;; Tracked objects:
   284 ;;		On entry : 0/0
   285 ;;		On exit  : 0/0
   286 ;;		Unchanged: 0/0
   287 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   288 ;;      Params:         0       0       0       0       0       0       0       0       0
   289 ;;      Locals:        16       0       0       0       0       0       0       0       0
   290 ;;      Temps:          1       0       0       0       0       0       0       0       0
   291 ;;      Totals:        17       0       0       0       0       0       0       0       0
   292 ;;Total ram usage:       17 bytes
   293 ;; Hardware stack levels required when called:    3
   294 ;; This function calls:
   295 ;;		_lcd_gotoxy
   296 ;;		_lcd_init
   297 ;;		_send_byte
   298 ;;		_set_sgram_byte
   299 ;; This function is called by:
   300 ;;		Startup code after reset
   301 ;; This function uses a non-reentrant model
   302 ;;
   303                           
   304                           	psect	text0
   305  000806                     __ptext0:
   306                           	opt stack 0
   307  000806                     _main:
   308                           	opt stack 28
   309                           
   310                           ;main.c: 10: ADCON1 = 0x0F;
   311                           
   312                           ;incstack = 0
   313  000806  0E0F               	movlw	15
   314  000808  6EC1               	movwf	4033,c	;volatile
   315                           
   316                           ;main.c: 11: CMCON = 0x07;
   317  00080A  0E07               	movlw	7
   318  00080C  6EB4               	movwf	4020,c	;volatile
   319                           
   320                           ;main.c: 13: byte my_name[] = "Ivan  Moreno";
   321  00080E  EE20  F001         	lfsr	2,main@F3819
   322  000812  EE10  F031         	lfsr	1,main@my_name
   323  000816  0E0C               	movlw	12
   324  000818                     u301:
   325  000818  CFDB FFE3          	movff	plusw2,plusw1
   326  00081C  06E8               	decf	wreg,f,c
   327  00081E  E2FC               	bc	u301
   328                           
   329                           ;main.c: 14: byte i;
   330                           ;main.c: 15: lcd_init();
   331  000820  EC6F  F004         	call	_lcd_init	;wreg free
   332                           
   333                           ;main.c: 16: lcd_gotoxy(3,1);
   334  000824  0E01               	movlw	1
   335  000826  6E2B               	movwf	lcd_gotoxy@y,c
   336  000828  0E03               	movlw	3
   337  00082A  EC00  F005         	call	_lcd_gotoxy
   338                           
   339                           ;main.c: 17: for(i=0;i<12;i++)
   340  00082E  0E00               	movlw	0
   341  000830  6E40               	movwf	main@i,c
   342  000832                     l950:
   343  000832  0E0B               	movlw	11
   344  000834  6440               	cpfsgt	main@i,c
   345  000836  D001               	goto	l54
   346  000838  D00F               	goto	u320
   347  00083A                     l54:
   348                           
   349                           ;main.c: 18: send_byte(1,my_name[i]);
   350  00083A  5040               	movf	main@i,w,c
   351  00083C  0D01               	mullw	1
   352  00083E  0E31               	movlw	low main@my_name
   353  000840  24F3               	addwf	prodl,w,c
   354  000842  6ED9               	movwf	fsr2l,c
   355  000844  0E00               	movlw	high main@my_name
   356  000846  20F4               	addwfc	prodh,w,c
   357  000848  6EDA               	movwf	fsr2h,c
   358  00084A  50DF               	movf	indf2,w,c
   359  00084C  6E29               	movwf	send_byte@data,c
   360  00084E  0E01               	movlw	1
   361  000850  EC41  F005         	call	_send_byte
   362  000854  2A40               	incf	main@i,f,c
   363  000856  D7ED               	goto	l950
   364  000858                     u320:
   365                           
   366                           ;main.c: 19: set_sgram_byte(0,animation[1]);
   367  000858  0E16               	movlw	low (_animation+8)
   368  00085A  6E2B               	movwf	set_sgram_byte@ptr,c
   369  00085C  0E00               	movlw	high (_animation+8)
   370  00085E  6E2C               	movwf	set_sgram_byte@ptr+1,c
   371  000860  0E00               	movlw	0
   372  000862  ECC7  F004         	call	_set_sgram_byte
   373                           
   374                           ;main.c: 20: lcd_gotoxy(1,2);
   375  000866  0E02               	movlw	2
   376  000868  6E2B               	movwf	lcd_gotoxy@y,c
   377  00086A  0E01               	movlw	1
   378  00086C  EC00  F005         	call	_lcd_gotoxy
   379                           
   380                           ;main.c: 21: for (i = 0; i < 0x10; i++)
   381  000870  0E00               	movlw	0
   382  000872  6E40               	movwf	main@i,c
   383  000874                     l966:
   384  000874  0E0F               	movlw	15
   385  000876  6440               	cpfsgt	main@i,c
   386  000878  D001               	goto	l56
   387  00087A  D007               	goto	u340
   388  00087C                     l56:
   389                           
   390                           ;main.c: 22: send_byte(1,0);
   391  00087C  0E00               	movlw	0
   392  00087E  6E29               	movwf	send_byte@data,c
   393  000880  0E01               	movlw	1
   394  000882  EC41  F005         	call	_send_byte
   395  000886  2A40               	incf	main@i,f,c
   396  000888  D7F5               	goto	l966
   397  00088A                     u340:
   398                           
   399                           ;main.c: 24: for (i = 0; i < 3; i++){
   400                           
   401                           ;main.c: 23: for(;;){
   402  00088A  0E00               	movlw	0
   403  00088C  6E40               	movwf	main@i,c
   404  00088E                     l978:
   405  00088E  0E02               	movlw	2
   406  000890  6440               	cpfsgt	main@i,c
   407  000892  D001               	goto	l59
   408  000894  D7FA               	goto	u340
   409  000896                     l59:
   410                           
   411                           ;main.c: 25: for(int j=0;j<500;_delay((unsigned long)((1)*(20000000/4000.0))),++j);
   412  000896  0E00               	movlw	0
   413  000898  6E3F               	movwf	main@j+1,c
   414  00089A  0E00               	movlw	0
   415  00089C  6E3E               	movwf	main@j,c
   416  00089E                     l984:
   417  00089E  BE3F               	btfsc	main@j+1,7,c
   418  0008A0  D006               	goto	l61
   419  0008A2  0EF4               	movlw	244
   420  0008A4  5C3E               	subwf	main@j,w,c
   421  0008A6  0E01               	movlw	1
   422  0008A8  583F               	subwfb	main@j+1,w,c
   423  0008AA  B0D8               	btfsc	status,0,c
   424  0008AC  D00B               	goto	u370
   425  0008AE                     l61:
   426  0008AE  0E07               	movlw	7
   427  0008B0  6E30               	movwf	??_main& (0+255),c
   428  0008B2  0E7D               	movlw	125
   429  0008B4                     u397:
   430  0008B4  2EE8               	decfsz	wreg,f,c
   431  0008B6  D7FE               	bra	u397
   432  0008B8  2E30               	decfsz	??_main& (0+255),f,c
   433  0008BA  D7FC               	bra	u397
   434  0008BC  F000               	nop	
   435  0008BE  4A3E               	infsnz	main@j,f,c
   436  0008C0  2A3F               	incf	main@j+1,f,c
   437  0008C2  D7ED               	goto	l984
   438  0008C4                     u370:
   439                           
   440                           ;main.c: 26: set_sgram_byte(0,animation[i]);
   441  0008C4  5040               	movf	main@i,w,c
   442  0008C6  0D08               	mullw	8
   443  0008C8  0E0E               	movlw	low _animation
   444  0008CA  24F3               	addwf	prodl,w,c
   445  0008CC  6E2B               	movwf	set_sgram_byte@ptr,c
   446  0008CE  0E00               	movlw	high _animation
   447  0008D0  20F4               	addwfc	prodh,w,c
   448  0008D2  6E2C               	movwf	set_sgram_byte@ptr+1,c
   449  0008D4  0E00               	movlw	0
   450  0008D6  ECC7  F004         	call	_set_sgram_byte
   451  0008DA  2A40               	incf	main@i,f,c
   452  0008DC  D7D8               	goto	l978
   453  0008DE                     __end_of_main:
   454                           	opt stack 0
   455                           tblptru	equ	0xFF8
   456                           tblptrh	equ	0xFF7
   457                           tblptrl	equ	0xFF6
   458                           tablat	equ	0xFF5
   459                           prodh	equ	0xFF4
   460                           prodl	equ	0xFF3
   461                           postinc0	equ	0xFEE
   462                           wreg	equ	0xFE8
   463                           postdec1	equ	0xFE5
   464                           plusw1	equ	0xFE3
   465                           fsr1l	equ	0xFE1
   466                           indf2	equ	0xFDF
   467                           plusw2	equ	0xFDB
   468                           fsr2h	equ	0xFDA
   469                           fsr2l	equ	0xFD9
   470                           status	equ	0xFD8
   471                           
   472 ;; *************** function _set_sgram_byte *****************
   473 ;; Defined at:
   474 ;;		line 36 in file "lcd.c"
   475 ;; Parameters:    Size  Location     Type
   476 ;;  dir             1    wreg     unsigned char 
   477 ;;  ptr             2    5[COMRAM] PTR unsigned char 
   478 ;;		 -> animation(24), 
   479 ;; Auto vars:     Size  Location     Type
   480 ;;  dir             1    7[COMRAM] unsigned char 
   481 ;;  i               1    8[COMRAM] unsigned char 
   482 ;; Return value:  Size  Location     Type
   483 ;;                  1    wreg      void 
   484 ;; Registers used:
   485 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   486 ;; Tracked objects:
   487 ;;		On entry : 0/0
   488 ;;		On exit  : 0/0
   489 ;;		Unchanged: 0/0
   490 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   491 ;;      Params:         2       0       0       0       0       0       0       0       0
   492 ;;      Locals:         2       0       0       0       0       0       0       0       0
   493 ;;      Temps:          0       0       0       0       0       0       0       0       0
   494 ;;      Totals:         4       0       0       0       0       0       0       0       0
   495 ;;Total ram usage:        4 bytes
   496 ;; Hardware stack levels used:    1
   497 ;; Hardware stack levels required when called:    2
   498 ;; This function calls:
   499 ;;		_send_byte
   500 ;; This function is called by:
   501 ;;		_main
   502 ;; This function uses a non-reentrant model
   503 ;;
   504                           
   505                           	psect	text1
   506  00098E                     __ptext1:
   507                           	opt stack 0
   508  00098E                     _set_sgram_byte:
   509                           	opt stack 28
   510                           
   511                           ;incstack = 0
   512                           ;set_sgram_byte@dir stored from wreg
   513  00098E  6E2D               	movwf	set_sgram_byte@dir,c
   514                           
   515                           ;lcd.c: 37: dir <<= 3;
   516  000990  90D8               	bcf	status,0,c
   517  000992  362D               	rlcf	set_sgram_byte@dir,f,c
   518  000994  90D8               	bcf	status,0,c
   519  000996  362D               	rlcf	set_sgram_byte@dir,f,c
   520  000998  90D8               	bcf	status,0,c
   521  00099A  362D               	rlcf	set_sgram_byte@dir,f,c
   522                           
   523                           ;lcd.c: 38: dir &= 0x38;
   524  00099C  0E38               	movlw	56
   525  00099E  162D               	andwf	set_sgram_byte@dir,f,c
   526                           
   527                           ;lcd.c: 39: send_byte(0, 0x40 | dir);
   528  0009A0  502D               	movf	set_sgram_byte@dir,w,c
   529  0009A2  0940               	iorlw	64
   530  0009A4  6E29               	movwf	send_byte@data,c
   531  0009A6  0E00               	movlw	0
   532  0009A8  EC41  F005         	call	_send_byte
   533                           
   534                           ;lcd.c: 40: for(byte i=0; i<8; i++)
   535  0009AC  0E00               	movlw	0
   536  0009AE  6E2E               	movwf	set_sgram_byte@i,c
   537  0009B0                     l874:
   538  0009B0  0E07               	movlw	7
   539  0009B2  642E               	cpfsgt	set_sgram_byte@i,c
   540  0009B4  D001               	goto	l29
   541  0009B6  0012               	return	
   542  0009B8                     l29:
   543                           
   544                           ;lcd.c: 41: send_byte(1, *ptr++);
   545  0009B8  C02B  FFD9         	movff	set_sgram_byte@ptr,fsr2l
   546  0009BC  C02C  FFDA         	movff	set_sgram_byte@ptr+1,fsr2h
   547  0009C0  50DF               	movf	indf2,w,c
   548  0009C2  6E29               	movwf	send_byte@data,c
   549  0009C4  0E01               	movlw	1
   550  0009C6  EC41  F005         	call	_send_byte
   551  0009CA  4A2B               	infsnz	set_sgram_byte@ptr,f,c
   552  0009CC  2A2C               	incf	set_sgram_byte@ptr+1,f,c
   553  0009CE  2A2E               	incf	set_sgram_byte@i,f,c
   554  0009D0  D7EF               	goto	l874
   555  0009D2                     __end_of_set_sgram_byte:
   556                           	opt stack 0
   557                           tblptru	equ	0xFF8
   558                           tblptrh	equ	0xFF7
   559                           tblptrl	equ	0xFF6
   560                           tablat	equ	0xFF5
   561                           prodh	equ	0xFF4
   562                           prodl	equ	0xFF3
   563                           postinc0	equ	0xFEE
   564                           wreg	equ	0xFE8
   565                           postdec1	equ	0xFE5
   566                           plusw1	equ	0xFE3
   567                           fsr1l	equ	0xFE1
   568                           indf2	equ	0xFDF
   569                           plusw2	equ	0xFDB
   570                           fsr2h	equ	0xFDA
   571                           fsr2l	equ	0xFD9
   572                           status	equ	0xFD8
   573                           
   574 ;; *************** function _lcd_init *****************
   575 ;; Defined at:
   576 ;;		line 48 in file "lcd.c"
   577 ;; Parameters:    Size  Location     Type
   578 ;;		None
   579 ;; Auto vars:     Size  Location     Type
   580 ;;  i               1    6[COMRAM] unsigned char 
   581 ;; Return value:  Size  Location     Type
   582 ;;                  1    wreg      void 
   583 ;; Registers used:
   584 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   585 ;; Tracked objects:
   586 ;;		On entry : 0/0
   587 ;;		On exit  : 0/0
   588 ;;		Unchanged: 0/0
   589 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   590 ;;      Params:         0       0       0       0       0       0       0       0       0
   591 ;;      Locals:         1       0       0       0       0       0       0       0       0
   592 ;;      Temps:          1       0       0       0       0       0       0       0       0
   593 ;;      Totals:         2       0       0       0       0       0       0       0       0
   594 ;;Total ram usage:        2 bytes
   595 ;; Hardware stack levels used:    1
   596 ;; Hardware stack levels required when called:    2
   597 ;; This function calls:
   598 ;;		_send_byte
   599 ;;		_send_nibble
   600 ;; This function is called by:
   601 ;;		_main
   602 ;; This function uses a non-reentrant model
   603 ;;
   604                           
   605                           	psect	text2
   606  0008DE                     __ptext2:
   607                           	opt stack 0
   608  0008DE                     _lcd_init:
   609                           	opt stack 28
   610                           
   611                           ;lcd.c: 49: byte i;
   612                           ;lcd.c: 50: TRISD = 0xF0;
   613                           
   614                           ;incstack = 0
   615  0008DE  0EF0               	movlw	240
   616  0008E0  6E95               	movwf	3989,c	;volatile
   617                           
   618                           ;lcd.c: 51: TRISCbits.RC0 = TRISCbits.RC1 = 0;
   619  0008E2  9294               	bcf	3988,1,c	;volatile
   620  0008E4  9094               	bcf	3988,0,c	;volatile
   621                           
   622                           ;lcd.c: 52: LATCbits.LC0 = LATCbits.LC1 = 0;
   623  0008E6  928B               	bcf	3979,1,c	;volatile
   624  0008E8  908B               	bcf	3979,0,c	;volatile
   625                           
   626                           ;lcd.c: 53: LATD = 0x0F & 0x00;
   627  0008EA  0E00               	movlw	0
   628  0008EC  6E8C               	movwf	3980,c	;volatile
   629                           
   630                           ;lcd.c: 54: _delay((unsigned long)((15)*(20000000/4000.0)));
   631  0008EE  0E62               	movlw	98
   632  0008F0  6E2B               	movwf	??_lcd_init& (0+255),c
   633  0008F2  0E66               	movlw	102
   634  0008F4                     u407:
   635  0008F4  2EE8               	decfsz	wreg,f,c
   636  0008F6  D7FE               	bra	u407
   637  0008F8  2E2B               	decfsz	??_lcd_init& (0+255),f,c
   638  0008FA  D7FC               	bra	u407
   639                           
   640                           ;lcd.c: 55: for (i = 0; i < 3;_delay((unsigned long)((5)*(20000000/4000.0))), ++i)
   641  0008FC  0E00               	movlw	0
   642  0008FE  6E2C               	movwf	lcd_init@i,c
   643  000900                     l908:
   644  000900  0E02               	movlw	2
   645  000902  642C               	cpfsgt	lcd_init@i,c
   646  000904  D001               	goto	l41
   647  000906  D00F               	goto	u270
   648  000908                     l41:
   649                           
   650                           ;lcd.c: 56: send_nibble(0,3);
   651  000908  0E03               	movlw	3
   652  00090A  6E26               	movwf	send_nibble@data,c
   653  00090C  0E00               	movlw	0
   654  00090E  EC17  F005         	call	_send_nibble
   655  000912  0E21               	movlw	33
   656  000914  6E2B               	movwf	??_lcd_init& (0+255),c
   657  000916  0E76               	movlw	118
   658  000918                     u417:
   659  000918  2EE8               	decfsz	wreg,f,c
   660  00091A  D7FE               	bra	u417
   661  00091C  2E2B               	decfsz	??_lcd_init& (0+255),f,c
   662  00091E  D7FC               	bra	u417
   663  000920  D000               	nop2	
   664  000922  2A2C               	incf	lcd_init@i,f,c
   665  000924  D7ED               	goto	l908
   666  000926                     u270:
   667                           
   668                           ;lcd.c: 57: send_nibble(0,2);
   669  000926  0E02               	movlw	2
   670  000928  6E26               	movwf	send_nibble@data,c
   671  00092A  0E00               	movlw	0
   672  00092C  EC17  F005         	call	_send_nibble
   673                           
   674                           ;lcd.c: 58: _delay((unsigned long)((5)*(20000000/4000.0)));
   675  000930  0E21               	movlw	33
   676  000932  6E2B               	movwf	??_lcd_init& (0+255),c
   677  000934  0E76               	movlw	118
   678  000936                     u427:
   679  000936  2EE8               	decfsz	wreg,f,c
   680  000938  D7FE               	bra	u427
   681  00093A  2E2B               	decfsz	??_lcd_init& (0+255),f,c
   682  00093C  D7FC               	bra	u427
   683  00093E  D000               	nop2	
   684                           
   685                           ;lcd.c: 59: for (i = 0; i < 4; _delay((unsigned long)((5)*(20000000/4000.0))),++i)
   686  000940  0E00               	movlw	0
   687  000942  6E2C               	movwf	lcd_init@i,c
   688  000944                     l926:
   689  000944  0E03               	movlw	3
   690  000946  642C               	cpfsgt	lcd_init@i,c
   691  000948  D001               	goto	l43
   692  00094A  D018               	goto	u290
   693  00094C                     l43:
   694                           
   695                           ;lcd.c: 60: send_byte(0,init_str[i]);
   696  00094C  502C               	movf	lcd_init@i,w,c
   697  00094E  0D01               	mullw	1
   698  000950  0E01               	movlw	low _init_str
   699  000952  24F3               	addwf	prodl,w,c
   700  000954  6EF6               	movwf	tblptrl,c
   701  000956  0E08               	movlw	high _init_str
   702  000958  20F4               	addwfc	prodh,w,c
   703  00095A  6EF7               	movwf	tblptrh,c
   704  00095C                     	if	0	;There are less than 3 active tblptr bytes
   705  00095C                     	endif
   706  00095C  0008               	tblrd		*
   707  00095E  CFF5 F029          	movff	tablat,send_byte@data
   708  000962  0E00               	movlw	0
   709  000964  EC41  F005         	call	_send_byte
   710  000968  0E21               	movlw	33
   711  00096A  6E2B               	movwf	??_lcd_init& (0+255),c
   712  00096C  0E76               	movlw	118
   713  00096E                     u437:
   714  00096E  2EE8               	decfsz	wreg,f,c
   715  000970  D7FE               	bra	u437
   716  000972  2E2B               	decfsz	??_lcd_init& (0+255),f,c
   717  000974  D7FC               	bra	u437
   718  000976  D000               	nop2	
   719  000978  2A2C               	incf	lcd_init@i,f,c
   720  00097A  D7E4               	goto	l926
   721  00097C                     u290:
   722                           
   723                           ;lcd.c: 61: _delay((unsigned long)((1)*(20000000/4000.0)));
   724  00097C  0E07               	movlw	7
   725  00097E  6E2B               	movwf	??_lcd_init& (0+255),c
   726  000980  0E7D               	movlw	125
   727  000982                     u447:
   728  000982  2EE8               	decfsz	wreg,f,c
   729  000984  D7FE               	bra	u447
   730  000986  2E2B               	decfsz	??_lcd_init& (0+255),f,c
   731  000988  D7FC               	bra	u447
   732  00098A  F000               	nop	
   733  00098C  0012               	return		;funcret
   734  00098E                     __end_of_lcd_init:
   735                           	opt stack 0
   736                           tblptru	equ	0xFF8
   737                           tblptrh	equ	0xFF7
   738                           tblptrl	equ	0xFF6
   739                           tablat	equ	0xFF5
   740                           prodh	equ	0xFF4
   741                           prodl	equ	0xFF3
   742                           postinc0	equ	0xFEE
   743                           wreg	equ	0xFE8
   744                           postdec1	equ	0xFE5
   745                           plusw1	equ	0xFE3
   746                           fsr1l	equ	0xFE1
   747                           indf2	equ	0xFDF
   748                           plusw2	equ	0xFDB
   749                           fsr2h	equ	0xFDA
   750                           fsr2l	equ	0xFD9
   751                           status	equ	0xFD8
   752                           
   753 ;; *************** function _lcd_gotoxy *****************
   754 ;; Defined at:
   755 ;;		line 43 in file "lcd.c"
   756 ;; Parameters:    Size  Location     Type
   757 ;;  x               1    wreg     unsigned char 
   758 ;;  y               1    5[COMRAM] unsigned char 
   759 ;; Auto vars:     Size  Location     Type
   760 ;;  x               1    6[COMRAM] unsigned char 
   761 ;;  dir             1    9[COMRAM] unsigned char 
   762 ;; Return value:  Size  Location     Type
   763 ;;                  1    wreg      void 
   764 ;; Registers used:
   765 ;;		wreg, status,2, status,0, cstack
   766 ;; Tracked objects:
   767 ;;		On entry : 0/0
   768 ;;		On exit  : 0/0
   769 ;;		Unchanged: 0/0
   770 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   771 ;;      Params:         1       0       0       0       0       0       0       0       0
   772 ;;      Locals:         4       0       0       0       0       0       0       0       0
   773 ;;      Temps:          0       0       0       0       0       0       0       0       0
   774 ;;      Totals:         5       0       0       0       0       0       0       0       0
   775 ;;Total ram usage:        5 bytes
   776 ;; Hardware stack levels used:    1
   777 ;; Hardware stack levels required when called:    2
   778 ;; This function calls:
   779 ;;		_send_byte
   780 ;; This function is called by:
   781 ;;		_main
   782 ;; This function uses a non-reentrant model
   783 ;;
   784                           
   785                           	psect	text3
   786  000A00                     __ptext3:
   787                           	opt stack 0
   788  000A00                     _lcd_gotoxy:
   789                           	opt stack 28
   790                           
   791                           ;incstack = 0
   792                           ;lcd_gotoxy@x stored from wreg
   793  000A00  6E2C               	movwf	lcd_gotoxy@x,c
   794                           
   795                           ;lcd.c: 44: byte dir = y!=1? 0x40:0;
   796  000A02  042B               	decf	lcd_gotoxy@y,w,c
   797  000A04  A4D8               	btfss	status,2,c
   798  000A06  D004               	goto	l35
   799  000A08  0E00               	movlw	0
   800  000A0A  6E2E               	movwf	_lcd_gotoxy$123+1,c
   801  000A0C  0E00               	movlw	0
   802  000A0E  D003               	goto	L1
   803  000A10                     l35:
   804  000A10  0E00               	movlw	0
   805  000A12  6E2E               	movwf	_lcd_gotoxy$123+1,c
   806  000A14  0E40               	movlw	64
   807  000A16                     L1:
   808  000A16  6E2D               	movwf	_lcd_gotoxy$123,c
   809  000A18  C02D  F02F         	movff	_lcd_gotoxy$123,lcd_gotoxy@dir
   810                           
   811                           ;lcd.c: 45: dir += x-1;
   812  000A1C  042C               	decf	lcd_gotoxy@x,w,c
   813  000A1E  262F               	addwf	lcd_gotoxy@dir,f,c
   814                           
   815                           ;lcd.c: 46: send_byte(0,0x80|dir);
   816  000A20  502F               	movf	lcd_gotoxy@dir,w,c
   817  000A22  0980               	iorlw	128
   818  000A24  6E29               	movwf	send_byte@data,c
   819  000A26  0E00               	movlw	0
   820  000A28  EC41  F005         	call	_send_byte
   821  000A2C  0012               	return		;funcret
   822  000A2E                     __end_of_lcd_gotoxy:
   823                           	opt stack 0
   824                           tblptru	equ	0xFF8
   825                           tblptrh	equ	0xFF7
   826                           tblptrl	equ	0xFF6
   827                           tablat	equ	0xFF5
   828                           prodh	equ	0xFF4
   829                           prodl	equ	0xFF3
   830                           postinc0	equ	0xFEE
   831                           wreg	equ	0xFE8
   832                           postdec1	equ	0xFE5
   833                           plusw1	equ	0xFE3
   834                           fsr1l	equ	0xFE1
   835                           indf2	equ	0xFDF
   836                           plusw2	equ	0xFDB
   837                           fsr2h	equ	0xFDA
   838                           fsr2l	equ	0xFD9
   839                           status	equ	0xFD8
   840                           
   841 ;; *************** function _send_byte *****************
   842 ;; Defined at:
   843 ;;		line 32 in file "lcd.c"
   844 ;; Parameters:    Size  Location     Type
   845 ;;  comand          1    wreg     unsigned char 
   846 ;;  data            1    3[COMRAM] unsigned char 
   847 ;; Auto vars:     Size  Location     Type
   848 ;;  comand          1    4[COMRAM] unsigned char 
   849 ;; Return value:  Size  Location     Type
   850 ;;                  1    wreg      void 
   851 ;; Registers used:
   852 ;;		wreg, status,2, status,0, cstack
   853 ;; Tracked objects:
   854 ;;		On entry : 0/0
   855 ;;		On exit  : 0/0
   856 ;;		Unchanged: 0/0
   857 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   858 ;;      Params:         1       0       0       0       0       0       0       0       0
   859 ;;      Locals:         1       0       0       0       0       0       0       0       0
   860 ;;      Temps:          0       0       0       0       0       0       0       0       0
   861 ;;      Totals:         2       0       0       0       0       0       0       0       0
   862 ;;Total ram usage:        2 bytes
   863 ;; Hardware stack levels used:    1
   864 ;; Hardware stack levels required when called:    1
   865 ;; This function calls:
   866 ;;		_send_nibble
   867 ;; This function is called by:
   868 ;;		_set_sgram_byte
   869 ;;		_lcd_gotoxy
   870 ;;		_lcd_init
   871 ;;		_main
   872 ;; This function uses a non-reentrant model
   873 ;;
   874                           
   875                           	psect	text4
   876  000A82                     __ptext4:
   877                           	opt stack 0
   878  000A82                     _send_byte:
   879                           	opt stack 28
   880                           
   881                           ;incstack = 0
   882                           ;send_byte@comand stored from wreg
   883  000A82  6E2A               	movwf	send_byte@comand,c
   884                           
   885                           ;lcd.c: 33: send_nibble(comand,data>>4);
   886  000A84  3829               	swapf	send_byte@data,w,c
   887  000A86  0B0F               	andlw	15
   888  000A88  6E26               	movwf	send_nibble@data,c
   889  000A8A  502A               	movf	send_byte@comand,w,c
   890  000A8C  EC17  F005         	call	_send_nibble
   891                           
   892                           ;lcd.c: 34: send_nibble(comand,data);
   893  000A90  C029  F026         	movff	send_byte@data,send_nibble@data
   894  000A94  502A               	movf	send_byte@comand,w,c
   895  000A96  EC17  F005         	call	_send_nibble
   896  000A9A  0012               	return		;funcret
   897  000A9C                     __end_of_send_byte:
   898                           	opt stack 0
   899                           tblptru	equ	0xFF8
   900                           tblptrh	equ	0xFF7
   901                           tblptrl	equ	0xFF6
   902                           tablat	equ	0xFF5
   903                           prodh	equ	0xFF4
   904                           prodl	equ	0xFF3
   905                           postinc0	equ	0xFEE
   906                           wreg	equ	0xFE8
   907                           postdec1	equ	0xFE5
   908                           plusw1	equ	0xFE3
   909                           fsr1l	equ	0xFE1
   910                           indf2	equ	0xFDF
   911                           plusw2	equ	0xFDB
   912                           fsr2h	equ	0xFDA
   913                           fsr2l	equ	0xFD9
   914                           status	equ	0xFD8
   915                           
   916 ;; *************** function _send_nibble *****************
   917 ;; Defined at:
   918 ;;		line 25 in file "lcd.c"
   919 ;; Parameters:    Size  Location     Type
   920 ;;  comand          1    wreg     unsigned char 
   921 ;;  data            1    0[COMRAM] unsigned char 
   922 ;; Auto vars:     Size  Location     Type
   923 ;;  comand          1    1[COMRAM] unsigned char 
   924 ;;  i               1    2[COMRAM] unsigned char 
   925 ;; Return value:  Size  Location     Type
   926 ;;                  1    wreg      void 
   927 ;; Registers used:
   928 ;;		wreg, status,2, status,0
   929 ;; Tracked objects:
   930 ;;		On entry : 0/0
   931 ;;		On exit  : 0/0
   932 ;;		Unchanged: 0/0
   933 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   934 ;;      Params:         1       0       0       0       0       0       0       0       0
   935 ;;      Locals:         2       0       0       0       0       0       0       0       0
   936 ;;      Temps:          0       0       0       0       0       0       0       0       0
   937 ;;      Totals:         3       0       0       0       0       0       0       0       0
   938 ;;Total ram usage:        3 bytes
   939 ;; Hardware stack levels used:    1
   940 ;; This function calls:
   941 ;;		Nothing
   942 ;; This function is called by:
   943 ;;		_send_byte
   944 ;;		_lcd_init
   945 ;; This function uses a non-reentrant model
   946 ;;
   947                           
   948                           	psect	text5
   949  000A2E                     __ptext5:
   950                           	opt stack 0
   951  000A2E                     _send_nibble:
   952                           	opt stack 28
   953                           
   954                           ;incstack = 0
   955                           ;send_nibble@comand stored from wreg
   956  000A2E  6E27               	movwf	send_nibble@comand,c
   957                           
   958                           ;lcd.c: 26: LATCbits.LC1 = comand; __nop();
   959  000A30  B027               	btfsc	send_nibble@comand,0,c
   960  000A32  D002               	bra	u205
   961  000A34  928B               	bcf	3979,1,c	;volatile
   962  000A36  D001               	bra	u206
   963  000A38                     u205:
   964  000A38  828B               	bsf	3979,1,c	;volatile
   965  000A3A                     u206:
   966  000A3A  F000               	nop	
   967                           
   968                           ;lcd.c: 27: LATCbits.LC0 = 1; __nop();
   969  000A3C  808B               	bsf	3979,0,c	;volatile
   970  000A3E  F000               	nop	
   971                           
   972                           ;lcd.c: 28: LATD = 0x0F & data; __nop();
   973  000A40  5026               	movf	send_nibble@data,w,c
   974  000A42  0B0F               	andlw	15
   975  000A44  6E8C               	movwf	3980,c	;volatile
   976  000A46  F000               	nop	
   977                           
   978                           ;lcd.c: 29: LATCbits.LC0 = 0;
   979  000A48  908B               	bcf	3979,0,c	;volatile
   980                           
   981                           ;lcd.c: 30: for(byte i=0;i<20;i++) __nop();
   982  000A4A  0E00               	movlw	0
   983  000A4C  6E28               	movwf	send_nibble@i,c
   984  000A4E                     l858:
   985  000A4E  0E13               	movlw	19
   986  000A50  6428               	cpfsgt	send_nibble@i,c
   987  000A52  D001               	goto	l21
   988  000A54  0012               	return	
   989  000A56                     l21:
   990  000A56  F000               	nop	
   991  000A58  2A28               	incf	send_nibble@i,f,c
   992  000A5A  D7F9               	goto	l858
   993  000A5C                     __end_of_send_nibble:
   994                           	opt stack 0
   995                           tblptru	equ	0xFF8
   996                           tblptrh	equ	0xFF7
   997                           tblptrl	equ	0xFF6
   998                           tablat	equ	0xFF5
   999                           prodh	equ	0xFF4
  1000                           prodl	equ	0xFF3
  1001                           postinc0	equ	0xFEE
  1002                           wreg	equ	0xFE8
  1003                           postdec1	equ	0xFE5
  1004                           plusw1	equ	0xFE3
  1005                           fsr1l	equ	0xFE1
  1006                           indf2	equ	0xFDF
  1007                           plusw2	equ	0xFDB
  1008                           fsr2h	equ	0xFDA
  1009                           fsr2l	equ	0xFD9
  1010                           status	equ	0xFD8
  1011                           tblptru	equ	0xFF8
  1012                           tblptrh	equ	0xFF7
  1013                           tblptrl	equ	0xFF6
  1014                           tablat	equ	0xFF5
  1015                           prodh	equ	0xFF4
  1016                           prodl	equ	0xFF3
  1017                           postinc0	equ	0xFEE
  1018                           wreg	equ	0xFE8
  1019                           postdec1	equ	0xFE5
  1020                           plusw1	equ	0xFE3
  1021                           fsr1l	equ	0xFE1
  1022                           indf2	equ	0xFDF
  1023                           plusw2	equ	0xFDB
  1024                           fsr2h	equ	0xFDA
  1025                           fsr2l	equ	0xFD9
  1026                           status	equ	0xFD8
  1027                           
  1028                           	psect	rparam
  1029  0000                     tblptru	equ	0xFF8
  1030                           tblptrh	equ	0xFF7
  1031                           tblptrl	equ	0xFF6
  1032                           tablat	equ	0xFF5
  1033                           prodh	equ	0xFF4
  1034                           prodl	equ	0xFF3
  1035                           postinc0	equ	0xFEE
  1036                           wreg	equ	0xFE8
  1037                           postdec1	equ	0xFE5
  1038                           plusw1	equ	0xFE3
  1039                           fsr1l	equ	0xFE1
  1040                           indf2	equ	0xFDF
  1041                           plusw2	equ	0xFDB
  1042                           fsr2h	equ	0xFDA
  1043                           fsr2l	equ	0xFD9
  1044                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    4
    Data        37
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     27      64
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    set_sgram_byte@ptr	PTR unsigned char  size(2) Largest target is 24
		 -> animation(COMRAM[24]), 


Critical Paths under _main in COMRAM

    _main->_lcd_gotoxy
    _set_sgram_byte->_send_byte
    _lcd_init->_send_byte
    _lcd_gotoxy->_send_byte
    _send_byte->_send_nibble

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                17    17      0    5001
                                             10 COMRAM    17    17      0
                         _lcd_gotoxy
                           _lcd_init
                          _send_byte
                     _set_sgram_byte
 ---------------------------------------------------------------------------------
 (1) _set_sgram_byte                                       4     2      2    1183
                                              5 COMRAM     4     2      2
                          _send_byte
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             2     2      0    1446
                                              5 COMRAM     2     2      0
                          _send_byte
                        _send_nibble
 ---------------------------------------------------------------------------------
 (1) _lcd_gotoxy                                           5     4      1    1182
                                              5 COMRAM     5     4      1
                          _send_byte
 ---------------------------------------------------------------------------------
 (2) _send_byte                                            2     1      1     938
                                              3 COMRAM     2     1      1
                        _send_nibble
 ---------------------------------------------------------------------------------
 (3) _send_nibble                                          3     2      1     394
                                              0 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _lcd_gotoxy
     _send_byte
       _send_nibble
   _lcd_init
     _send_byte
       _send_nibble
     _send_nibble
   _send_byte
     _send_nibble
   _set_sgram_byte
     _send_byte
       _send_nibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     1B      40       1       67.4%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      40      20        0.0%
DATA                 0      0      40       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sat Apr 21 12:14:21 2018

                     l21 0A56                       l41 0908                       l35 0A10  
                     l43 094C                       l29 09B8                       l61 08AE  
                     l54 083A                       l56 087C                       l59 0896  
            __CFG_BORV$3 000000             __CFG_CP0$OFF 000000             __CFG_CP1$OFF 000000  
           __CFG_CP2$OFF 000000             __CFG_CP3$OFF 000000                      l908 0900  
                    l926 0944                      l950 0832                      l858 0A4E  
                    l874 09B0                      l966 0874                      l984 089E  
                    l978 088E             __CFG_CPB$OFF 000000                      u205 0A38  
                    u301 0818                      u206 0A3A                      u320 0858  
                    u340 088A                      u270 0926                      u407 08F4  
                    u417 0918                      u290 097C                      u370 08C4  
           __CFG_CPD$OFF 000000                      u427 0936                      u437 096E  
                    u447 0982                      u397 08B4             __CFG_BOR$OFF 000000  
                    prod 000FF3                      wreg 000FE8             __CFG_FOSC$HS 000000  
            lcd_gotoxy@x 002C              lcd_gotoxy@y 002B             __CFG_LVP$OFF 000000  
           __CFG_WDT$OFF 000000                     _LATD 000F8C                     _main 0806  
            main@my_name 0031                     fsr2h 000FDA                     indf2 000FDF  
                   fsr1l 000FE1                     fsr2l 000FD9                     prodh 000FF4  
                   prodl 000FF3                     start 0000            __CFG_IESO$OFF 000000  
          __CFG_MCLRE$ON 000000             ___param_bank 000000            __CFG_PLLDIV$1 000000  
         __CFG_CCP2MX$ON 000000                    ?_main 0026                    _CMCON 000FB4  
          __CFG_USBDIV$1 000000                    _TRISD 000F95            __CFG_PWRT$OFF 000000  
          __CFG_WRT0$OFF 000000          send_byte@comand 002A            __CFG_WRT1$OFF 000000  
          __CFG_WRT2$OFF 000000            __CFG_WRT3$OFF 000000           __CFG_EBTR0$OFF 000000  
         __CFG_FCMEN$OFF 000000           __CFG_EBTR1$OFF 000000           __CFG_EBTR2$OFF 000000  
         __CFG_EBTR3$OFF 000000            __CFG_WRTB$OFF 000000            __CFG_WRTC$OFF 000000  
          __CFG_WRTD$OFF 000000           __CFG_EBTRB$OFF 000000                    main@i 0040  
                  main@j 003E                    tablat 000FF5          send_nibble@data 0026  
                  plusw1 000FE3                    plusw2 000FDB                    status 000FD8  
         __CFG_ICPRT$OFF 000000          __initialization 09D2             __end_of_main 08DE  
          lcd_gotoxy@dir 002F                   ??_main 0030            __activetblptr 000001  
                 _ADCON1 000FC1             ?_send_nibble 0026           __CFG_XINST$OFF 000000  
       __end_of_lcd_init 098E           __CFG_STVREN$ON 000000         __end_of_init_str 0805  
           __pdataCOMRAM 0001             __mediumconst 0000                   tblptrh 000FF7  
                 tblptrl 000FF6                   tblptru 000FF8          set_sgram_byte@i 002E  
             __accesstop 0060  __end_of__initialization 09F2          __CFG_PBADEN$OFF 000000  
          ___rparam_used 000001           __pcstackCOMRAM 0026  __size_of_set_sgram_byte 0044  
     __size_of_send_byte 001A               _lcd_gotoxy 0A00                ?_lcd_init 0026  
        __CFG_VREGEN$OFF 000000     __size_of_send_nibble 002E                  __Hparam 0000  
                __Lparam 0000             __psmallconst 0800                  __pcinit 09D2  
                __ramtop 0800                  __ptext0 0806                  __ptext1 098E  
                __ptext2 08DE                  __ptext3 0A00                  __ptext4 0A82  
                __ptext5 0A2E               ??_lcd_init 002B     end_of_initialization 09F2  
      __end_of_send_byte 0A9C        send_nibble@comand 0027                  postdec1 000FE5  
                postinc0 000FEE                _TRISCbits 000F94              ?_lcd_gotoxy 002B  
          send_byte@data 0029           _set_sgram_byte 098E            __pidataCOMRAM 0A5C  
    start_initialization 09D2   __end_of_set_sgram_byte 09D2      __size_of_lcd_gotoxy 002E  
       __CFG_LPT1OSC$OFF 000000        __size_of_lcd_init 00B0          ?_set_sgram_byte 002B  
              _animation 000E              __smallconst 0800            ??_send_nibble 0027  
               _LATCbits 000F8B                _send_byte 0A82         __CFG_WDTPS$32768 000000  
              main@F3819 0001                lcd_init@i 002C             send_nibble@i 0028  
           ??_lcd_gotoxy 002C                copy_data0 09E6      __end_of_send_nibble 0A5C  
             ?_send_byte 0029                 __Hrparam 0000                 __Lrparam 0000  
           __Lsmallconst 0800       __end_of_lcd_gotoxy 0A2E                 _lcd_init 08DE  
          __size_of_main 00D8                 _init_str 0801           _lcd_gotoxy$123 002D  
  __CFG_CPUDIV$OSC1_PLL2 000000              _send_nibble 0A2E         ??_set_sgram_byte 002D  
            ??_send_byte 002A        set_sgram_byte@dir 002D        set_sgram_byte@ptr 002B  
