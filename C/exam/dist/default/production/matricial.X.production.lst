

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Mon May 07 08:27:35 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1
    12                           	psect	text4,global,reloc=2,class=CODE,delta=1
    13                           	psect	text5,global,reloc=2,class=CODE,delta=1
    14                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    15                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    16  0000                     
    17                           ; Version 1.45 (B)
    18                           ; Generated 30/01/2018 GMT
    19                           ; 
    20                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    21                           ; All rights reserved.
    22                           ; 
    23                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    24                           ; 
    25                           ; Redistribution and use in source and binary forms, with or without modification, are
    26                           ; permitted provided that the following conditions are met:
    27                           ; 
    28                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    29                           ;        conditions and the following disclaimer.
    30                           ; 
    31                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    32                           ;        of conditions and the following disclaimer in the documentation and/or other
    33                           ;        materials provided with the distribution.
    34                           ; 
    35                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    36                           ;        software without specific prior written permission.
    37                           ; 
    38                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    39                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    40                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    41                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    42                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    43                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    44                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    45                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    46                           ; 
    47                           ; 
    48                           ; Code-generator required, PIC18F4550 Definitions
    49                           ; 
    50                           ; SFR Addresses
    51  0000                     
    52                           	psect	smallconst
    53  000800                     __psmallconst:
    54                           	opt stack 0
    55  000800  00                 	db	0
    56  000801                     _completo:
    57                           	opt stack 0
    58  000801  70                 	db	112
    59  000802  69                 	db	105
    60  000803  73                 	db	115
    61  000804  6F                 	db	111
    62  000805  20                 	db	32
    63  000806  33                 	db	51
    64  000807  00                 	db	0
    65  000808                     __end_of_completo:
    66                           	opt stack 0
    67  000808                     _lleno:
    68                           	opt stack 0
    69  000808  70                 	db	112
    70  000809  69                 	db	105
    71  00080A  73                 	db	115
    72  00080B  6F                 	db	111
    73  00080C  20                 	db	32
    74  00080D  32                 	db	50
    75  00080E  00                 	db	0
    76  00080F                     __end_of_lleno:
    77                           	opt stack 0
    78  00080F                     _vacio:
    79                           	opt stack 0
    80  00080F  70                 	db	112
    81  000810  69                 	db	105
    82  000811  73                 	db	115
    83  000812  6F                 	db	111
    84  000813  20                 	db	32
    85  000814  31                 	db	49
    86  000815  00                 	db	0
    87  000816                     __end_of_vacio:
    88                           	opt stack 0
    89  000816                     _init_str:
    90                           	opt stack 0
    91  000816  28                 	db	40
    92  000817  0C                 	db	12
    93  000818  01                 	db	1
    94  000819  06                 	db	6
    95  00081A                     __end_of_init_str:
    96                           	opt stack 0
    97  0000                     _PORTBbits	set	3969
    98  0000                     _LATB	set	3978
    99  0000                     _INTCON2bits	set	4081
   100  0000                     _TRISB	set	3987
   101  0000                     _CMCON	set	4020
   102  0000                     _ADCON1	set	4033
   103  0000                     _TRISCbits	set	3988
   104  0000                     _TRISD	set	3989
   105  0000                     _LATD	set	3980
   106  0000                     _LATCbits	set	3979
   107                           
   108                           ; #config settings
   109  00081A  00                 	db	0	; dummy byte at the end
   110  0000                     
   111                           	psect	cinit
   112  000BD6                     __pcinit:
   113                           	opt stack 0
   114  000BD6                     start_initialization:
   115                           	opt stack 0
   116  000BD6                     __initialization:
   117                           	opt stack 0
   118  000BD6                     end_of_initialization:
   119                           	opt stack 0
   120  000BD6                     __end_of__initialization:
   121                           	opt stack 0
   122  000BD6  0E00               	movlw	low (__Lsmallconst shr (0+16))
   123  000BD8  6EF8               	movwf	tblptru,c
   124  000BDA  0E08               	movlw	high __Lsmallconst
   125  000BDC  6EF7               	movwf	tblptrh,c
   126  000BDE  0100               	movlb	0
   127  000BE0  EFDD  F004         	goto	_main	;jump to C main() function
   128                           tblptru	equ	0xFF8
   129                           tblptrh	equ	0xFF7
   130                           
   131                           	psect	cstackCOMRAM
   132  000001                     __pcstackCOMRAM:
   133                           	opt stack 0
   134  000001                     send_nibble@data:
   135                           	opt stack 0
   136  000001                     _kbd_getc$254:
   137                           	opt stack 0
   138                           
   139                           ; 2 bytes @ 0x0
   140  000001                     	ds	1
   141  000002                     send_nibble@comand:
   142                           	opt stack 0
   143                           
   144                           ; 1 bytes @ 0x1
   145  000002                     	ds	1
   146  000003                     send_nibble@i:
   147                           	opt stack 0
   148  000003                     _kbd_getc$255:
   149                           	opt stack 0
   150                           
   151                           ; 2 bytes @ 0x2
   152  000003                     	ds	1
   153  000004                     send_byte@data:
   154                           	opt stack 0
   155                           
   156                           ; 1 bytes @ 0x3
   157  000004                     	ds	1
   158  000005                     send_byte@comand:
   159                           	opt stack 0
   160  000005                     _kbd_getc$256:
   161                           	opt stack 0
   162                           
   163                           ; 2 bytes @ 0x4
   164  000005                     	ds	1
   165  000006                     ??_lcd_init:
   166                           
   167                           ; 1 bytes @ 0x5
   168  000006                     	ds	1
   169  000007                     lcd_init@i:
   170                           	opt stack 0
   171  000007                     _kbd_getc$257:
   172                           	opt stack 0
   173                           
   174                           ; 2 bytes @ 0x6
   175  000007                     	ds	2
   176  000009                     _kbd_getc$258:
   177                           	opt stack 0
   178                           
   179                           ; 2 bytes @ 0x8
   180  000009                     	ds	2
   181  00000B                     _kbd_getc$259:
   182                           	opt stack 0
   183                           
   184                           ; 2 bytes @ 0xA
   185  00000B                     	ds	2
   186  00000D                     _kbd_getc$260:
   187                           	opt stack 0
   188                           
   189                           ; 2 bytes @ 0xC
   190  00000D                     	ds	2
   191  00000F                     _kbd_getc$261:
   192                           	opt stack 0
   193                           
   194                           ; 2 bytes @ 0xE
   195  00000F                     	ds	2
   196  000011                     _kbd_getc$262:
   197                           	opt stack 0
   198                           
   199                           ; 2 bytes @ 0x10
   200  000011                     	ds	2
   201  000013                     _kbd_getc$263:
   202                           	opt stack 0
   203                           
   204                           ; 2 bytes @ 0x12
   205  000013                     	ds	2
   206  000015                     _kbd_getc$264:
   207                           	opt stack 0
   208                           
   209                           ; 2 bytes @ 0x14
   210  000015                     	ds	2
   211  000017                     _kbd_getc$265:
   212                           	opt stack 0
   213                           
   214                           ; 2 bytes @ 0x16
   215  000017                     	ds	2
   216  000019                     _kbd_getc$266:
   217                           	opt stack 0
   218                           
   219                           ; 2 bytes @ 0x18
   220  000019                     	ds	2
   221  00001B                     _kbd_getc$267:
   222                           	opt stack 0
   223                           
   224                           ; 2 bytes @ 0x1A
   225  00001B                     	ds	2
   226  00001D                     _kbd_getc$268:
   227                           	opt stack 0
   228                           
   229                           ; 2 bytes @ 0x1C
   230  00001D                     	ds	2
   231  00001F                     _kbd_getc$269:
   232                           	opt stack 0
   233                           
   234                           ; 2 bytes @ 0x1E
   235  00001F                     	ds	2
   236  000021                     kbd_getc@c:
   237                           	opt stack 0
   238                           
   239                           ; 1 bytes @ 0x20
   240  000021                     	ds	1
   241  000022                     ??_main:
   242                           
   243                           ; 1 bytes @ 0x21
   244  000022                     	ds	2
   245  000024                     main@a:
   246                           	opt stack 0
   247                           
   248                           ; 1 bytes @ 0x23
   249  000024                     	ds	1
   250  000025                     main@a_237:
   251                           	opt stack 0
   252                           
   253                           ; 1 bytes @ 0x24
   254  000025                     	ds	1
   255  000026                     main@a_238:
   256                           	opt stack 0
   257                           
   258                           ; 1 bytes @ 0x25
   259  000026                     	ds	1
   260  000027                     main@c:
   261                           	opt stack 0
   262                           
   263                           ; 1 bytes @ 0x26
   264  000027                     	ds	1
   265                           tblptru	equ	0xFF8
   266                           tblptrh	equ	0xFF7
   267                           
   268 ;;
   269 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   270 ;;
   271 ;; *************** function _main *****************
   272 ;; Defined at:
   273 ;;		line 9 in file "main.c"
   274 ;; Parameters:    Size  Location     Type
   275 ;;		None
   276 ;; Auto vars:     Size  Location     Type
   277 ;;  a               1   37[COMRAM] unsigned char 
   278 ;;  a               1   36[COMRAM] unsigned char 
   279 ;;  a               1   35[COMRAM] unsigned char 
   280 ;;  c               1   38[COMRAM] unsigned char 
   281 ;; Return value:  Size  Location     Type
   282 ;;                  1    wreg      void 
   283 ;; Registers used:
   284 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   285 ;; Tracked objects:
   286 ;;		On entry : 0/0
   287 ;;		On exit  : 0/0
   288 ;;		Unchanged: 0/0
   289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   290 ;;      Params:         0       0       0       0       0       0       0       0       0
   291 ;;      Locals:         4       0       0       0       0       0       0       0       0
   292 ;;      Temps:          2       0       0       0       0       0       0       0       0
   293 ;;      Totals:         6       0       0       0       0       0       0       0       0
   294 ;;Total ram usage:        6 bytes
   295 ;; Hardware stack levels required when called:    3
   296 ;; This function calls:
   297 ;;		_kbd_getc
   298 ;;		_lcd_init
   299 ;;		_send_byte
   300 ;;		_setup
   301 ;; This function is called by:
   302 ;;		Startup code after reset
   303 ;; This function uses a non-reentrant model
   304 ;;
   305                           
   306                           	psect	text0
   307  0009BA                     __ptext0:
   308                           	opt stack 0
   309  0009BA                     _main:
   310                           	opt stack 28
   311                           
   312                           ;main.c: 10: char c;
   313                           ;main.c: 11: setup();
   314                           
   315                           ;incstack = 0
   316  0009BA  ECE3  F005         	call	_setup	;wreg free
   317                           
   318                           ;main.c: 12: lcd_init();
   319  0009BE  EC67  F005         	call	_lcd_init	;wreg free
   320  0009C2                     
   321                           ;main.c: 15: c=kbd_getc();
   322                           
   323                           ;main.c: 14: do{
   324  0009C2  EC0E  F004         	call	_kbd_getc	;wreg free
   325  0009C6  6E27               	movwf	main@c,c
   326                           
   327                           ;main.c: 16: }while(!c);
   328  0009C8  5027               	movf	main@c,w,c
   329  0009CA  B4D8               	btfsc	status,2,c
   330  0009CC  D7FA               	goto	l68
   331                           
   332                           ;main.c: 17: if(c=='1'){
   333  0009CE  0E31               	movlw	49
   334  0009D0  1827               	xorwf	main@c,w,c
   335  0009D2  A4D8               	btfss	status,2,c
   336  0009D4  D023               	goto	u720
   337                           
   338                           ;main.c: 18: send_byte(0,0x01);
   339  0009D6  0E01               	movlw	1
   340  0009D8  6E04               	movwf	send_byte@data,c
   341  0009DA  0E00               	movlw	0
   342  0009DC  ECD6  F005         	call	_send_byte
   343                           
   344                           ;main.c: 19: _delay((unsigned long)((5)*(20000000/4000.0)));
   345  0009E0  0E21               	movlw	33
   346  0009E2  6E22               	movwf	??_main& (0+255),c
   347  0009E4  0E76               	movlw	118
   348  0009E6                     u797:
   349  0009E6  2EE8               	decfsz	wreg,f,c
   350  0009E8  D7FE               	bra	u797
   351  0009EA  2E22               	decfsz	??_main& (0+255),f,c
   352  0009EC  D7FC               	bra	u797
   353  0009EE  D000               	nop2	
   354                           
   355                           ;main.c: 20: for(byte a=0;a<6;a++){
   356  0009F0  0E00               	movlw	0
   357  0009F2  6E24               	movwf	main@a,c
   358  0009F4                     l1248:
   359  0009F4  0E05               	movlw	5
   360  0009F6  6424               	cpfsgt	main@a,c
   361  0009F8  D001               	goto	l72
   362  0009FA  D010               	goto	u720
   363  0009FC                     l72:
   364                           
   365                           ;main.c: 21: send_byte(1,vacio[a]);
   366  0009FC  5024               	movf	main@a,w,c
   367  0009FE  0D01               	mullw	1
   368  000A00  0E0F               	movlw	low _vacio
   369  000A02  24F3               	addwf	prodl,w,c
   370  000A04  6EF6               	movwf	tblptrl,c
   371  000A06  0E08               	movlw	high _vacio
   372  000A08  20F4               	addwfc	prodh,w,c
   373  000A0A  6EF7               	movwf	tblptrh,c
   374  000A0C                     	if	0	;There are less than 3 active tblptr bytes
   375  000A0C                     	endif
   376  000A0C  0008               	tblrd		*
   377  000A0E  CFF5 F004          	movff	tablat,send_byte@data
   378  000A12  0E01               	movlw	1
   379  000A14  ECD6  F005         	call	_send_byte
   380  000A18  2A24               	incf	main@a,f,c
   381  000A1A  D7EC               	goto	l1248
   382  000A1C                     u720:
   383                           
   384                           ;main.c: 22: }
   385                           ;main.c: 23: }
   386                           ;main.c: 24: if(c=='2'){
   387  000A1C  0E32               	movlw	50
   388  000A1E  1827               	xorwf	main@c,w,c
   389  000A20  A4D8               	btfss	status,2,c
   390  000A22  D023               	goto	u750
   391                           
   392                           ;main.c: 25: send_byte(0,0x01);
   393  000A24  0E01               	movlw	1
   394  000A26  6E04               	movwf	send_byte@data,c
   395  000A28  0E00               	movlw	0
   396  000A2A  ECD6  F005         	call	_send_byte
   397                           
   398                           ;main.c: 26: _delay((unsigned long)((5)*(20000000/4000.0)));
   399  000A2E  0E21               	movlw	33
   400  000A30  6E22               	movwf	??_main& (0+255),c
   401  000A32  0E76               	movlw	118
   402  000A34                     u807:
   403  000A34  2EE8               	decfsz	wreg,f,c
   404  000A36  D7FE               	bra	u807
   405  000A38  2E22               	decfsz	??_main& (0+255),f,c
   406  000A3A  D7FC               	bra	u807
   407  000A3C  D000               	nop2	
   408                           
   409                           ;main.c: 27: for(byte a=0;a<6;a++){
   410  000A3E  0E00               	movlw	0
   411  000A40  6E25               	movwf	main@a_237,c
   412  000A42                     l1266:
   413  000A42  0E05               	movlw	5
   414  000A44  6425               	cpfsgt	main@a_237,c
   415  000A46  D001               	goto	l75
   416  000A48  D010               	goto	u750
   417  000A4A                     l75:
   418                           
   419                           ;main.c: 28: send_byte(1,lleno[a]);
   420  000A4A  5025               	movf	main@a_237,w,c
   421  000A4C  0D01               	mullw	1
   422  000A4E  0E08               	movlw	low _lleno
   423  000A50  24F3               	addwf	prodl,w,c
   424  000A52  6EF6               	movwf	tblptrl,c
   425  000A54  0E08               	movlw	high _lleno
   426  000A56  20F4               	addwfc	prodh,w,c
   427  000A58  6EF7               	movwf	tblptrh,c
   428  000A5A                     	if	0	;There are less than 3 active tblptr bytes
   429  000A5A                     	endif
   430  000A5A  0008               	tblrd		*
   431  000A5C  CFF5 F004          	movff	tablat,send_byte@data
   432  000A60  0E01               	movlw	1
   433  000A62  ECD6  F005         	call	_send_byte
   434  000A66  2A25               	incf	main@a_237,f,c
   435  000A68  D7EC               	goto	l1266
   436  000A6A                     u750:
   437                           
   438                           ;main.c: 29: }
   439                           ;main.c: 30: }
   440                           ;main.c: 31: if(c=='3'){
   441  000A6A  0E33               	movlw	51
   442  000A6C  1827               	xorwf	main@c,w,c
   443  000A6E  A4D8               	btfss	status,2,c
   444  000A70  D022               	goto	u780
   445                           
   446                           ;main.c: 32: send_byte(0,0x01);
   447  000A72  0E01               	movlw	1
   448  000A74  6E04               	movwf	send_byte@data,c
   449  000A76  0E00               	movlw	0
   450  000A78  ECD6  F005         	call	_send_byte
   451                           
   452                           ;main.c: 33: _delay((unsigned long)((2)*(20000000/4000.0)));
   453  000A7C  0E0D               	movlw	13
   454  000A7E  6E22               	movwf	??_main& (0+255),c
   455  000A80  0EFC               	movlw	252
   456  000A82                     u817:
   457  000A82  2EE8               	decfsz	wreg,f,c
   458  000A84  D7FE               	bra	u817
   459  000A86  2E22               	decfsz	??_main& (0+255),f,c
   460  000A88  D7FC               	bra	u817
   461                           
   462                           ;main.c: 34: for(byte a=0;a<6;a++){
   463  000A8A  0E00               	movlw	0
   464  000A8C  6E26               	movwf	main@a_238,c
   465  000A8E                     l1284:
   466  000A8E  0E05               	movlw	5
   467  000A90  6426               	cpfsgt	main@a_238,c
   468  000A92  D001               	goto	l78
   469  000A94  D010               	goto	u780
   470  000A96                     l78:
   471                           
   472                           ;main.c: 35: send_byte(1,completo[a]);
   473  000A96  5026               	movf	main@a_238,w,c
   474  000A98  0D01               	mullw	1
   475  000A9A  0E01               	movlw	low _completo
   476  000A9C  24F3               	addwf	prodl,w,c
   477  000A9E  6EF6               	movwf	tblptrl,c
   478  000AA0  0E08               	movlw	high _completo
   479  000AA2  20F4               	addwfc	prodh,w,c
   480  000AA4  6EF7               	movwf	tblptrh,c
   481  000AA6                     	if	0	;There are less than 3 active tblptr bytes
   482  000AA6                     	endif
   483  000AA6  0008               	tblrd		*
   484  000AA8  CFF5 F004          	movff	tablat,send_byte@data
   485  000AAC  0E01               	movlw	1
   486  000AAE  ECD6  F005         	call	_send_byte
   487  000AB2  2A26               	incf	main@a_238,f,c
   488  000AB4  D7EC               	goto	l1284
   489  000AB6                     u780:
   490                           
   491                           ;main.c: 36: }
   492                           ;main.c: 37: }
   493                           ;main.c: 38: _delay((unsigned long)((250)*(20000000/4000.0)));
   494  000AB6  0E07               	movlw	7
   495  000AB8  6E23               	movwf	(??_main+1)& (0+255),c
   496  000ABA  0E58               	movlw	88
   497  000ABC  6E22               	movwf	??_main& (0+255),c
   498  000ABE  0E5A               	movlw	90
   499  000AC0                     u827:
   500  000AC0  2EE8               	decfsz	wreg,f,c
   501  000AC2  D7FE               	bra	u827
   502  000AC4  2E22               	decfsz	??_main& (0+255),f,c
   503  000AC6  D7FC               	bra	u827
   504  000AC8  2E23               	decfsz	(??_main+1)& (0+255),f,c
   505  000ACA  D7FA               	bra	u827
   506                           
   507                           ;main.c: 39: }
   508  000ACC  D77A               	goto	l68
   509  000ACE                     __end_of_main:
   510                           	opt stack 0
   511                           tblptru	equ	0xFF8
   512                           tblptrh	equ	0xFF7
   513                           tblptrl	equ	0xFF6
   514                           tablat	equ	0xFF5
   515                           prodh	equ	0xFF4
   516                           prodl	equ	0xFF3
   517                           wreg	equ	0xFE8
   518                           status	equ	0xFD8
   519                           
   520 ;; *************** function _setup *****************
   521 ;; Defined at:
   522 ;;		line 41 in file "main.c"
   523 ;; Parameters:    Size  Location     Type
   524 ;;		None
   525 ;; Auto vars:     Size  Location     Type
   526 ;;		None
   527 ;; Return value:  Size  Location     Type
   528 ;;                  1    wreg      void 
   529 ;; Registers used:
   530 ;;		wreg, status,2
   531 ;; Tracked objects:
   532 ;;		On entry : 0/0
   533 ;;		On exit  : 0/0
   534 ;;		Unchanged: 0/0
   535 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   536 ;;      Params:         0       0       0       0       0       0       0       0       0
   537 ;;      Locals:         0       0       0       0       0       0       0       0       0
   538 ;;      Temps:          0       0       0       0       0       0       0       0       0
   539 ;;      Totals:         0       0       0       0       0       0       0       0       0
   540 ;;Total ram usage:        0 bytes
   541 ;; Hardware stack levels used:    1
   542 ;; This function calls:
   543 ;;		Nothing
   544 ;; This function is called by:
   545 ;;		_main
   546 ;; This function uses a non-reentrant model
   547 ;;
   548                           
   549                           	psect	text1
   550  000BC6                     __ptext1:
   551                           	opt stack 0
   552  000BC6                     _setup:
   553                           	opt stack 30
   554                           
   555                           ;main.c: 42: ADCON1 = 0x0F;
   556                           
   557                           ;incstack = 0
   558  000BC6  0E0F               	movlw	15
   559  000BC8  6EC1               	movwf	4033,c	;volatile
   560                           
   561                           ;main.c: 43: CMCON = 0x07;
   562  000BCA  0E07               	movlw	7
   563  000BCC  6EB4               	movwf	4020,c	;volatile
   564                           
   565                           ;main.c: 44: TRISB = 0x0F;
   566  000BCE  0E0F               	movlw	15
   567  000BD0  6E93               	movwf	3987,c	;volatile
   568                           
   569                           ;main.c: 45: INTCON2bits.RBPU = 0;
   570  000BD2  9EF1               	bcf	intcon2,7,c	;volatile
   571  000BD4  0012               	return		;funcret
   572  000BD6                     __end_of_setup:
   573                           	opt stack 0
   574                           tblptru	equ	0xFF8
   575                           tblptrh	equ	0xFF7
   576                           tblptrl	equ	0xFF6
   577                           tablat	equ	0xFF5
   578                           prodh	equ	0xFF4
   579                           prodl	equ	0xFF3
   580                           intcon2	equ	0xFF1
   581                           wreg	equ	0xFE8
   582                           status	equ	0xFD8
   583                           
   584 ;; *************** function _lcd_init *****************
   585 ;; Defined at:
   586 ;;		line 48 in file "lcd.c"
   587 ;; Parameters:    Size  Location     Type
   588 ;;		None
   589 ;; Auto vars:     Size  Location     Type
   590 ;;  i               1    6[COMRAM] unsigned char 
   591 ;; Return value:  Size  Location     Type
   592 ;;                  1    wreg      void 
   593 ;; Registers used:
   594 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   595 ;; Tracked objects:
   596 ;;		On entry : 0/0
   597 ;;		On exit  : 0/0
   598 ;;		Unchanged: 0/0
   599 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   600 ;;      Params:         0       0       0       0       0       0       0       0       0
   601 ;;      Locals:         1       0       0       0       0       0       0       0       0
   602 ;;      Temps:          1       0       0       0       0       0       0       0       0
   603 ;;      Totals:         2       0       0       0       0       0       0       0       0
   604 ;;Total ram usage:        2 bytes
   605 ;; Hardware stack levels used:    1
   606 ;; Hardware stack levels required when called:    2
   607 ;; This function calls:
   608 ;;		_send_byte
   609 ;;		_send_nibble
   610 ;; This function is called by:
   611 ;;		_main
   612 ;; This function uses a non-reentrant model
   613 ;;
   614                           
   615                           	psect	text2
   616  000ACE                     __ptext2:
   617                           	opt stack 0
   618  000ACE                     _lcd_init:
   619                           	opt stack 28
   620                           
   621                           ;lcd.c: 49: byte i;
   622                           ;lcd.c: 50: TRISD = 0xF0;
   623                           
   624                           ;incstack = 0
   625  000ACE  0EF0               	movlw	240
   626  000AD0  6E95               	movwf	3989,c	;volatile
   627                           
   628                           ;lcd.c: 51: TRISCbits.RC0 = TRISCbits.RC1 = 0;
   629  000AD2  9294               	bcf	3988,1,c	;volatile
   630  000AD4  9094               	bcf	3988,0,c	;volatile
   631                           
   632                           ;lcd.c: 52: LATCbits.LC0 = LATCbits.LC1 = 0;
   633  000AD6  928B               	bcf	3979,1,c	;volatile
   634  000AD8  908B               	bcf	3979,0,c	;volatile
   635                           
   636                           ;lcd.c: 53: LATD = 0x0F & 0x00;
   637  000ADA  0E00               	movlw	0
   638  000ADC  6E8C               	movwf	3980,c	;volatile
   639                           
   640                           ;lcd.c: 54: _delay((unsigned long)((15)*(20000000/4000.0)));
   641  000ADE  0E62               	movlw	98
   642  000AE0  6E06               	movwf	??_lcd_init& (0+255),c
   643  000AE2  0E66               	movlw	102
   644  000AE4                     u837:
   645  000AE4  2EE8               	decfsz	wreg,f,c
   646  000AE6  D7FE               	bra	u837
   647  000AE8  2E06               	decfsz	??_lcd_init& (0+255),f,c
   648  000AEA  D7FC               	bra	u837
   649                           
   650                           ;lcd.c: 55: for (i = 0; i < 3;_delay((unsigned long)((5)*(20000000/4000.0))), ++i)
   651  000AEC  0E00               	movlw	0
   652  000AEE  6E07               	movwf	lcd_init@i,c
   653  000AF0                     l1074:
   654  000AF0  0E02               	movlw	2
   655  000AF2  6407               	cpfsgt	lcd_init@i,c
   656  000AF4  D001               	goto	l53
   657  000AF6  D00F               	goto	u440
   658  000AF8                     l53:
   659                           
   660                           ;lcd.c: 56: send_nibble(0,3);
   661  000AF8  0E03               	movlw	3
   662  000AFA  6E01               	movwf	send_nibble@data,c
   663  000AFC  0E00               	movlw	0
   664  000AFE  ECBF  F005         	call	_send_nibble
   665  000B02  0E21               	movlw	33
   666  000B04  6E06               	movwf	??_lcd_init& (0+255),c
   667  000B06  0E76               	movlw	118
   668  000B08                     u847:
   669  000B08  2EE8               	decfsz	wreg,f,c
   670  000B0A  D7FE               	bra	u847
   671  000B0C  2E06               	decfsz	??_lcd_init& (0+255),f,c
   672  000B0E  D7FC               	bra	u847
   673  000B10  D000               	nop2	
   674  000B12  2A07               	incf	lcd_init@i,f,c
   675  000B14  D7ED               	goto	l1074
   676  000B16                     u440:
   677                           
   678                           ;lcd.c: 57: send_nibble(0,2);
   679  000B16  0E02               	movlw	2
   680  000B18  6E01               	movwf	send_nibble@data,c
   681  000B1A  0E00               	movlw	0
   682  000B1C  ECBF  F005         	call	_send_nibble
   683                           
   684                           ;lcd.c: 58: _delay((unsigned long)((5)*(20000000/4000.0)));
   685  000B20  0E21               	movlw	33
   686  000B22  6E06               	movwf	??_lcd_init& (0+255),c
   687  000B24  0E76               	movlw	118
   688  000B26                     u857:
   689  000B26  2EE8               	decfsz	wreg,f,c
   690  000B28  D7FE               	bra	u857
   691  000B2A  2E06               	decfsz	??_lcd_init& (0+255),f,c
   692  000B2C  D7FC               	bra	u857
   693  000B2E  D000               	nop2	
   694                           
   695                           ;lcd.c: 59: for (i = 0; i < 4; _delay((unsigned long)((5)*(20000000/4000.0))),++i)
   696  000B30  0E00               	movlw	0
   697  000B32  6E07               	movwf	lcd_init@i,c
   698  000B34                     l1092:
   699  000B34  0E03               	movlw	3
   700  000B36  6407               	cpfsgt	lcd_init@i,c
   701  000B38  D001               	goto	l55
   702  000B3A  D018               	goto	u460
   703  000B3C                     l55:
   704                           
   705                           ;lcd.c: 60: send_byte(0,init_str[i]);
   706  000B3C  5007               	movf	lcd_init@i,w,c
   707  000B3E  0D01               	mullw	1
   708  000B40  0E16               	movlw	low _init_str
   709  000B42  24F3               	addwf	prodl,w,c
   710  000B44  6EF6               	movwf	tblptrl,c
   711  000B46  0E08               	movlw	high _init_str
   712  000B48  20F4               	addwfc	prodh,w,c
   713  000B4A  6EF7               	movwf	tblptrh,c
   714  000B4C                     	if	0	;There are less than 3 active tblptr bytes
   715  000B4C                     	endif
   716  000B4C  0008               	tblrd		*
   717  000B4E  CFF5 F004          	movff	tablat,send_byte@data
   718  000B52  0E00               	movlw	0
   719  000B54  ECD6  F005         	call	_send_byte
   720  000B58  0E21               	movlw	33
   721  000B5A  6E06               	movwf	??_lcd_init& (0+255),c
   722  000B5C  0E76               	movlw	118
   723  000B5E                     u867:
   724  000B5E  2EE8               	decfsz	wreg,f,c
   725  000B60  D7FE               	bra	u867
   726  000B62  2E06               	decfsz	??_lcd_init& (0+255),f,c
   727  000B64  D7FC               	bra	u867
   728  000B66  D000               	nop2	
   729  000B68  2A07               	incf	lcd_init@i,f,c
   730  000B6A  D7E4               	goto	l1092
   731  000B6C                     u460:
   732                           
   733                           ;lcd.c: 61: _delay((unsigned long)((1)*(20000000/4000.0)));
   734  000B6C  0E07               	movlw	7
   735  000B6E  6E06               	movwf	??_lcd_init& (0+255),c
   736  000B70  0E7D               	movlw	125
   737  000B72                     u877:
   738  000B72  2EE8               	decfsz	wreg,f,c
   739  000B74  D7FE               	bra	u877
   740  000B76  2E06               	decfsz	??_lcd_init& (0+255),f,c
   741  000B78  D7FC               	bra	u877
   742  000B7A  F000               	nop	
   743  000B7C  0012               	return		;funcret
   744  000B7E                     __end_of_lcd_init:
   745                           	opt stack 0
   746                           tblptru	equ	0xFF8
   747                           tblptrh	equ	0xFF7
   748                           tblptrl	equ	0xFF6
   749                           tablat	equ	0xFF5
   750                           prodh	equ	0xFF4
   751                           prodl	equ	0xFF3
   752                           intcon2	equ	0xFF1
   753                           wreg	equ	0xFE8
   754                           status	equ	0xFD8
   755                           
   756 ;; *************** function _send_byte *****************
   757 ;; Defined at:
   758 ;;		line 32 in file "lcd.c"
   759 ;; Parameters:    Size  Location     Type
   760 ;;  comand          1    wreg     unsigned char 
   761 ;;  data            1    3[COMRAM] unsigned char 
   762 ;; Auto vars:     Size  Location     Type
   763 ;;  comand          1    4[COMRAM] unsigned char 
   764 ;; Return value:  Size  Location     Type
   765 ;;                  1    wreg      void 
   766 ;; Registers used:
   767 ;;		wreg, status,2, status,0, cstack
   768 ;; Tracked objects:
   769 ;;		On entry : 0/0
   770 ;;		On exit  : 0/0
   771 ;;		Unchanged: 0/0
   772 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   773 ;;      Params:         1       0       0       0       0       0       0       0       0
   774 ;;      Locals:         1       0       0       0       0       0       0       0       0
   775 ;;      Temps:          0       0       0       0       0       0       0       0       0
   776 ;;      Totals:         2       0       0       0       0       0       0       0       0
   777 ;;Total ram usage:        2 bytes
   778 ;; Hardware stack levels used:    1
   779 ;; Hardware stack levels required when called:    1
   780 ;; This function calls:
   781 ;;		_send_nibble
   782 ;; This function is called by:
   783 ;;		_lcd_init
   784 ;;		_main
   785 ;;		_set_sgram_byte
   786 ;;		_lcd_gotoxy
   787 ;; This function uses a non-reentrant model
   788 ;;
   789                           
   790                           	psect	text3
   791  000BAC                     __ptext3:
   792                           	opt stack 0
   793  000BAC                     _send_byte:
   794                           	opt stack 29
   795                           
   796                           ;incstack = 0
   797                           ;send_byte@comand stored from wreg
   798  000BAC  6E05               	movwf	send_byte@comand,c
   799                           
   800                           ;lcd.c: 33: send_nibble(comand,data>>4);
   801  000BAE  3804               	swapf	send_byte@data,w,c
   802  000BB0  0B0F               	andlw	15
   803  000BB2  6E01               	movwf	send_nibble@data,c
   804  000BB4  5005               	movf	send_byte@comand,w,c
   805  000BB6  ECBF  F005         	call	_send_nibble
   806                           
   807                           ;lcd.c: 34: send_nibble(comand,data);
   808  000BBA  C004  F001         	movff	send_byte@data,send_nibble@data
   809  000BBE  5005               	movf	send_byte@comand,w,c
   810  000BC0  ECBF  F005         	call	_send_nibble
   811  000BC4  0012               	return		;funcret
   812  000BC6                     __end_of_send_byte:
   813                           	opt stack 0
   814                           tblptru	equ	0xFF8
   815                           tblptrh	equ	0xFF7
   816                           tblptrl	equ	0xFF6
   817                           tablat	equ	0xFF5
   818                           prodh	equ	0xFF4
   819                           prodl	equ	0xFF3
   820                           intcon2	equ	0xFF1
   821                           wreg	equ	0xFE8
   822                           status	equ	0xFD8
   823                           
   824 ;; *************** function _send_nibble *****************
   825 ;; Defined at:
   826 ;;		line 25 in file "lcd.c"
   827 ;; Parameters:    Size  Location     Type
   828 ;;  comand          1    wreg     unsigned char 
   829 ;;  data            1    0[COMRAM] unsigned char 
   830 ;; Auto vars:     Size  Location     Type
   831 ;;  comand          1    1[COMRAM] unsigned char 
   832 ;;  i               1    2[COMRAM] unsigned char 
   833 ;; Return value:  Size  Location     Type
   834 ;;                  1    wreg      void 
   835 ;; Registers used:
   836 ;;		wreg, status,2, status,0
   837 ;; Tracked objects:
   838 ;;		On entry : 0/0
   839 ;;		On exit  : 0/0
   840 ;;		Unchanged: 0/0
   841 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   842 ;;      Params:         1       0       0       0       0       0       0       0       0
   843 ;;      Locals:         2       0       0       0       0       0       0       0       0
   844 ;;      Temps:          0       0       0       0       0       0       0       0       0
   845 ;;      Totals:         3       0       0       0       0       0       0       0       0
   846 ;;Total ram usage:        3 bytes
   847 ;; Hardware stack levels used:    1
   848 ;; This function calls:
   849 ;;		Nothing
   850 ;; This function is called by:
   851 ;;		_send_byte
   852 ;;		_lcd_init
   853 ;; This function uses a non-reentrant model
   854 ;;
   855                           
   856                           	psect	text4
   857  000B7E                     __ptext4:
   858                           	opt stack 0
   859  000B7E                     _send_nibble:
   860                           	opt stack 29
   861                           
   862                           ;incstack = 0
   863                           ;send_nibble@comand stored from wreg
   864  000B7E  6E02               	movwf	send_nibble@comand,c
   865                           
   866                           ;lcd.c: 26: LATCbits.LC1 = comand; __nop();
   867  000B80  B002               	btfsc	send_nibble@comand,0,c
   868  000B82  D002               	bra	u405
   869  000B84  928B               	bcf	3979,1,c	;volatile
   870  000B86  D001               	bra	u406
   871  000B88                     u405:
   872  000B88  828B               	bsf	3979,1,c	;volatile
   873  000B8A                     u406:
   874  000B8A  F000               	nop	
   875                           
   876                           ;lcd.c: 27: LATCbits.LC0 = 1; __nop();
   877  000B8C  808B               	bsf	3979,0,c	;volatile
   878  000B8E  F000               	nop	
   879                           
   880                           ;lcd.c: 28: LATD = 0x0F & data; __nop();
   881  000B90  5001               	movf	send_nibble@data,w,c
   882  000B92  0B0F               	andlw	15
   883  000B94  6E8C               	movwf	3980,c	;volatile
   884  000B96  F000               	nop	
   885                           
   886                           ;lcd.c: 29: LATCbits.LC0 = 0;
   887  000B98  908B               	bcf	3979,0,c	;volatile
   888                           
   889                           ;lcd.c: 30: for(byte i=0;i<20;i++) __nop();
   890  000B9A  0E00               	movlw	0
   891  000B9C  6E03               	movwf	send_nibble@i,c
   892  000B9E                     l1054:
   893  000B9E  0E13               	movlw	19
   894  000BA0  6403               	cpfsgt	send_nibble@i,c
   895  000BA2  D001               	goto	l33
   896  000BA4  0012               	return	
   897  000BA6                     l33:
   898  000BA6  F000               	nop	
   899  000BA8  2A03               	incf	send_nibble@i,f,c
   900  000BAA  D7F9               	goto	l1054
   901  000BAC                     __end_of_send_nibble:
   902                           	opt stack 0
   903                           tblptru	equ	0xFF8
   904                           tblptrh	equ	0xFF7
   905                           tblptrl	equ	0xFF6
   906                           tablat	equ	0xFF5
   907                           prodh	equ	0xFF4
   908                           prodl	equ	0xFF3
   909                           intcon2	equ	0xFF1
   910                           wreg	equ	0xFE8
   911                           status	equ	0xFD8
   912                           
   913 ;; *************** function _kbd_getc *****************
   914 ;; Defined at:
   915 ;;		line 47 in file "main.c"
   916 ;; Parameters:    Size  Location     Type
   917 ;;		None
   918 ;; Auto vars:     Size  Location     Type
   919 ;;  c               1   32[COMRAM] unsigned char 
   920 ;; Return value:  Size  Location     Type
   921 ;;                  1    wreg      unsigned char 
   922 ;; Registers used:
   923 ;;		wreg, status,2
   924 ;; Tracked objects:
   925 ;;		On entry : 0/0
   926 ;;		On exit  : 0/0
   927 ;;		Unchanged: 0/0
   928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   929 ;;      Params:         0       0       0       0       0       0       0       0       0
   930 ;;      Locals:        33       0       0       0       0       0       0       0       0
   931 ;;      Temps:          0       0       0       0       0       0       0       0       0
   932 ;;      Totals:        33       0       0       0       0       0       0       0       0
   933 ;;Total ram usage:       33 bytes
   934 ;; Hardware stack levels used:    1
   935 ;; This function calls:
   936 ;;		Nothing
   937 ;; This function is called by:
   938 ;;		_main
   939 ;; This function uses a non-reentrant model
   940 ;;
   941                           
   942                           	psect	text5
   943  00081C                     __ptext5:
   944                           	opt stack 0
   945  00081C                     _kbd_getc:
   946                           	opt stack 30
   947                           
   948                           ;main.c: 48: char c=0;
   949                           
   950                           ;incstack = 0
   951  00081C  0E00               	movlw	0
   952  00081E  6E21               	movwf	kbd_getc@c,c
   953                           
   954                           ;main.c: 49: LATB = 0x70;
   955  000820  0E70               	movlw	112
   956  000822  6E8A               	movwf	3978,c	;volatile
   957                           
   958                           ;main.c: 50: c = PORTBbits.RB3? (PORTBbits.RB2? (PORTBbits.RB1? (PORTBbits.RB0? 0 : 'A')
      +                           : '3') : '2') : '1';
   959  000824  B681               	btfsc	3969,3,c	;volatile
   960  000826  D005               	goto	l88
   961  000828  0E00               	movlw	0
   962  00082A  6E02               	movwf	_kbd_getc$254+1,c
   963  00082C  0E31               	movlw	49
   964  00082E  6E01               	movwf	_kbd_getc$254,c
   965  000830  D024               	goto	l90
   966  000832                     l88:
   967  000832  B481               	btfsc	3969,2,c	;volatile
   968  000834  D005               	goto	l92
   969  000836  0E00               	movlw	0
   970  000838  6E04               	movwf	_kbd_getc$255+1,c
   971  00083A  0E32               	movlw	50
   972  00083C  6E03               	movwf	_kbd_getc$255,c
   973  00083E  D019               	goto	l94
   974  000840                     l92:
   975  000840  B281               	btfsc	3969,1,c	;volatile
   976  000842  D005               	goto	l96
   977  000844  0E00               	movlw	0
   978  000846  6E06               	movwf	_kbd_getc$256+1,c
   979  000848  0E33               	movlw	51
   980  00084A  6E05               	movwf	_kbd_getc$256,c
   981  00084C  D00E               	goto	l98
   982  00084E                     l96:
   983  00084E  B081               	btfsc	3969,0,c	;volatile
   984  000850  D004               	goto	l100
   985  000852  0E00               	movlw	0
   986  000854  6E08               	movwf	_kbd_getc$257+1,c
   987  000856  0E41               	movlw	65
   988  000858  D003               	goto	L1
   989  00085A                     l100:
   990  00085A  0E00               	movlw	0
   991  00085C  6E08               	movwf	_kbd_getc$257+1,c
   992  00085E  0E00               	movlw	0
   993  000860                     L1:
   994  000860  6E07               	movwf	_kbd_getc$257,c
   995  000862  C007  F005         	movff	_kbd_getc$257,_kbd_getc$256
   996  000866  C008  F006         	movff	_kbd_getc$257+1,_kbd_getc$256+1
   997  00086A                     l98:
   998  00086A  C005  F003         	movff	_kbd_getc$256,_kbd_getc$255
   999  00086E  C006  F004         	movff	_kbd_getc$256+1,_kbd_getc$255+1
  1000  000872                     l94:
  1001  000872  C003  F001         	movff	_kbd_getc$255,_kbd_getc$254
  1002  000876  C004  F002         	movff	_kbd_getc$255+1,_kbd_getc$254+1
  1003  00087A                     l90:
  1004  00087A  C001  F021         	movff	_kbd_getc$254,kbd_getc@c
  1005                           
  1006                           ;main.c: 51: if(c)return c;
  1007  00087E  5021               	movf	kbd_getc@c,w,c
  1008  000880  B4D8               	btfsc	status,2,c
  1009  000882  D002               	goto	l103
  1010  000884  5021               	movf	kbd_getc@c,w,c
  1011  000886  0012               	return	
  1012  000888                     l103:
  1013                           
  1014                           ;main.c: 52: LATB = 0xB0;
  1015  000888  0EB0               	movlw	176
  1016  00088A  6E8A               	movwf	3978,c	;volatile
  1017                           
  1018                           ;main.c: 53: c = PORTBbits.RB3? (PORTBbits.RB2? (PORTBbits.RB1? (PORTBbits.RB0? 0 : 'B')
      +                           : '6') : '5') : '4';
  1019  00088C  B681               	btfsc	3969,3,c	;volatile
  1020  00088E  D005               	goto	l106
  1021  000890  0E00               	movlw	0
  1022  000892  6E0A               	movwf	_kbd_getc$258+1,c
  1023  000894  0E34               	movlw	52
  1024  000896  6E09               	movwf	_kbd_getc$258,c
  1025  000898  D024               	goto	l108
  1026  00089A                     l106:
  1027  00089A  B481               	btfsc	3969,2,c	;volatile
  1028  00089C  D005               	goto	l110
  1029  00089E  0E00               	movlw	0
  1030  0008A0  6E0C               	movwf	_kbd_getc$259+1,c
  1031  0008A2  0E35               	movlw	53
  1032  0008A4  6E0B               	movwf	_kbd_getc$259,c
  1033  0008A6  D019               	goto	l112
  1034  0008A8                     l110:
  1035  0008A8  B281               	btfsc	3969,1,c	;volatile
  1036  0008AA  D005               	goto	l114
  1037  0008AC  0E00               	movlw	0
  1038  0008AE  6E0E               	movwf	_kbd_getc$260+1,c
  1039  0008B0  0E36               	movlw	54
  1040  0008B2  6E0D               	movwf	_kbd_getc$260,c
  1041  0008B4  D00E               	goto	l116
  1042  0008B6                     l114:
  1043  0008B6  B081               	btfsc	3969,0,c	;volatile
  1044  0008B8  D004               	goto	l118
  1045  0008BA  0E00               	movlw	0
  1046  0008BC  6E10               	movwf	_kbd_getc$261+1,c
  1047  0008BE  0E42               	movlw	66
  1048  0008C0  D003               	goto	L2
  1049  0008C2                     l118:
  1050  0008C2  0E00               	movlw	0
  1051  0008C4  6E10               	movwf	_kbd_getc$261+1,c
  1052  0008C6  0E00               	movlw	0
  1053  0008C8                     L2:
  1054  0008C8  6E0F               	movwf	_kbd_getc$261,c
  1055  0008CA  C00F  F00D         	movff	_kbd_getc$261,_kbd_getc$260
  1056  0008CE  C010  F00E         	movff	_kbd_getc$261+1,_kbd_getc$260+1
  1057  0008D2                     l116:
  1058  0008D2  C00D  F00B         	movff	_kbd_getc$260,_kbd_getc$259
  1059  0008D6  C00E  F00C         	movff	_kbd_getc$260+1,_kbd_getc$259+1
  1060  0008DA                     l112:
  1061  0008DA  C00B  F009         	movff	_kbd_getc$259,_kbd_getc$258
  1062  0008DE  C00C  F00A         	movff	_kbd_getc$259+1,_kbd_getc$258+1
  1063  0008E2                     l108:
  1064  0008E2  C009  F021         	movff	_kbd_getc$258,kbd_getc@c
  1065                           
  1066                           ;main.c: 54: if(c)return c;
  1067  0008E6  5021               	movf	kbd_getc@c,w,c
  1068  0008E8  B4D8               	btfsc	status,2,c
  1069  0008EA  D002               	goto	l121
  1070  0008EC  5021               	movf	kbd_getc@c,w,c
  1071  0008EE  0012               	return	
  1072  0008F0                     l121:
  1073                           
  1074                           ;main.c: 55: LATB = 0xD0;
  1075  0008F0  0ED0               	movlw	208
  1076  0008F2  6E8A               	movwf	3978,c	;volatile
  1077                           
  1078                           ;main.c: 56: c = PORTBbits.RB3? (PORTBbits.RB2? (PORTBbits.RB1? (PORTBbits.RB0? 0 : 'C')
      +                           : '9') : '8') : '7';
  1079  0008F4  B681               	btfsc	3969,3,c	;volatile
  1080  0008F6  D005               	goto	l123
  1081  0008F8  0E00               	movlw	0
  1082  0008FA  6E12               	movwf	_kbd_getc$262+1,c
  1083  0008FC  0E37               	movlw	55
  1084  0008FE  6E11               	movwf	_kbd_getc$262,c
  1085  000900  D024               	goto	l125
  1086  000902                     l123:
  1087  000902  B481               	btfsc	3969,2,c	;volatile
  1088  000904  D005               	goto	l127
  1089  000906  0E00               	movlw	0
  1090  000908  6E14               	movwf	_kbd_getc$263+1,c
  1091  00090A  0E38               	movlw	56
  1092  00090C  6E13               	movwf	_kbd_getc$263,c
  1093  00090E  D019               	goto	l129
  1094  000910                     l127:
  1095  000910  B281               	btfsc	3969,1,c	;volatile
  1096  000912  D005               	goto	l131
  1097  000914  0E00               	movlw	0
  1098  000916  6E16               	movwf	_kbd_getc$264+1,c
  1099  000918  0E39               	movlw	57
  1100  00091A  6E15               	movwf	_kbd_getc$264,c
  1101  00091C  D00E               	goto	l133
  1102  00091E                     l131:
  1103  00091E  B081               	btfsc	3969,0,c	;volatile
  1104  000920  D004               	goto	l135
  1105  000922  0E00               	movlw	0
  1106  000924  6E18               	movwf	_kbd_getc$265+1,c
  1107  000926  0E43               	movlw	67
  1108  000928  D003               	goto	L3
  1109  00092A                     l135:
  1110  00092A  0E00               	movlw	0
  1111  00092C  6E18               	movwf	_kbd_getc$265+1,c
  1112  00092E  0E00               	movlw	0
  1113  000930                     L3:
  1114  000930  6E17               	movwf	_kbd_getc$265,c
  1115  000932  C017  F015         	movff	_kbd_getc$265,_kbd_getc$264
  1116  000936  C018  F016         	movff	_kbd_getc$265+1,_kbd_getc$264+1
  1117  00093A                     l133:
  1118  00093A  C015  F013         	movff	_kbd_getc$264,_kbd_getc$263
  1119  00093E  C016  F014         	movff	_kbd_getc$264+1,_kbd_getc$263+1
  1120  000942                     l129:
  1121  000942  C013  F011         	movff	_kbd_getc$263,_kbd_getc$262
  1122  000946  C014  F012         	movff	_kbd_getc$263+1,_kbd_getc$262+1
  1123  00094A                     l125:
  1124  00094A  C011  F021         	movff	_kbd_getc$262,kbd_getc@c
  1125                           
  1126                           ;main.c: 57: if(c)return c;
  1127  00094E  5021               	movf	kbd_getc@c,w,c
  1128  000950  B4D8               	btfsc	status,2,c
  1129  000952  D002               	goto	l138
  1130  000954  5021               	movf	kbd_getc@c,w,c
  1131  000956  0012               	return	
  1132  000958                     l138:
  1133                           
  1134                           ;main.c: 58: LATB = 0xE0;
  1135  000958  0EE0               	movlw	224
  1136  00095A  6E8A               	movwf	3978,c	;volatile
  1137                           
  1138                           ;main.c: 59: return c = PORTBbits.RB3? (PORTBbits.RB2? (PORTBbits.RB1? (PORTBbits.RB0? 0
      +                           : 'D') : '#') : '0') : '*';
  1139  00095C  B681               	btfsc	3969,3,c	;volatile
  1140  00095E  D005               	goto	l140
  1141  000960  0E00               	movlw	0
  1142  000962  6E1A               	movwf	_kbd_getc$266+1,c
  1143  000964  0E2A               	movlw	42
  1144  000966  6E19               	movwf	_kbd_getc$266,c
  1145  000968  D024               	goto	l142
  1146  00096A                     l140:
  1147  00096A  B481               	btfsc	3969,2,c	;volatile
  1148  00096C  D005               	goto	l144
  1149  00096E  0E00               	movlw	0
  1150  000970  6E1C               	movwf	_kbd_getc$267+1,c
  1151  000972  0E30               	movlw	48
  1152  000974  6E1B               	movwf	_kbd_getc$267,c
  1153  000976  D019               	goto	l146
  1154  000978                     l144:
  1155  000978  B281               	btfsc	3969,1,c	;volatile
  1156  00097A  D005               	goto	l148
  1157  00097C  0E00               	movlw	0
  1158  00097E  6E1E               	movwf	_kbd_getc$268+1,c
  1159  000980  0E23               	movlw	35
  1160  000982  6E1D               	movwf	_kbd_getc$268,c
  1161  000984  D00E               	goto	l150
  1162  000986                     l148:
  1163  000986  B081               	btfsc	3969,0,c	;volatile
  1164  000988  D004               	goto	l152
  1165  00098A  0E00               	movlw	0
  1166  00098C  6E20               	movwf	_kbd_getc$269+1,c
  1167  00098E  0E44               	movlw	68
  1168  000990  D003               	goto	L4
  1169  000992                     l152:
  1170  000992  0E00               	movlw	0
  1171  000994  6E20               	movwf	_kbd_getc$269+1,c
  1172  000996  0E00               	movlw	0
  1173  000998                     L4:
  1174  000998  6E1F               	movwf	_kbd_getc$269,c
  1175  00099A  C01F  F01D         	movff	_kbd_getc$269,_kbd_getc$268
  1176  00099E  C020  F01E         	movff	_kbd_getc$269+1,_kbd_getc$268+1
  1177  0009A2                     l150:
  1178  0009A2  C01D  F01B         	movff	_kbd_getc$268,_kbd_getc$267
  1179  0009A6  C01E  F01C         	movff	_kbd_getc$268+1,_kbd_getc$267+1
  1180  0009AA                     l146:
  1181  0009AA  C01B  F019         	movff	_kbd_getc$267,_kbd_getc$266
  1182  0009AE  C01C  F01A         	movff	_kbd_getc$267+1,_kbd_getc$266+1
  1183  0009B2                     l142:
  1184  0009B2  C019  F021         	movff	_kbd_getc$266,kbd_getc@c
  1185  0009B6  5021               	movf	kbd_getc@c,w,c
  1186  0009B8  0012               	return	
  1187  0009BA                     __end_of_kbd_getc:
  1188                           	opt stack 0
  1189                           tblptru	equ	0xFF8
  1190                           tblptrh	equ	0xFF7
  1191                           tblptrl	equ	0xFF6
  1192                           tablat	equ	0xFF5
  1193                           prodh	equ	0xFF4
  1194                           prodl	equ	0xFF3
  1195                           intcon2	equ	0xFF1
  1196                           wreg	equ	0xFE8
  1197                           status	equ	0xFD8
  1198                           tblptru	equ	0xFF8
  1199                           tblptrh	equ	0xFF7
  1200                           tblptrl	equ	0xFF6
  1201                           tablat	equ	0xFF5
  1202                           prodh	equ	0xFF4
  1203                           prodl	equ	0xFF3
  1204                           intcon2	equ	0xFF1
  1205                           wreg	equ	0xFE8
  1206                           status	equ	0xFD8
  1207                           
  1208                           	psect	rparam
  1209  0000                     tblptru	equ	0xFF8
  1210                           tblptrh	equ	0xFF7
  1211                           tblptrl	equ	0xFF6
  1212                           tablat	equ	0xFF5
  1213                           prodh	equ	0xFF4
  1214                           prodl	equ	0xFF3
  1215                           intcon2	equ	0xFF1
  1216                           wreg	equ	0xFE8
  1217                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    25
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     39      39
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_kbd_getc
    _lcd_init->_send_byte
    _send_byte->_send_nibble

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 6     6      0    3806
                                             33 COMRAM     6     6      0
                           _kbd_getc
                           _lcd_init
                          _send_byte
                              _setup
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             2     2      0    1750
                                              5 COMRAM     2     2      0
                          _send_byte
                        _send_nibble
 ---------------------------------------------------------------------------------
 (1) _send_byte                                            2     1      1    1242
                                              3 COMRAM     2     1      1
                        _send_nibble
 ---------------------------------------------------------------------------------
 (2) _send_nibble                                          3     2      1     394
                                              0 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (1) _kbd_getc                                            33    33      0     521
                                              0 COMRAM    33    33      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _kbd_getc
   _lcd_init
     _send_byte
       _send_nibble
     _send_nibble
   _send_byte
     _send_nibble
   _setup

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           5F      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              5F     27      27       1       41.1%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
ABS                  0      0       0      20        0.0%
BIGRAM             7FF      0       0      21        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon May 07 08:27:35 2018

                     l33 0BA6                       l53 0AF8                       l55 0B3C  
                     l72 09FC                       l90 087A                       l75 0A4A  
                     l92 0840                       l68 09C2                       l94 0872  
                     l78 0A96                       l96 084E                       l88 0832  
                     l98 086A              __CFG_BORV$3 000000             __CFG_CP0$OFF 000000  
           __CFG_CP1$OFF 000000             __CFG_CP2$OFF 000000             __CFG_CP3$OFF 000000  
                    l100 085A                      l110 08A8                      l103 0888  
                    l112 08DA                      l121 08F0                      l114 08B6  
                    l106 089A                      l131 091E                      l123 0902  
                    l140 096A                      l108 08E2                      l116 08D2  
                    l125 094A                      l133 093A                      l150 09A2  
                    l142 09B2                      l118 08C2                      l135 092A  
                    l127 0910                      l152 0992                      l144 0978  
                    l129 0942                      l146 09AA                      l138 0958  
                    l148 0986             __CFG_CPB$OFF 000000                      u405 0B88  
                    u406 0B8A                      u440 0B16             __CFG_CPD$OFF 000000  
                    u460 0B6C                      u720 0A1C                      u750 0A6A  
                    u807 0A34                      u817 0A82                      u827 0AC0  
                    u780 0AB6                      u837 0AE4                      u847 0B08  
                    u857 0B26                      u867 0B5E                      u877 0B72  
                    u797 09E6             __CFG_BOR$OFF 000000                      wreg 000FE8  
           __CFG_FOSC$HS 000000             __CFG_LVP$OFF 000000             __CFG_WDT$OFF 000000  
                   l1054 0B9E                     l1074 0AF0                     l1092 0B34  
                   l1248 09F4                     l1266 0A42                     l1284 0A8E  
                   _LATB 000F8A                     _LATD 000F8C                     _main 09BA  
                   prodh 000FF4                     prodl 000FF3                     start 0000  
          __CFG_IESO$OFF 000000            __CFG_MCLRE$ON 000000             ___param_bank 000000  
          __CFG_PLLDIV$1 000000           __CFG_CCP2MX$ON 000000                    ?_main 0001  
                  _CMCON 000FB4            __CFG_USBDIV$1 000000                    _TRISB 000F93  
                  _TRISD 000F95            __CFG_PWRT$OFF 000000            __CFG_WRT0$OFF 000000  
        send_byte@comand 0005            __CFG_WRT1$OFF 000000            __CFG_WRT2$OFF 000000  
          __CFG_WRT3$OFF 000000           __CFG_EBTR0$OFF 000000           __CFG_FCMEN$OFF 000000  
         __CFG_EBTR1$OFF 000000           __CFG_EBTR2$OFF 000000           __CFG_EBTR3$OFF 000000  
          __CFG_WRTB$OFF 000000            __CFG_WRTC$OFF 000000            __CFG_WRTD$OFF 000000  
         __CFG_EBTRB$OFF 000000                    _lleno 0808                    _vacio 080F  
                  _setup 0BC6                    main@a 0024                    main@c 0027  
                  tablat 000FF5          send_nibble@data 0001                    status 000FD8  
         __CFG_ICPRT$OFF 000000          __initialization 0BD6             __end_of_main 0ACE  
                 ??_main 0022            __activetblptr 000001                   _ADCON1 000FC1  
           ?_send_nibble 0001                   ?_setup 0001         __end_of_kbd_getc 09BA  
         __CFG_XINST$OFF 000000         __end_of_lcd_init 0B7E         __end_of_completo 0808  
         __CFG_STVREN$ON 000000         __end_of_init_str 081A             __mediumconst 0000  
                 tblptrh 000FF7                   tblptrl 000FF6                   tblptru 000FF8  
             __accesstop 0060  __end_of__initialization 0BD6          __CFG_PBADEN$OFF 000000  
          ___rparam_used 000001           __pcstackCOMRAM 0001            __end_of_lleno 080F  
          __end_of_vacio 0816            __end_of_setup 0BD6                  ??_setup 0001  
     __size_of_send_byte 001A                ?_kbd_getc 0001                ?_lcd_init 0001  
        __CFG_VREGEN$OFF 000000     __size_of_send_nibble 002E             _kbd_getc$260 000D  
           _kbd_getc$261 000F             _kbd_getc$262 0011             _kbd_getc$254 0001  
           _kbd_getc$263 0013             _kbd_getc$255 0003             _kbd_getc$264 0015  
           _kbd_getc$256 0005             _kbd_getc$265 0017             _kbd_getc$257 0007  
           _kbd_getc$266 0019             _kbd_getc$258 0009             _kbd_getc$267 001B  
           _kbd_getc$259 000B             _kbd_getc$268 001D             _kbd_getc$269 001F  
                __Hparam 0000                  __Lparam 0000             __psmallconst 0800  
                __pcinit 0BD6                  __ramtop 0800                  __ptext0 09BA  
                __ptext1 0BC6                  __ptext2 0ACE                  __ptext3 0BAC  
                __ptext4 0B7E                  __ptext5 081C               ??_kbd_getc 0001  
             ??_lcd_init 0006     end_of_initialization 0BD6        __end_of_send_byte 0BC6  
      send_nibble@comand 0002                _PORTBbits 000F81                _TRISCbits 000F94  
          send_byte@data 0004      start_initialization 0BD6         __CFG_LPT1OSC$OFF 000000  
      __size_of_kbd_getc 019E        __size_of_lcd_init 00B0              __smallconst 0800  
          ??_send_nibble 0002           __size_of_setup 0010                 _LATCbits 000F8B  
              _send_byte 0BAC         __CFG_WDTPS$32768 000000                kbd_getc@c 0021  
              main@a_237 0025                main@a_238 0026                lcd_init@i 0007  
           send_nibble@i 0003              _INTCON2bits 000FF1      __end_of_send_nibble 0BAC  
             ?_send_byte 0004                 __Hrparam 0000                 __Lrparam 0000  
           __Lsmallconst 0800                 _kbd_getc 081C                 _lcd_init 0ACE  
               _completo 0801            __size_of_main 0114                 _init_str 0816  
  __CFG_CPUDIV$OSC1_PLL2 000000              _send_nibble 0B7E              ??_send_byte 0005  
