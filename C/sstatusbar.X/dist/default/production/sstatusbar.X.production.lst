

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sat Apr 21 12:11:36 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1
    12                           	psect	text4,global,reloc=2,class=CODE,delta=1
    13                           	psect	text5,global,reloc=2,class=CODE,delta=1
    14                           	psect	text6,global,reloc=2,class=CODE,delta=1
    15                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    16                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    17  0000                     
    18                           ; Version 1.45
    19                           ; Generated 16/11/2017 GMT
    20                           ; 
    21                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    22                           ; All rights reserved.
    23                           ; 
    24                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    25                           ; 
    26                           ; Redistribution and use in source and binary forms, with or without modification, are
    27                           ; permitted provided that the following conditions are met:
    28                           ; 
    29                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    30                           ;        conditions and the following disclaimer.
    31                           ; 
    32                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    33                           ;        of conditions and the following disclaimer in the documentation and/or other
    34                           ;        materials provided with the distribution.
    35                           ; 
    36                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    37                           ;        software without specific prior written permission.
    38                           ; 
    39                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    40                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    41                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    42                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    43                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    44                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    45                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    46                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    47                           ; 
    48                           ; 
    49                           ; Code-generator required, PIC18F4550 Definitions
    50                           ; 
    51                           ; SFR Addresses
    52  0000                     
    53                           	psect	smallconst
    54  000800                     __psmallconst:
    55                           	opt stack 0
    56  000800  00                 	db	0
    57  000801                     _init_str:
    58                           	opt stack 0
    59  000801  28                 	db	40
    60  000802  0C                 	db	12
    61  000803  01                 	db	1
    62  000804  06                 	db	6
    63  000805                     __end_of_init_str:
    64                           	opt stack 0
    65  000805                     _animation:
    66                           	opt stack 0
    67  000805  00                 	db	0
    68  000806  00                 	db	0
    69  000807  00                 	db	0
    70  000808  00                 	db	0
    71  000809  00                 	db	0
    72  00080A  00                 	db	0
    73  00080B  00                 	db	0
    74  00080C  1F                 	db	31
    75  00080D  00                 	db	0
    76  00080E  00                 	db	0
    77  00080F  00                 	db	0
    78  000810  00                 	db	0
    79  000811  00                 	db	0
    80  000812  00                 	db	0
    81  000813  1F                 	db	31
    82  000814  1F                 	db	31
    83  000815  00                 	db	0
    84  000816  00                 	db	0
    85  000817  00                 	db	0
    86  000818  00                 	db	0
    87  000819  00                 	db	0
    88  00081A  1F                 	db	31
    89  00081B  1F                 	db	31
    90  00081C  1F                 	db	31
    91  00081D  00                 	db	0
    92  00081E  00                 	db	0
    93  00081F  00                 	db	0
    94  000820  00                 	db	0
    95  000821  1F                 	db	31
    96  000822  1F                 	db	31
    97  000823  1F                 	db	31
    98  000824  1F                 	db	31
    99  000825  00                 	db	0
   100  000826  00                 	db	0
   101  000827  00                 	db	0
   102  000828  1F                 	db	31
   103  000829  1F                 	db	31
   104  00082A  1F                 	db	31
   105  00082B  1F                 	db	31
   106  00082C  1F                 	db	31
   107  00082D  00                 	db	0
   108  00082E  00                 	db	0
   109  00082F  1F                 	db	31
   110  000830  1F                 	db	31
   111  000831  1F                 	db	31
   112  000832  1F                 	db	31
   113  000833  1F                 	db	31
   114  000834  1F                 	db	31
   115  000835  00                 	db	0
   116  000836  1F                 	db	31
   117  000837  1F                 	db	31
   118  000838  1F                 	db	31
   119  000839  1F                 	db	31
   120  00083A  1F                 	db	31
   121  00083B  1F                 	db	31
   122  00083C  1F                 	db	31
   123  00083D  1F                 	db	31
   124  00083E  1F                 	db	31
   125  00083F  1F                 	db	31
   126  000840  1F                 	db	31
   127  000841  1F                 	db	31
   128  000842  1F                 	db	31
   129  000843  1F                 	db	31
   130  000844  1F                 	db	31
   131  000845                     __end_of_animation:
   132                           	opt stack 0
   133  0000                     _TRISCbits	set	3988
   134  0000                     _TRISD	set	3989
   135  0000                     _LATD	set	3980
   136  0000                     _LATCbits	set	3979
   137                           
   138                           ; #config settings
   139  000845  00                 	db	0	; dummy byte at the end
   140  0000                     
   141                           	psect	cinit
   142  000AB4                     __pcinit:
   143                           	opt stack 0
   144  000AB4                     start_initialization:
   145                           	opt stack 0
   146  000AB4                     __initialization:
   147                           	opt stack 0
   148  000AB4                     end_of_initialization:
   149                           	opt stack 0
   150  000AB4                     __end_of__initialization:
   151                           	opt stack 0
   152  000AB4  0E00               	movlw	low (__Lsmallconst shr (0+16))
   153  000AB6  6EF8               	movwf	tblptru,c
   154  000AB8  0E08               	movlw	high __Lsmallconst
   155  000ABA  6EF7               	movwf	tblptrh,c
   156  000ABC  0100               	movlb	0
   157  000ABE  EFC4  F004         	goto	_main	;jump to C main() function
   158                           tblptru	equ	0xFF8
   159                           tblptrh	equ	0xFF7
   160                           
   161                           	psect	cstackCOMRAM
   162  000001                     __pcstackCOMRAM:
   163                           	opt stack 0
   164  000001                     send_nibble@data:
   165                           	opt stack 0
   166                           
   167                           ; 1 bytes @ 0x0
   168  000001                     	ds	1
   169  000002                     send_nibble@comand:
   170                           	opt stack 0
   171                           
   172                           ; 1 bytes @ 0x1
   173  000002                     	ds	1
   174  000003                     send_nibble@i:
   175                           	opt stack 0
   176                           
   177                           ; 1 bytes @ 0x2
   178  000003                     	ds	1
   179  000004                     send_byte@data:
   180                           	opt stack 0
   181                           
   182                           ; 1 bytes @ 0x3
   183  000004                     	ds	1
   184  000005                     send_byte@comand:
   185                           	opt stack 0
   186                           
   187                           ; 1 bytes @ 0x4
   188  000005                     	ds	1
   189  000006                     ??_lcd_init:
   190  000006                     lcd_gotoxy@y:
   191                           	opt stack 0
   192  000006                     set_sgram_byte@ptr:
   193                           	opt stack 0
   194                           
   195                           ; 2 bytes @ 0x5
   196  000006                     	ds	1
   197  000007                     lcd_gotoxy@x:
   198                           	opt stack 0
   199  000007                     lcd_init@i:
   200                           	opt stack 0
   201                           
   202                           ; 1 bytes @ 0x6
   203  000007                     	ds	1
   204  000008                     set_sgram_byte@dir:
   205                           	opt stack 0
   206  000008                     _lcd_gotoxy$121:
   207                           	opt stack 0
   208                           
   209                           ; 2 bytes @ 0x7
   210  000008                     	ds	1
   211  000009                     set_sgram_byte@i:
   212                           	opt stack 0
   213                           
   214                           ; 1 bytes @ 0x8
   215  000009                     	ds	1
   216  00000A                     lcd_gotoxy@dir:
   217                           	opt stack 0
   218                           
   219                           ; 1 bytes @ 0x9
   220  00000A                     	ds	1
   221  00000B                     set_level@level:
   222                           	opt stack 0
   223                           
   224                           ; 1 bytes @ 0xA
   225  00000B                     	ds	1
   226  00000C                     set_level@i:
   227                           	opt stack 0
   228                           
   229                           ; 1 bytes @ 0xB
   230  00000C                     	ds	1
   231  00000D                     ??_main:
   232                           
   233                           ; 1 bytes @ 0xC
   234  00000D                     	ds	2
   235  00000F                     main@i_144:
   236                           	opt stack 0
   237                           
   238                           ; 1 bytes @ 0xE
   239  00000F                     	ds	1
   240  000010                     main@i:
   241                           	opt stack 0
   242                           
   243                           ; 1 bytes @ 0xF
   244  000010                     	ds	1
   245                           tblptru	equ	0xFF8
   246                           tblptrh	equ	0xFF7
   247                           
   248 ;;
   249 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   250 ;;
   251 ;; *************** function _main *****************
   252 ;; Defined at:
   253 ;;		line 33 in file "main.c"
   254 ;; Parameters:    Size  Location     Type
   255 ;;		None
   256 ;; Auto vars:     Size  Location     Type
   257 ;;  i               1   14[COMRAM] unsigned char 
   258 ;;  i               1   15[COMRAM] unsigned char 
   259 ;; Return value:  Size  Location     Type
   260 ;;                  1    wreg      void 
   261 ;; Registers used:
   262 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   263 ;; Tracked objects:
   264 ;;		On entry : 0/0
   265 ;;		On exit  : 0/0
   266 ;;		Unchanged: 0/0
   267 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   268 ;;      Params:         0       0       0       0       0       0       0       0       0
   269 ;;      Locals:         2       0       0       0       0       0       0       0       0
   270 ;;      Temps:          2       0       0       0       0       0       0       0       0
   271 ;;      Totals:         4       0       0       0       0       0       0       0       0
   272 ;;Total ram usage:        4 bytes
   273 ;; Hardware stack levels required when called:    4
   274 ;; This function calls:
   275 ;;		_lcd_init
   276 ;;		_set_level
   277 ;;		_set_sgram_byte
   278 ;; This function is called by:
   279 ;;		Startup code after reset
   280 ;; This function uses a non-reentrant model
   281 ;;
   282                           
   283                           	psect	text0
   284  000988                     __ptext0:
   285                           	opt stack 0
   286  000988                     _main:
   287                           	opt stack 27
   288                           
   289                           ;main.c: 34: lcd_init();
   290                           
   291                           ;incstack = 0
   292  000988  EC23  F004         	call	_lcd_init	;wreg free
   293                           
   294                           ;main.c: 35: for (byte i = 0; i < 8; ++i)
   295  00098C  0E00               	movlw	0
   296  00098E  6E10               	movwf	main@i,c
   297  000990                     l1013:
   298  000990  0E07               	movlw	7
   299  000992  6410               	cpfsgt	main@i,c
   300  000994  D001               	goto	l63
   301  000996  D00D               	goto	u400
   302  000998                     l63:
   303                           
   304                           ;main.c: 36: set_sgram_byte(i,animation[i]);
   305  000998  5010               	movf	main@i,w,c
   306  00099A  0D08               	mullw	8
   307  00099C  0E05               	movlw	low _animation
   308  00099E  24F3               	addwf	prodl,w,c
   309  0009A0  6E06               	movwf	set_sgram_byte@ptr,c
   310  0009A2  0E08               	movlw	high _animation
   311  0009A4  20F4               	addwfc	prodh,w,c
   312  0009A6  6E07               	movwf	set_sgram_byte@ptr+1,c
   313  0009A8  5010               	movf	main@i,w,c
   314  0009AA  ECFC  F004         	call	_set_sgram_byte
   315  0009AE  2A10               	incf	main@i,f,c
   316  0009B0  D7EF               	goto	l1013
   317  0009B2                     u400:
   318                           
   319                           ;main.c: 37: _delay((unsigned long)((500)*(20000000/4000.0)));
   320  0009B2  0E0D               	movlw	13
   321  0009B4  6E0E               	movwf	(??_main+1)& (0+255),c
   322  0009B6  0EAF               	movlw	175
   323  0009B8  6E0D               	movwf	??_main& (0+255),c
   324  0009BA  0EB6               	movlw	182
   325  0009BC                     u437:
   326  0009BC  2EE8               	decfsz	wreg,f,c
   327  0009BE  D7FE               	bra	u437
   328  0009C0  2E0D               	decfsz	??_main& (0+255),f,c
   329  0009C2  D7FC               	bra	u437
   330  0009C4  2E0E               	decfsz	(??_main+1)& (0+255),f,c
   331  0009C6  D7FA               	bra	u437
   332  0009C8  D000               	nop2	
   333  0009CA                     
   334                           ;main.c: 39: for (byte i = 0; i < 16;_delay((unsigned long)((500)*(20000000/4000.0))), +
      +                          +i)
   335  0009CA  0E00               	movlw	0
   336  0009CC  6E0F               	movwf	main@i_144,c
   337  0009CE                     l1027:
   338  0009CE  0E0F               	movlw	15
   339  0009D0  640F               	cpfsgt	main@i_144,c
   340  0009D2  D001               	goto	l66
   341  0009D4  D7FA               	goto	l65
   342  0009D6                     l66:
   343                           
   344                           ;main.c: 40: set_level(i);
   345  0009D6  500F               	movf	main@i_144,w,c
   346  0009D8  EC7B  F004         	call	_set_level
   347  0009DC  0E0D               	movlw	13
   348  0009DE  6E0E               	movwf	(??_main+1)& (0+255),c
   349  0009E0  0EAF               	movlw	175
   350  0009E2  6E0D               	movwf	??_main& (0+255),c
   351  0009E4  0EB6               	movlw	182
   352  0009E6                     u447:
   353  0009E6  2EE8               	decfsz	wreg,f,c
   354  0009E8  D7FE               	bra	u447
   355  0009EA  2E0D               	decfsz	??_main& (0+255),f,c
   356  0009EC  D7FC               	bra	u447
   357  0009EE  2E0E               	decfsz	(??_main+1)& (0+255),f,c
   358  0009F0  D7FA               	bra	u447
   359  0009F2  D000               	nop2	
   360  0009F4  2A0F               	incf	main@i_144,f,c
   361  0009F6  D7EB               	goto	l1027
   362  0009F8                     __end_of_main:
   363                           	opt stack 0
   364                           tblptru	equ	0xFF8
   365                           tblptrh	equ	0xFF7
   366                           prodh	equ	0xFF4
   367                           prodl	equ	0xFF3
   368                           wreg	equ	0xFE8
   369                           
   370 ;; *************** function _set_sgram_byte *****************
   371 ;; Defined at:
   372 ;;		line 36 in file "lcd.c"
   373 ;; Parameters:    Size  Location     Type
   374 ;;  dir             1    wreg     unsigned char 
   375 ;;  ptr             2    5[COMRAM] PTR unsigned char 
   376 ;;		 -> animation(64), 
   377 ;; Auto vars:     Size  Location     Type
   378 ;;  dir             1    7[COMRAM] unsigned char 
   379 ;;  i               1    8[COMRAM] unsigned char 
   380 ;; Return value:  Size  Location     Type
   381 ;;                  1    wreg      void 
   382 ;; Registers used:
   383 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   384 ;; Tracked objects:
   385 ;;		On entry : 0/0
   386 ;;		On exit  : 0/0
   387 ;;		Unchanged: 0/0
   388 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   389 ;;      Params:         2       0       0       0       0       0       0       0       0
   390 ;;      Locals:         2       0       0       0       0       0       0       0       0
   391 ;;      Temps:          0       0       0       0       0       0       0       0       0
   392 ;;      Totals:         4       0       0       0       0       0       0       0       0
   393 ;;Total ram usage:        4 bytes
   394 ;; Hardware stack levels used:    1
   395 ;; Hardware stack levels required when called:    2
   396 ;; This function calls:
   397 ;;		_send_byte
   398 ;; This function is called by:
   399 ;;		_main
   400 ;; This function uses a non-reentrant model
   401 ;;
   402                           
   403                           	psect	text1
   404  0009F8                     __ptext1:
   405                           	opt stack 0
   406  0009F8                     _set_sgram_byte:
   407                           	opt stack 28
   408                           
   409                           ;incstack = 0
   410                           ;set_sgram_byte@dir stored from wreg
   411  0009F8  6E08               	movwf	set_sgram_byte@dir,c
   412                           
   413                           ;lcd.c: 37: dir <<= 3;
   414  0009FA  90D8               	bcf	status,0,c
   415  0009FC  3608               	rlcf	set_sgram_byte@dir,f,c
   416  0009FE  90D8               	bcf	status,0,c
   417  000A00  3608               	rlcf	set_sgram_byte@dir,f,c
   418  000A02  90D8               	bcf	status,0,c
   419  000A04  3608               	rlcf	set_sgram_byte@dir,f,c
   420                           
   421                           ;lcd.c: 38: dir &= 0x38;
   422  000A06  0E38               	movlw	56
   423  000A08  1608               	andwf	set_sgram_byte@dir,f,c
   424                           
   425                           ;lcd.c: 39: send_byte(0, 0x40 | dir);
   426  000A0A  5008               	movf	set_sgram_byte@dir,w,c
   427  000A0C  0940               	iorlw	64
   428  000A0E  6E04               	movwf	send_byte@data,c
   429  000A10  0E00               	movlw	0
   430  000A12  EC4D  F005         	call	_send_byte
   431                           
   432                           ;lcd.c: 40: for(byte i=0; i<8; i++)
   433  000A16  0E00               	movlw	0
   434  000A18  6E09               	movwf	set_sgram_byte@i,c
   435  000A1A                     l909:
   436  000A1A  0E07               	movlw	7
   437  000A1C  6409               	cpfsgt	set_sgram_byte@i,c
   438  000A1E  D001               	goto	l25
   439  000A20  0012               	return	
   440  000A22                     l25:
   441                           
   442                           ;lcd.c: 41: send_byte(1, *ptr++);
   443  000A22  C006  FFF6         	movff	set_sgram_byte@ptr,tblptrl
   444  000A26  C007  FFF7         	movff	set_sgram_byte@ptr+1,tblptrh
   445  000A2A                     	if	0	;tblptru may be non-zero
   446  000A2A                     	endif
   447  000A2A                     	if	0	;tblptru may be non-zero
   448  000A2A                     	endif
   449  000A2A  0008               	tblrd		*
   450  000A2C  CFF5 F004          	movff	tablat,send_byte@data
   451  000A30  0E01               	movlw	1
   452  000A32  EC4D  F005         	call	_send_byte
   453  000A36  4A06               	infsnz	set_sgram_byte@ptr,f,c
   454  000A38  2A07               	incf	set_sgram_byte@ptr+1,f,c
   455  000A3A  2A09               	incf	set_sgram_byte@i,f,c
   456  000A3C  D7EE               	goto	l909
   457  000A3E                     __end_of_set_sgram_byte:
   458                           	opt stack 0
   459                           tblptru	equ	0xFF8
   460                           tblptrh	equ	0xFF7
   461                           tblptrl	equ	0xFF6
   462                           tablat	equ	0xFF5
   463                           prodh	equ	0xFF4
   464                           prodl	equ	0xFF3
   465                           wreg	equ	0xFE8
   466                           status	equ	0xFD8
   467                           
   468 ;; *************** function _set_level *****************
   469 ;; Defined at:
   470 ;;		line 14 in file "main.c"
   471 ;; Parameters:    Size  Location     Type
   472 ;;  level           1    wreg     unsigned char 
   473 ;; Auto vars:     Size  Location     Type
   474 ;;  level           1   10[COMRAM] unsigned char 
   475 ;;  i               1   11[COMRAM] unsigned char 
   476 ;; Return value:  Size  Location     Type
   477 ;;                  1    wreg      void 
   478 ;; Registers used:
   479 ;;		wreg, status,2, status,0, cstack
   480 ;; Tracked objects:
   481 ;;		On entry : 0/0
   482 ;;		On exit  : 0/0
   483 ;;		Unchanged: 0/0
   484 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   485 ;;      Params:         0       0       0       0       0       0       0       0       0
   486 ;;      Locals:         2       0       0       0       0       0       0       0       0
   487 ;;      Temps:          0       0       0       0       0       0       0       0       0
   488 ;;      Totals:         2       0       0       0       0       0       0       0       0
   489 ;;Total ram usage:        2 bytes
   490 ;; Hardware stack levels used:    1
   491 ;; Hardware stack levels required when called:    3
   492 ;; This function calls:
   493 ;;		_lcd_gotoxy
   494 ;;		_send_byte
   495 ;; This function is called by:
   496 ;;		_main
   497 ;; This function uses a non-reentrant model
   498 ;;
   499                           
   500                           	psect	text2
   501  0008F6                     __ptext2:
   502                           	opt stack 0
   503  0008F6                     _set_level:
   504                           	opt stack 27
   505                           
   506                           ;incstack = 0
   507                           ;set_level@level stored from wreg
   508  0008F6  6E0B               	movwf	set_level@level,c
   509                           
   510                           ;main.c: 15: byte i;
   511                           ;main.c: 16: send_byte(0,0x1);
   512  0008F8  0E01               	movlw	1
   513  0008FA  6E04               	movwf	send_byte@data,c
   514  0008FC  0E00               	movlw	0
   515  0008FE  EC4D  F005         	call	_send_byte
   516                           
   517                           ;main.c: 17: lcd_gotoxy(1,2);
   518  000902  0E02               	movlw	2
   519  000904  6E06               	movwf	lcd_gotoxy@y,c
   520  000906  0E01               	movlw	1
   521  000908  EC1F  F005         	call	_lcd_gotoxy
   522                           
   523                           ;main.c: 18: if(level<9){
   524  00090C  0E09               	movlw	9
   525  00090E  600B               	cpfslt	set_level@level,c
   526  000910  D00E               	goto	l46
   527                           
   528                           ;main.c: 19: for(i = 0;i<=level;i++)
   529  000912  0E00               	movlw	0
   530  000914  6E0C               	movwf	set_level@i,c
   531  000916  D006               	goto	l47
   532  000918                     
   533                           ;main.c: 20: send_byte(1,i);
   534  000918  C00C  F004         	movff	set_level@i,send_byte@data
   535  00091C  0E01               	movlw	1
   536  00091E  EC4D  F005         	call	_send_byte
   537  000922  2A0C               	incf	set_level@i,f,c
   538  000924                     l47:
   539  000924  500C               	movf	set_level@i,w,c
   540  000926  5C0B               	subwf	set_level@level,w,c
   541  000928  A0D8               	btfss	status,0,c
   542  00092A  0012               	return	
   543  00092C  D7F5               	goto	l48
   544  00092E                     l46:
   545                           
   546                           ;main.c: 22: else{
   547                           ;main.c: 23: for(i = 0; i < 8; ++i)
   548  00092E  0E00               	movlw	0
   549  000930  6E0C               	movwf	set_level@i,c
   550  000932                     l977:
   551  000932  0E07               	movlw	7
   552  000934  640C               	cpfsgt	set_level@i,c
   553  000936  D001               	goto	l51
   554  000938  D007               	goto	u350
   555  00093A                     l51:
   556                           
   557                           ;main.c: 24: send_byte(1,i);
   558  00093A  C00C  F004         	movff	set_level@i,send_byte@data
   559  00093E  0E01               	movlw	1
   560  000940  EC4D  F005         	call	_send_byte
   561  000944  2A0C               	incf	set_level@i,f,c
   562  000946  D7F5               	goto	l977
   563  000948                     u350:
   564                           
   565                           ;main.c: 25: for (i = 0; i < 8; ++i)
   566  000948  0E00               	movlw	0
   567  00094A  6E0C               	movwf	set_level@i,c
   568  00094C                     l989:
   569  00094C  0E07               	movlw	7
   570  00094E  640C               	cpfsgt	set_level@i,c
   571  000950  D001               	goto	l53
   572  000952  D007               	goto	u370
   573  000954                     l53:
   574                           
   575                           ;main.c: 26: send_byte(1,0x07);
   576  000954  0E07               	movlw	7
   577  000956  6E04               	movwf	send_byte@data,c
   578  000958  0E01               	movlw	1
   579  00095A  EC4D  F005         	call	_send_byte
   580  00095E  2A0C               	incf	set_level@i,f,c
   581  000960  D7F5               	goto	l989
   582  000962                     u370:
   583                           
   584                           ;main.c: 27: lcd_gotoxy(9,1);
   585  000962  0E01               	movlw	1
   586  000964  6E06               	movwf	lcd_gotoxy@y,c
   587  000966  0E09               	movlw	9
   588  000968  EC1F  F005         	call	_lcd_gotoxy
   589                           
   590                           ;main.c: 28: for(i = 0;i<=level;i++)
   591  00096C  0E00               	movlw	0
   592  00096E  6E0C               	movwf	set_level@i,c
   593  000970  D006               	goto	l55
   594  000972                     
   595                           ;main.c: 29: send_byte(1,i);
   596  000972  C00C  F004         	movff	set_level@i,send_byte@data
   597  000976  0E01               	movlw	1
   598  000978  EC4D  F005         	call	_send_byte
   599  00097C  2A0C               	incf	set_level@i,f,c
   600  00097E                     l55:
   601  00097E  500C               	movf	set_level@i,w,c
   602  000980  5C0B               	subwf	set_level@level,w,c
   603  000982  A0D8               	btfss	status,0,c
   604  000984  0012               	return	
   605  000986  D7F5               	goto	l56
   606  000988                     __end_of_set_level:
   607                           	opt stack 0
   608                           tblptru	equ	0xFF8
   609                           tblptrh	equ	0xFF7
   610                           tblptrl	equ	0xFF6
   611                           tablat	equ	0xFF5
   612                           prodh	equ	0xFF4
   613                           prodl	equ	0xFF3
   614                           wreg	equ	0xFE8
   615                           status	equ	0xFD8
   616                           
   617 ;; *************** function _lcd_gotoxy *****************
   618 ;; Defined at:
   619 ;;		line 43 in file "lcd.c"
   620 ;; Parameters:    Size  Location     Type
   621 ;;  x               1    wreg     unsigned char 
   622 ;;  y               1    5[COMRAM] unsigned char 
   623 ;; Auto vars:     Size  Location     Type
   624 ;;  x               1    6[COMRAM] unsigned char 
   625 ;;  dir             1    9[COMRAM] unsigned char 
   626 ;; Return value:  Size  Location     Type
   627 ;;                  1    wreg      void 
   628 ;; Registers used:
   629 ;;		wreg, status,2, status,0, cstack
   630 ;; Tracked objects:
   631 ;;		On entry : 0/0
   632 ;;		On exit  : 0/0
   633 ;;		Unchanged: 0/0
   634 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   635 ;;      Params:         1       0       0       0       0       0       0       0       0
   636 ;;      Locals:         4       0       0       0       0       0       0       0       0
   637 ;;      Temps:          0       0       0       0       0       0       0       0       0
   638 ;;      Totals:         5       0       0       0       0       0       0       0       0
   639 ;;Total ram usage:        5 bytes
   640 ;; Hardware stack levels used:    1
   641 ;; Hardware stack levels required when called:    2
   642 ;; This function calls:
   643 ;;		_send_byte
   644 ;; This function is called by:
   645 ;;		_set_level
   646 ;; This function uses a non-reentrant model
   647 ;;
   648                           
   649                           	psect	text3
   650  000A3E                     __ptext3:
   651                           	opt stack 0
   652  000A3E                     _lcd_gotoxy:
   653                           	opt stack 27
   654                           
   655                           ;incstack = 0
   656                           ;lcd_gotoxy@x stored from wreg
   657  000A3E  6E07               	movwf	lcd_gotoxy@x,c
   658                           
   659                           ;lcd.c: 44: byte dir = y!=1? 0x40:0;
   660  000A40  0406               	decf	lcd_gotoxy@y,w,c
   661  000A42  A4D8               	btfss	status,2,c
   662  000A44  D004               	goto	l31
   663  000A46  0E00               	movlw	0
   664  000A48  6E09               	movwf	_lcd_gotoxy$121+1,c
   665  000A4A  0E00               	movlw	0
   666  000A4C  D003               	goto	L1
   667  000A4E                     l31:
   668  000A4E  0E00               	movlw	0
   669  000A50  6E09               	movwf	_lcd_gotoxy$121+1,c
   670  000A52  0E40               	movlw	64
   671  000A54                     L1:
   672  000A54  6E08               	movwf	_lcd_gotoxy$121,c
   673  000A56  C008  F00A         	movff	_lcd_gotoxy$121,lcd_gotoxy@dir
   674                           
   675                           ;lcd.c: 45: dir += x-1;
   676  000A5A  0407               	decf	lcd_gotoxy@x,w,c
   677  000A5C  260A               	addwf	lcd_gotoxy@dir,f,c
   678                           
   679                           ;lcd.c: 46: send_byte(0,0x80|dir);
   680  000A5E  500A               	movf	lcd_gotoxy@dir,w,c
   681  000A60  0980               	iorlw	128
   682  000A62  6E04               	movwf	send_byte@data,c
   683  000A64  0E00               	movlw	0
   684  000A66  EC4D  F005         	call	_send_byte
   685  000A6A  0012               	return		;funcret
   686  000A6C                     __end_of_lcd_gotoxy:
   687                           	opt stack 0
   688                           tblptru	equ	0xFF8
   689                           tblptrh	equ	0xFF7
   690                           tblptrl	equ	0xFF6
   691                           tablat	equ	0xFF5
   692                           prodh	equ	0xFF4
   693                           prodl	equ	0xFF3
   694                           wreg	equ	0xFE8
   695                           status	equ	0xFD8
   696                           
   697 ;; *************** function _lcd_init *****************
   698 ;; Defined at:
   699 ;;		line 48 in file "lcd.c"
   700 ;; Parameters:    Size  Location     Type
   701 ;;		None
   702 ;; Auto vars:     Size  Location     Type
   703 ;;  i               1    6[COMRAM] unsigned char 
   704 ;; Return value:  Size  Location     Type
   705 ;;                  1    wreg      void 
   706 ;; Registers used:
   707 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   708 ;; Tracked objects:
   709 ;;		On entry : 0/0
   710 ;;		On exit  : 0/0
   711 ;;		Unchanged: 0/0
   712 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   713 ;;      Params:         0       0       0       0       0       0       0       0       0
   714 ;;      Locals:         1       0       0       0       0       0       0       0       0
   715 ;;      Temps:          1       0       0       0       0       0       0       0       0
   716 ;;      Totals:         2       0       0       0       0       0       0       0       0
   717 ;;Total ram usage:        2 bytes
   718 ;; Hardware stack levels used:    1
   719 ;; Hardware stack levels required when called:    2
   720 ;; This function calls:
   721 ;;		_send_byte
   722 ;;		_send_nibble
   723 ;; This function is called by:
   724 ;;		_main
   725 ;; This function uses a non-reentrant model
   726 ;;
   727                           
   728                           	psect	text4
   729  000846                     __ptext4:
   730                           	opt stack 0
   731  000846                     _lcd_init:
   732                           	opt stack 28
   733                           
   734                           ;lcd.c: 49: byte i;
   735                           ;lcd.c: 50: TRISD = 0xF0;
   736                           
   737                           ;incstack = 0
   738  000846  0EF0               	movlw	240
   739  000848  6E95               	movwf	3989,c	;volatile
   740                           
   741                           ;lcd.c: 51: TRISCbits.RC0 = TRISCbits.RC1 = 0;
   742  00084A  9294               	bcf	3988,1,c	;volatile
   743  00084C  9094               	bcf	3988,0,c	;volatile
   744                           
   745                           ;lcd.c: 52: LATCbits.LC0 = LATCbits.LC1 = 0;
   746  00084E  928B               	bcf	3979,1,c	;volatile
   747  000850  908B               	bcf	3979,0,c	;volatile
   748                           
   749                           ;lcd.c: 53: LATD = 0x0F & 0x00;
   750  000852  0E00               	movlw	0
   751  000854  6E8C               	movwf	3980,c	;volatile
   752                           
   753                           ;lcd.c: 54: _delay((unsigned long)((15)*(20000000/4000.0)));
   754  000856  0E62               	movlw	98
   755  000858  6E06               	movwf	??_lcd_init& (0+255),c
   756  00085A  0E66               	movlw	102
   757  00085C                     u457:
   758  00085C  2EE8               	decfsz	wreg,f,c
   759  00085E  D7FE               	bra	u457
   760  000860  2E06               	decfsz	??_lcd_init& (0+255),f,c
   761  000862  D7FC               	bra	u457
   762                           
   763                           ;lcd.c: 55: for (i = 0; i < 3;_delay((unsigned long)((5)*(20000000/4000.0))), ++i)
   764  000864  0E00               	movlw	0
   765  000866  6E07               	movwf	lcd_init@i,c
   766  000868                     l931:
   767  000868  0E02               	movlw	2
   768  00086A  6407               	cpfsgt	lcd_init@i,c
   769  00086C  D001               	goto	l37
   770  00086E  D00F               	goto	u290
   771  000870                     l37:
   772                           
   773                           ;lcd.c: 56: send_nibble(0,3);
   774  000870  0E03               	movlw	3
   775  000872  6E01               	movwf	send_nibble@data,c
   776  000874  0E00               	movlw	0
   777  000876  EC36  F005         	call	_send_nibble
   778  00087A  0E21               	movlw	33
   779  00087C  6E06               	movwf	??_lcd_init& (0+255),c
   780  00087E  0E76               	movlw	118
   781  000880                     u467:
   782  000880  2EE8               	decfsz	wreg,f,c
   783  000882  D7FE               	bra	u467
   784  000884  2E06               	decfsz	??_lcd_init& (0+255),f,c
   785  000886  D7FC               	bra	u467
   786  000888  D000               	nop2	
   787  00088A  2A07               	incf	lcd_init@i,f,c
   788  00088C  D7ED               	goto	l931
   789  00088E                     u290:
   790                           
   791                           ;lcd.c: 57: send_nibble(0,2);
   792  00088E  0E02               	movlw	2
   793  000890  6E01               	movwf	send_nibble@data,c
   794  000892  0E00               	movlw	0
   795  000894  EC36  F005         	call	_send_nibble
   796                           
   797                           ;lcd.c: 58: _delay((unsigned long)((5)*(20000000/4000.0)));
   798  000898  0E21               	movlw	33
   799  00089A  6E06               	movwf	??_lcd_init& (0+255),c
   800  00089C  0E76               	movlw	118
   801  00089E                     u477:
   802  00089E  2EE8               	decfsz	wreg,f,c
   803  0008A0  D7FE               	bra	u477
   804  0008A2  2E06               	decfsz	??_lcd_init& (0+255),f,c
   805  0008A4  D7FC               	bra	u477
   806  0008A6  D000               	nop2	
   807                           
   808                           ;lcd.c: 59: for (i = 0; i < 4; _delay((unsigned long)((5)*(20000000/4000.0))),++i)
   809  0008A8  0E00               	movlw	0
   810  0008AA  6E07               	movwf	lcd_init@i,c
   811  0008AC                     l949:
   812  0008AC  0E03               	movlw	3
   813  0008AE  6407               	cpfsgt	lcd_init@i,c
   814  0008B0  D001               	goto	l39
   815  0008B2  D018               	goto	u310
   816  0008B4                     l39:
   817                           
   818                           ;lcd.c: 60: send_byte(0,init_str[i]);
   819  0008B4  5007               	movf	lcd_init@i,w,c
   820  0008B6  0D01               	mullw	1
   821  0008B8  0E01               	movlw	low _init_str
   822  0008BA  24F3               	addwf	prodl,w,c
   823  0008BC  6EF6               	movwf	tblptrl,c
   824  0008BE  0E08               	movlw	high _init_str
   825  0008C0  20F4               	addwfc	prodh,w,c
   826  0008C2  6EF7               	movwf	tblptrh,c
   827  0008C4                     	if	0	;There are less than 3 active tblptr bytes
   828  0008C4                     	endif
   829  0008C4  0008               	tblrd		*
   830  0008C6  CFF5 F004          	movff	tablat,send_byte@data
   831  0008CA  0E00               	movlw	0
   832  0008CC  EC4D  F005         	call	_send_byte
   833  0008D0  0E21               	movlw	33
   834  0008D2  6E06               	movwf	??_lcd_init& (0+255),c
   835  0008D4  0E76               	movlw	118
   836  0008D6                     u487:
   837  0008D6  2EE8               	decfsz	wreg,f,c
   838  0008D8  D7FE               	bra	u487
   839  0008DA  2E06               	decfsz	??_lcd_init& (0+255),f,c
   840  0008DC  D7FC               	bra	u487
   841  0008DE  D000               	nop2	
   842  0008E0  2A07               	incf	lcd_init@i,f,c
   843  0008E2  D7E4               	goto	l949
   844  0008E4                     u310:
   845                           
   846                           ;lcd.c: 61: _delay((unsigned long)((1)*(20000000/4000.0)));
   847  0008E4  0E07               	movlw	7
   848  0008E6  6E06               	movwf	??_lcd_init& (0+255),c
   849  0008E8  0E7D               	movlw	125
   850  0008EA                     u497:
   851  0008EA  2EE8               	decfsz	wreg,f,c
   852  0008EC  D7FE               	bra	u497
   853  0008EE  2E06               	decfsz	??_lcd_init& (0+255),f,c
   854  0008F0  D7FC               	bra	u497
   855  0008F2  F000               	nop	
   856  0008F4  0012               	return		;funcret
   857  0008F6                     __end_of_lcd_init:
   858                           	opt stack 0
   859                           tblptru	equ	0xFF8
   860                           tblptrh	equ	0xFF7
   861                           tblptrl	equ	0xFF6
   862                           tablat	equ	0xFF5
   863                           prodh	equ	0xFF4
   864                           prodl	equ	0xFF3
   865                           wreg	equ	0xFE8
   866                           status	equ	0xFD8
   867                           
   868 ;; *************** function _send_byte *****************
   869 ;; Defined at:
   870 ;;		line 32 in file "lcd.c"
   871 ;; Parameters:    Size  Location     Type
   872 ;;  comand          1    wreg     unsigned char 
   873 ;;  data            1    3[COMRAM] unsigned char 
   874 ;; Auto vars:     Size  Location     Type
   875 ;;  comand          1    4[COMRAM] unsigned char 
   876 ;; Return value:  Size  Location     Type
   877 ;;                  1    wreg      void 
   878 ;; Registers used:
   879 ;;		wreg, status,2, status,0, cstack
   880 ;; Tracked objects:
   881 ;;		On entry : 0/0
   882 ;;		On exit  : 0/0
   883 ;;		Unchanged: 0/0
   884 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   885 ;;      Params:         1       0       0       0       0       0       0       0       0
   886 ;;      Locals:         1       0       0       0       0       0       0       0       0
   887 ;;      Temps:          0       0       0       0       0       0       0       0       0
   888 ;;      Totals:         2       0       0       0       0       0       0       0       0
   889 ;;Total ram usage:        2 bytes
   890 ;; Hardware stack levels used:    1
   891 ;; Hardware stack levels required when called:    1
   892 ;; This function calls:
   893 ;;		_send_nibble
   894 ;; This function is called by:
   895 ;;		_set_sgram_byte
   896 ;;		_lcd_gotoxy
   897 ;;		_lcd_init
   898 ;;		_set_level
   899 ;; This function uses a non-reentrant model
   900 ;;
   901                           
   902                           	psect	text5
   903  000A9A                     __ptext5:
   904                           	opt stack 0
   905  000A9A                     _send_byte:
   906                           	opt stack 28
   907                           
   908                           ;incstack = 0
   909                           ;send_byte@comand stored from wreg
   910  000A9A  6E05               	movwf	send_byte@comand,c
   911                           
   912                           ;lcd.c: 33: send_nibble(comand,data>>4);
   913  000A9C  3804               	swapf	send_byte@data,w,c
   914  000A9E  0B0F               	andlw	15
   915  000AA0  6E01               	movwf	send_nibble@data,c
   916  000AA2  5005               	movf	send_byte@comand,w,c
   917  000AA4  EC36  F005         	call	_send_nibble
   918                           
   919                           ;lcd.c: 34: send_nibble(comand,data);
   920  000AA8  C004  F001         	movff	send_byte@data,send_nibble@data
   921  000AAC  5005               	movf	send_byte@comand,w,c
   922  000AAE  EC36  F005         	call	_send_nibble
   923  000AB2  0012               	return		;funcret
   924  000AB4                     __end_of_send_byte:
   925                           	opt stack 0
   926                           tblptru	equ	0xFF8
   927                           tblptrh	equ	0xFF7
   928                           tblptrl	equ	0xFF6
   929                           tablat	equ	0xFF5
   930                           prodh	equ	0xFF4
   931                           prodl	equ	0xFF3
   932                           wreg	equ	0xFE8
   933                           status	equ	0xFD8
   934                           
   935 ;; *************** function _send_nibble *****************
   936 ;; Defined at:
   937 ;;		line 25 in file "lcd.c"
   938 ;; Parameters:    Size  Location     Type
   939 ;;  comand          1    wreg     unsigned char 
   940 ;;  data            1    0[COMRAM] unsigned char 
   941 ;; Auto vars:     Size  Location     Type
   942 ;;  comand          1    1[COMRAM] unsigned char 
   943 ;;  i               1    2[COMRAM] unsigned char 
   944 ;; Return value:  Size  Location     Type
   945 ;;                  1    wreg      void 
   946 ;; Registers used:
   947 ;;		wreg, status,2, status,0
   948 ;; Tracked objects:
   949 ;;		On entry : 0/0
   950 ;;		On exit  : 0/0
   951 ;;		Unchanged: 0/0
   952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   953 ;;      Params:         1       0       0       0       0       0       0       0       0
   954 ;;      Locals:         2       0       0       0       0       0       0       0       0
   955 ;;      Temps:          0       0       0       0       0       0       0       0       0
   956 ;;      Totals:         3       0       0       0       0       0       0       0       0
   957 ;;Total ram usage:        3 bytes
   958 ;; Hardware stack levels used:    1
   959 ;; This function calls:
   960 ;;		Nothing
   961 ;; This function is called by:
   962 ;;		_send_byte
   963 ;;		_lcd_init
   964 ;; This function uses a non-reentrant model
   965 ;;
   966                           
   967                           	psect	text6
   968  000A6C                     __ptext6:
   969                           	opt stack 0
   970  000A6C                     _send_nibble:
   971                           	opt stack 28
   972                           
   973                           ;incstack = 0
   974                           ;send_nibble@comand stored from wreg
   975  000A6C  6E02               	movwf	send_nibble@comand,c
   976                           
   977                           ;lcd.c: 26: LATCbits.LC1 = comand; __nop();
   978  000A6E  B002               	btfsc	send_nibble@comand,0,c
   979  000A70  D002               	bra	u225
   980  000A72  928B               	bcf	3979,1,c	;volatile
   981  000A74  D001               	bra	u226
   982  000A76                     u225:
   983  000A76  828B               	bsf	3979,1,c	;volatile
   984  000A78                     u226:
   985  000A78  F000               	nop	
   986                           
   987                           ;lcd.c: 27: LATCbits.LC0 = 1; __nop();
   988  000A7A  808B               	bsf	3979,0,c	;volatile
   989  000A7C  F000               	nop	
   990                           
   991                           ;lcd.c: 28: LATD = 0x0F & data; __nop();
   992  000A7E  5001               	movf	send_nibble@data,w,c
   993  000A80  0B0F               	andlw	15
   994  000A82  6E8C               	movwf	3980,c	;volatile
   995  000A84  F000               	nop	
   996                           
   997                           ;lcd.c: 29: LATCbits.LC0 = 0;
   998  000A86  908B               	bcf	3979,0,c	;volatile
   999                           
  1000                           ;lcd.c: 30: for(byte i=0;i<20;i++) __nop();
  1001  000A88  0E00               	movlw	0
  1002  000A8A  6E03               	movwf	send_nibble@i,c
  1003  000A8C                     l881:
  1004  000A8C  0E13               	movlw	19
  1005  000A8E  6403               	cpfsgt	send_nibble@i,c
  1006  000A90  D001               	goto	l17
  1007  000A92  0012               	return	
  1008  000A94                     l17:
  1009  000A94  F000               	nop	
  1010  000A96  2A03               	incf	send_nibble@i,f,c
  1011  000A98  D7F9               	goto	l881
  1012  000A9A                     __end_of_send_nibble:
  1013                           	opt stack 0
  1014                           tblptru	equ	0xFF8
  1015                           tblptrh	equ	0xFF7
  1016                           tblptrl	equ	0xFF6
  1017                           tablat	equ	0xFF5
  1018                           prodh	equ	0xFF4
  1019                           prodl	equ	0xFF3
  1020                           wreg	equ	0xFE8
  1021                           status	equ	0xFD8
  1022                           tblptru	equ	0xFF8
  1023                           tblptrh	equ	0xFF7
  1024                           tblptrl	equ	0xFF6
  1025                           tablat	equ	0xFF5
  1026                           prodh	equ	0xFF4
  1027                           prodl	equ	0xFF3
  1028                           wreg	equ	0xFE8
  1029                           status	equ	0xFD8
  1030                           
  1031                           	psect	rparam
  1032  0000                     tblptru	equ	0xFF8
  1033                           tblptrh	equ	0xFF7
  1034                           tblptrl	equ	0xFF6
  1035                           tablat	equ	0xFF5
  1036                           prodh	equ	0xFF4
  1037                           prodl	equ	0xFF3
  1038                           wreg	equ	0xFE8
  1039                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    68
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     16      16
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    set_sgram_byte@ptr	PTR unsigned char  size(2) Largest target is 64
		 -> animation(CODE[64]), 


Critical Paths under _main in COMRAM

    _main->_set_level
    _set_sgram_byte->_send_byte
    _set_level->_lcd_gotoxy
    _lcd_gotoxy->_send_byte
    _lcd_init->_send_byte
    _send_byte->_send_nibble

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0    6015
                                             12 COMRAM     4     4      0
                           _lcd_init
                          _set_level
                     _set_sgram_byte
 ---------------------------------------------------------------------------------
 (1) _set_sgram_byte                                       4     2      2    1335
                                              5 COMRAM     4     2      2
                          _send_byte
 ---------------------------------------------------------------------------------
 (1) _set_level                                            2     2      0    2848
                                             10 COMRAM     2     2      0
                         _lcd_gotoxy
                          _send_byte
 ---------------------------------------------------------------------------------
 (2) _lcd_gotoxy                                           5     4      1    1410
                                              5 COMRAM     5     4      1
                          _send_byte
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             2     2      0    1674
                                              5 COMRAM     2     2      0
                          _send_byte
                        _send_nibble
 ---------------------------------------------------------------------------------
 (2) _send_byte                                            2     1      1    1166
                                              3 COMRAM     2     1      1
                        _send_nibble
 ---------------------------------------------------------------------------------
 (3) _send_nibble                                          3     2      1     394
                                              0 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _lcd_init
     _send_byte
       _send_nibble
     _send_nibble
   _set_level
     _lcd_gotoxy
       _send_byte
         _send_nibble
     _send_byte
       _send_nibble
   _set_sgram_byte
     _send_byte
       _send_nibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           5F      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              5F     10      10       1       16.8%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
ABS                  0      0       0      20        0.0%
BIGRAM             7FF      0       0      21        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sat Apr 21 12:11:36 2018

                     l31 0A4E                       l17 0A94                       l25 0A22  
                     l51 093A                       l37 0870                       l53 0954  
                     l46 092E                       l39 08B4                       l55 097E  
                     l47 0924                       l63 0998                       l56 0972  
                     l48 0918                       l65 09CA                       l66 09D6  
            __CFG_BORV$3 000000             __CFG_CP0$OFF 000000             __CFG_CP1$OFF 000000  
           __CFG_CP2$OFF 000000             __CFG_CP3$OFF 000000                      l931 0868  
                    l909 0A1A                      l881 0A8C                      l949 08AC  
                    l977 0932                      l989 094C             __CFG_CPB$OFF 000000  
                    u310 08E4                      u400 09B2                      u225 0A76  
                    u226 0A78                      u350 0948                      u290 088E  
                    u370 0962             __CFG_CPD$OFF 000000                      u437 09BC  
                    u447 09E6                      u457 085C                      u467 0880  
                    u477 089E                      u487 08D6                      u497 08EA  
           __CFG_BOR$OFF 000000                      prod 000FF3                      wreg 000FE8  
           __CFG_FOSC$HS 000000              lcd_gotoxy@x 0007              lcd_gotoxy@y 0006  
           __CFG_LVP$OFF 000000             __CFG_WDT$OFF 000000                     l1013 0990  
                   l1027 09CE                     _LATD 000F8C                     _main 0988  
                   prodh 000FF4                     prodl 000FF3                     start 0000  
          __CFG_IESO$OFF 000000            __CFG_MCLRE$ON 000000             ___param_bank 000000  
          __CFG_PLLDIV$1 000000           __CFG_CCP2MX$ON 000000                    ?_main 0001  
          __CFG_USBDIV$1 000000                    _TRISD 000F95            __CFG_PWRT$OFF 000000  
          __CFG_WRT0$OFF 000000          send_byte@comand 0005            __CFG_WRT1$OFF 000000  
          __CFG_WRT2$OFF 000000            __CFG_WRT3$OFF 000000           __CFG_EBTR0$OFF 000000  
         __CFG_FCMEN$OFF 000000           __CFG_EBTR1$OFF 000000           __CFG_EBTR2$OFF 000000  
         __CFG_EBTR3$OFF 000000            __CFG_WRTB$OFF 000000            __CFG_WRTC$OFF 000000  
          __CFG_WRTD$OFF 000000           __CFG_EBTRB$OFF 000000                    main@i 0010  
                  tablat 000FF5          send_nibble@data 0001                    status 000FD8  
         __CFG_ICPRT$OFF 000000          __initialization 0AB4             __end_of_main 09F8  
          lcd_gotoxy@dir 000A                   ??_main 000D            __activetblptr 000001  
           ?_send_nibble 0001           __CFG_XINST$OFF 000000         __end_of_lcd_init 08F6  
         __CFG_STVREN$ON 000000         __end_of_init_str 0805             __mediumconst 0000  
                 tblptrh 000FF7                   tblptrl 000FF6                   tblptru 000FF8  
        set_sgram_byte@i 0009               __accesstop 0060  __end_of__initialization 0AB4  
        __CFG_PBADEN$OFF 000000            ___rparam_used 000001           __pcstackCOMRAM 0001  
__size_of_set_sgram_byte 0046       __size_of_send_byte 001A       __size_of_set_level 0092  
             _lcd_gotoxy 0A3E                ?_lcd_init 0001          __CFG_VREGEN$OFF 000000  
   __size_of_send_nibble 002E        __end_of_animation 0845                  __Hparam 0000  
                __Lparam 0000             __psmallconst 0800                  __pcinit 0AB4  
                __ramtop 0800                  __ptext0 0988                  __ptext1 09F8  
                __ptext2 08F6                  __ptext3 0A3E                  __ptext4 0846  
                __ptext5 0A9A                  __ptext6 0A6C               ??_lcd_init 0006  
   end_of_initialization 0AB4        __end_of_send_byte 0AB4        __end_of_set_level 0988  
      send_nibble@comand 0002           set_level@level 000B                _TRISCbits 000F94  
            ?_lcd_gotoxy 0006            send_byte@data 0004           _set_sgram_byte 09F8  
    start_initialization 0AB4   __end_of_set_sgram_byte 0A3E      __size_of_lcd_gotoxy 002E  
       __CFG_LPT1OSC$OFF 000000        __size_of_lcd_init 00B0          ?_set_sgram_byte 0006  
              _animation 0805              __smallconst 0800            ??_send_nibble 0002  
             set_level@i 000C                 _LATCbits 000F8B                _send_byte 0A9A  
              _set_level 08F6         __CFG_WDTPS$32768 000000                main@i_144 000F  
              lcd_init@i 0007             send_nibble@i 0003             ??_lcd_gotoxy 0007  
    __end_of_send_nibble 0A9A               ?_send_byte 0004                 __Hrparam 0000  
             ?_set_level 0001                 __Lrparam 0000             __Lsmallconst 0800  
     __end_of_lcd_gotoxy 0A6C                 _lcd_init 0846            __size_of_main 0070  
               _init_str 0801           _lcd_gotoxy$121 0008    __CFG_CPUDIV$OSC1_PLL2 000000  
            _send_nibble 0A6C         ??_set_sgram_byte 0008              ??_send_byte 0005  
            ??_set_level 000B        set_sgram_byte@dir 0008        set_sgram_byte@ptr 0006  
