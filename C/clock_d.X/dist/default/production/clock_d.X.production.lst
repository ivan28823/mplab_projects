

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sun Jun 03 10:36:52 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	bitnvCOMRAM,global,bit,class=COMRAM,space=1,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    19                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    23                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    24                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    25  0000                     
    26                           ; Version 1.45
    27                           ; Generated 16/11/2017 GMT
    28                           ; 
    29                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    30                           ; All rights reserved.
    31                           ; 
    32                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    33                           ; 
    34                           ; Redistribution and use in source and binary forms, with or without modification, are
    35                           ; permitted provided that the following conditions are met:
    36                           ; 
    37                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    38                           ;        conditions and the following disclaimer.
    39                           ; 
    40                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    41                           ;        of conditions and the following disclaimer in the documentation and/or other
    42                           ;        materials provided with the distribution.
    43                           ; 
    44                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    45                           ;        software without specific prior written permission.
    46                           ; 
    47                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    48                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    49                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    50                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    51                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    52                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    53                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    54                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    55                           ; 
    56                           ; 
    57                           ; Code-generator required, PIC18F4550 Definitions
    58                           ; 
    59                           ; SFR Addresses
    60  0000                     
    61                           	psect	bitnvCOMRAM
    62  000200                     __pbitnvCOMRAM:
    63                           	opt stack 0
    64  000200                     _flag_t:
    65                           	opt stack 0
    66  000200                     	ds	1
    67  0000                     _LATD	set	3980
    68  0000                     _RCONbits	set	4048
    69  0000                     _IPR1bits	set	3999
    70  0000                     _T1CON	set	4045
    71  0000                     _INTCON2bits	set	4081
    72  0000                     _T0CON	set	4053
    73  0000                     _LATB	set	3978
    74  0000                     _LATA	set	3977
    75  0000                     _TRISB	set	3987
    76  0000                     _TRISD	set	3989
    77  0000                     _TRISA	set	3986
    78  0000                     _CMCON	set	4020
    79  0000                     _ADCON1	set	4033
    80  0000                     _PIE1bits	set	3997
    81  0000                     _PORTAbits	set	3968
    82  0000                     _TMR0H	set	4055
    83  0000                     _TMR0L	set	4054
    84  0000                     _INTCONbits	set	4082
    85  0000                     _TMR1H	set	4047
    86  0000                     _PIR1bits	set	3998
    87                           
    88                           	psect	smallconst
    89  000800                     __psmallconst:
    90                           	opt stack 0
    91  000800  00                 	db	0
    92  000801                     STR_1:
    93  000801  C0                 	db	-64
    94  000802  F9                 	db	-7
    95  000803  A4                 	db	-92
    96  000804  B0                 	db	-80
    97  000805  99                 	db	-103
    98  000806  92                 	db	-110
    99  000807  82                 	db	-126
   100  000808  F8                 	db	-8
   101  000809  80                 	db	-128
   102  00080A  98                 	db	-104
   103  00080B  BF                 	db	-65
   104  00080C  FF                 	db	-1
   105  00080D  00                 	db	0
   106                           
   107                           ; #config settings
   108  00080E  00                 	db	0	; dummy byte at the end
   109  0000                     
   110                           	psect	cinit
   111  000D56                     __pcinit:
   112                           	opt stack 0
   113  000D56                     start_initialization:
   114                           	opt stack 0
   115  000D56                     __initialization:
   116                           	opt stack 0
   117                           
   118                           ; Clear objects allocated to COMRAM (8 bytes)
   119  000D56  EE00  F038         	lfsr	0,__pbssCOMRAM
   120  000D5A  0E08               	movlw	8
   121  000D5C                     clear_0:
   122  000D5C  6AEE               	clrf	postinc0,c
   123  000D5E  06E8               	decf	wreg,f,c
   124  000D60  E1FD               	bnz	clear_0
   125  000D62                     end_of_initialization:
   126                           	opt stack 0
   127  000D62                     __end_of__initialization:
   128                           	opt stack 0
   129  000D62  9041               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   130  000D64  9241               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   131  000D66  0E00               	movlw	low (__Lmediumconst shr (0+16))
   132  000D68  6EF8               	movwf	tblptru,c
   133  000D6A  0100               	movlb	0
   134  000D6C  EF98  F006         	goto	_main	;jump to C main() function
   135                           tblptru	equ	0xFF8
   136                           postinc0	equ	0xFEE
   137                           wreg	equ	0xFE8
   138                           
   139                           	psect	bssCOMRAM
   140  000038                     __pbssCOMRAM:
   141                           	opt stack 0
   142  000038                     _count:
   143                           	opt stack 0
   144  000038                     	ds	2
   145  00003A                     _count_rbnd:
   146                           	opt stack 0
   147  00003A                     	ds	1
   148  00003B                     _flagStatus:
   149                           	opt stack 0
   150  00003B                     	ds	1
   151  00003C                     _clock:
   152                           	opt stack 0
   153  00003C                     	ds	4
   154                           tblptru	equ	0xFF8
   155                           postinc0	equ	0xFEE
   156                           wreg	equ	0xFE8
   157                           
   158                           	psect	cstackCOMRAM
   159  000001                     __pcstackCOMRAM:
   160                           	opt stack 0
   161  000001                     pp_tm@tm_ptr:
   162                           	opt stack 0
   163                           
   164                           ; 2 bytes @ 0x0
   165  000001                     	ds	2
   166  000003                     pp_tm@type:
   167                           	opt stack 0
   168                           
   169                           ; 1 bytes @ 0x2
   170  000003                     	ds	1
   171  000004                     
   172                           ; 1 bytes @ 0x3
   173  000004                     	ds	1
   174  000005                     pp_time@tm_ptr:
   175                           	opt stack 0
   176                           
   177                           ; 2 bytes @ 0x4
   178  000005                     	ds	2
   179  000007                     ??_ISR:
   180                           
   181                           ; 1 bytes @ 0x6
   182  000007                     	ds	18
   183  000019                     ?___lwdiv:
   184                           	opt stack 0
   185  000019                     ?___lwmod:
   186                           	opt stack 0
   187  000019                     wait_timer@n:
   188                           	opt stack 0
   189  000019                     ___lwdiv@dividend:
   190                           	opt stack 0
   191  000019                     ___lwmod@dividend:
   192                           	opt stack 0
   193                           
   194                           ; 2 bytes @ 0x18
   195  000019                     	ds	1
   196  00001A                     show_count@ptr:
   197                           	opt stack 0
   198                           
   199                           ; 2 bytes @ 0x19
   200  00001A                     	ds	1
   201  00001B                     ___lwdiv@divisor:
   202                           	opt stack 0
   203  00001B                     ___lwmod@divisor:
   204                           	opt stack 0
   205                           
   206                           ; 2 bytes @ 0x1A
   207  00001B                     	ds	1
   208  00001C                     ??_show_count:
   209                           
   210                           ; 1 bytes @ 0x1B
   211  00001C                     	ds	1
   212  00001D                     ___lwmod@counter:
   213                           	opt stack 0
   214  00001D                     ___lwdiv@quotient:
   215                           	opt stack 0
   216                           
   217                           ; 2 bytes @ 0x1C
   218  00001D                     	ds	2
   219  00001F                     ___lwdiv@counter:
   220                           	opt stack 0
   221                           
   222                           ; 1 bytes @ 0x1E
   223  00001F                     	ds	1
   224  000020                     num_to_arr_num@ptr:
   225                           	opt stack 0
   226                           
   227                           ; 2 bytes @ 0x1F
   228  000020                     	ds	2
   229  000022                     show_count@a:
   230                           	opt stack 0
   231  000022                     num_to_arr_num@num:
   232                           	opt stack 0
   233                           
   234                           ; 2 bytes @ 0x21
   235  000022                     	ds	1
   236  000023                     show_count@dectoDy:
   237                           	opt stack 0
   238                           
   239                           ; 2 bytes @ 0x22
   240  000023                     	ds	1
   241  000024                     num_to_arr_num@len:
   242                           	opt stack 0
   243                           
   244                           ; 1 bytes @ 0x23
   245  000024                     	ds	1
   246  000025                     show_count@i:
   247                           	opt stack 0
   248  000025                     make_disp_time@ptr:
   249                           	opt stack 0
   250                           
   251                           ; 2 bytes @ 0x24
   252  000025                     	ds	2
   253  000027                     make_disp_time@tm_ptr:
   254                           	opt stack 0
   255                           
   256                           ; 2 bytes @ 0x26
   257  000027                     	ds	2
   258  000029                     ??_make_disp_time:
   259                           
   260                           ; 1 bytes @ 0x28
   261  000029                     	ds	2
   262  00002B                     _make_disp_time$499:
   263                           	opt stack 0
   264                           
   265                           ; 2 bytes @ 0x2A
   266  00002B                     	ds	2
   267  00002D                     make_disp_time@i:
   268                           	opt stack 0
   269                           
   270                           ; 1 bytes @ 0x2C
   271  00002D                     	ds	1
   272  00002E                     make_disp_time@j:
   273                           	opt stack 0
   274                           
   275                           ; 1 bytes @ 0x2D
   276  00002E                     	ds	1
   277  00002F                     make_disp_time@k:
   278                           	opt stack 0
   279                           
   280                           ; 1 bytes @ 0x2E
   281  00002F                     	ds	1
   282  000030                     main@Display:
   283                           	opt stack 0
   284                           
   285                           ; 8 bytes @ 0x2F
   286  000030                     	ds	8
   287                           tblptru	equ	0xFF8
   288                           postinc0	equ	0xFEE
   289                           wreg	equ	0xFE8
   290                           
   291 ;;
   292 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   293 ;;
   294 ;; *************** function _main *****************
   295 ;; Defined at:
   296 ;;		line 64 in file "main.c"
   297 ;; Parameters:    Size  Location     Type
   298 ;;		None
   299 ;; Auto vars:     Size  Location     Type
   300 ;;  Display         8   47[COMRAM] unsigned char [8]
   301 ;; Return value:  Size  Location     Type
   302 ;;                  1    wreg      void 
   303 ;; Registers used:
   304 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   305 ;; Tracked objects:
   306 ;;		On entry : 0/0
   307 ;;		On exit  : 0/0
   308 ;;		Unchanged: 0/0
   309 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   310 ;;      Params:         0       0       0       0       0       0       0       0       0
   311 ;;      Locals:         8       0       0       0       0       0       0       0       0
   312 ;;      Temps:          0       0       0       0       0       0       0       0       0
   313 ;;      Totals:         8       0       0       0       0       0       0       0       0
   314 ;;Total ram usage:        8 bytes
   315 ;; Hardware stack levels required when called:    6
   316 ;; This function calls:
   317 ;;		_make_disp_time
   318 ;;		_setup
   319 ;;		_show_count
   320 ;; This function is called by:
   321 ;;		Startup code after reset
   322 ;; This function uses a non-reentrant model
   323 ;;
   324                           
   325                           	psect	text0
   326  000D30                     __ptext0:
   327                           	opt stack 0
   328  000D30                     _main:
   329                           	opt stack 25
   330                           
   331                           ;main.c: 65: setup();
   332                           
   333                           ;incstack = 0
   334  000D30  EC7B  F006         	call	_setup	;wreg free
   335  000D34                     
   336                           ;main.c: 68: make_disp_time(Display,&clock);
   337  000D34  0E30               	movlw	low main@Display
   338  000D36  6E25               	movwf	make_disp_time@ptr,c
   339  000D38  0E00               	movlw	high main@Display
   340  000D3A  6E26               	movwf	make_disp_time@ptr+1,c
   341  000D3C  0E3C               	movlw	low _clock
   342  000D3E  6E27               	movwf	make_disp_time@tm_ptr,c
   343  000D40  0E00               	movlw	high _clock
   344  000D42  6E28               	movwf	make_disp_time@tm_ptr+1,c
   345  000D44  ECA4  F004         	call	_make_disp_time	;wreg free
   346                           
   347                           ;main.c: 69: show_count(Display);
   348  000D48  0E30               	movlw	low main@Display
   349  000D4A  6E1A               	movwf	show_count@ptr,c
   350  000D4C  0E00               	movlw	high main@Display
   351  000D4E  6E1B               	movwf	show_count@ptr+1,c
   352  000D50  EC39  F005         	call	_show_count	;wreg free
   353                           
   354                           ;main.c: 70: }
   355  000D54  D7EF               	goto	l85
   356  000D56                     __end_of_main:
   357                           	opt stack 0
   358                           tblptru	equ	0xFF8
   359                           postinc0	equ	0xFEE
   360                           wreg	equ	0xFE8
   361                           
   362 ;; *************** function _show_count *****************
   363 ;; Defined at:
   364 ;;		line 105 in file "main.c"
   365 ;; Parameters:    Size  Location     Type
   366 ;;  ptr             2   25[COMRAM] PTR unsigned char 
   367 ;;		 -> main@Display(8), 
   368 ;; Auto vars:     Size  Location     Type
   369 ;;  i               1   36[COMRAM] unsigned char 
   370 ;;  a               1   33[COMRAM] unsigned char 
   371 ;;  dectoDy         2   34[COMRAM] PTR const unsigned char 
   372 ;;		 -> STR_1(13), 
   373 ;; Return value:  Size  Location     Type
   374 ;;                  1    wreg      void 
   375 ;; Registers used:
   376 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   377 ;; Tracked objects:
   378 ;;		On entry : 0/0
   379 ;;		On exit  : 0/0
   380 ;;		Unchanged: 0/0
   381 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   382 ;;      Params:         2       0       0       0       0       0       0       0       0
   383 ;;      Locals:         4       0       0       0       0       0       0       0       0
   384 ;;      Temps:          6       0       0       0       0       0       0       0       0
   385 ;;      Totals:        12       0       0       0       0       0       0       0       0
   386 ;;Total ram usage:       12 bytes
   387 ;; Hardware stack levels used:    1
   388 ;; Hardware stack levels required when called:    4
   389 ;; This function calls:
   390 ;;		_wait_timer
   391 ;; This function is called by:
   392 ;;		_main
   393 ;; This function uses a non-reentrant model
   394 ;;
   395                           
   396                           	psect	text1
   397  000A72                     __ptext1:
   398                           	opt stack 0
   399  000A72                     _show_count:
   400                           	opt stack 26
   401                           
   402                           ;main.c: 106: const char * dectoDy = "\xC0\xF9\xA4\xB0\x99\x92\x82\xF8\x80\x98\xBF\xFF";
   403                           
   404                           ;incstack = 0
   405  000A72  0E01               	movlw	low STR_1
   406  000A74  6E23               	movwf	show_count@dectoDy,c
   407  000A76  0E08               	movlw	high STR_1
   408  000A78  6E24               	movwf	show_count@dectoDy+1,c
   409                           
   410                           ;main.c: 107: for(unsigned char i = 0,a=1;i<8;a<<=1,i++){
   411  000A7A  0E00               	movlw	0
   412  000A7C  6E25               	movwf	show_count@i,c
   413  000A7E  0E01               	movlw	1
   414  000A80  6E22               	movwf	show_count@a,c
   415  000A82  0E07               	movlw	7
   416  000A84  6425               	cpfsgt	show_count@i,c
   417  000A86  D001               	goto	l110
   418  000A88  0012               	return	
   419  000A8A                     l110:
   420                           
   421                           ;main.c: 108: if(*ptr>11){
   422  000A8A  C01A  FFD9         	movff	show_count@ptr,fsr2l
   423  000A8E  C01B  FFDA         	movff	show_count@ptr+1,fsr2h
   424  000A92  0E0B               	movlw	11
   425  000A94  64DF               	cpfsgt	indf2,c
   426  000A96  D020               	goto	l112
   427                           
   428                           ;main.c: 109: LATD = *(dectoDy + (*ptr++ - 12)) & 0x7F;
   429  000A98  0EF4               	movlw	244
   430  000A9A  6E1C               	movwf	??_show_count& (0+255),c
   431  000A9C  0EFF               	movlw	255
   432  000A9E  6E1D               	movwf	(??_show_count+1)& (0+255),c
   433  000AA0  C01A  FFD9         	movff	show_count@ptr,fsr2l
   434  000AA4  C01B  FFDA         	movff	show_count@ptr+1,fsr2h
   435  000AA8  50DF               	movf	indf2,w,c
   436  000AAA  6E1E               	movwf	(??_show_count+2)& (0+255),c
   437  000AAC  6A1F               	clrf	(??_show_count+3)& (0+255),c
   438  000AAE  501C               	movf	??_show_count,w,c
   439  000AB0  261E               	addwf	??_show_count+2,f,c
   440  000AB2  501D               	movf	??_show_count+1,w,c
   441  000AB4  221F               	addwfc	??_show_count+3,f,c
   442  000AB6  C023  F020         	movff	show_count@dectoDy,??_show_count+4
   443  000ABA  C024  F021         	movff	show_count@dectoDy+1,??_show_count+5
   444  000ABE  501E               	movf	??_show_count+2,w,c
   445  000AC0  2620               	addwf	??_show_count+4,f,c
   446  000AC2  501F               	movf	??_show_count+3,w,c
   447  000AC4  2221               	addwfc	??_show_count+5,f,c
   448  000AC6  C020  FFF6         	movff	??_show_count+4,tblptrl
   449  000ACA  C021  FFF7         	movff	??_show_count+5,tblptrh
   450  000ACE                     	if	0	;tblptru may be non-zero
   451  000ACE                     	endif
   452  000ACE                     	if	0	;tblptru may be non-zero
   453  000ACE                     	endif
   454  000ACE  0008               	tblrd		*
   455  000AD0  50F5               	movf	tablat,w,c
   456  000AD2  0B7F               	andlw	127
   457  000AD4  6E8C               	movwf	3980,c	;volatile
   458  000AD6  D017               	goto	l1171
   459  000AD8                     l112:
   460                           
   461                           ;main.c: 111: LATD = *(dectoDy + *ptr++) ;
   462  000AD8  C01A  FFD9         	movff	show_count@ptr,fsr2l
   463  000ADC  C01B  FFDA         	movff	show_count@ptr+1,fsr2h
   464  000AE0  50DF               	movf	indf2,w,c
   465  000AE2  6E1C               	movwf	??_show_count& (0+255),c
   466  000AE4  501C               	movf	??_show_count,w,c
   467  000AE6  0D01               	mullw	1
   468  000AE8  C023  F01D         	movff	show_count@dectoDy,??_show_count+1
   469  000AEC  C024  F01E         	movff	show_count@dectoDy+1,??_show_count+2
   470  000AF0  50F3               	movf	prodl,w,c
   471  000AF2  261D               	addwf	??_show_count+1,f,c
   472  000AF4  50F4               	movf	prodh,w,c
   473  000AF6  221E               	addwfc	??_show_count+2,f,c
   474  000AF8  C01D  FFF6         	movff	??_show_count+1,tblptrl
   475  000AFC  C01E  FFF7         	movff	??_show_count+2,tblptrh
   476  000B00                     	if	0	;tblptru may be non-zero
   477  000B00                     	endif
   478  000B00                     	if	0	;tblptru may be non-zero
   479  000B00                     	endif
   480  000B00  0008               	tblrd		*
   481  000B02  CFF5 FF8C          	movff	tablat,3980	;volatile
   482  000B06                     l1171:
   483  000B06  4A1A               	infsnz	show_count@ptr,f,c
   484  000B08  2A1B               	incf	show_count@ptr+1,f,c
   485                           
   486                           ;main.c: 112: LATB = ~a;
   487  000B0A  5022               	movf	show_count@a,w,c
   488  000B0C  0AFF               	xorlw	255
   489  000B0E  6E8A               	movwf	3978,c	;volatile
   490                           
   491                           ;main.c: 113: wait_timer(1);
   492  000B10  0E01               	movlw	1
   493  000B12  ECB8  F006         	call	_wait_timer
   494  000B16  90D8               	bcf	status,0,c
   495  000B18  3622               	rlcf	show_count@a,f,c
   496  000B1A  2A25               	incf	show_count@i,f,c
   497  000B1C  D7B2               	goto	L1
   498  000B1E                     __end_of_show_count:
   499                           	opt stack 0
   500                           tblptru	equ	0xFF8
   501                           tblptrh	equ	0xFF7
   502                           tblptrl	equ	0xFF6
   503                           tablat	equ	0xFF5
   504                           prodh	equ	0xFF4
   505                           prodl	equ	0xFF3
   506                           postinc0	equ	0xFEE
   507                           wreg	equ	0xFE8
   508                           indf2	equ	0xFDF
   509                           fsr2h	equ	0xFDA
   510                           fsr2l	equ	0xFD9
   511                           status	equ	0xFD8
   512                           
   513 ;; *************** function _wait_timer *****************
   514 ;; Defined at:
   515 ;;		line 99 in file "main.c"
   516 ;; Parameters:    Size  Location     Type
   517 ;;  n               1    wreg     unsigned char 
   518 ;; Auto vars:     Size  Location     Type
   519 ;;  n               1   24[COMRAM] unsigned char 
   520 ;; Return value:  Size  Location     Type
   521 ;;                  1    wreg      void 
   522 ;; Registers used:
   523 ;;		wreg, status,2, status,0
   524 ;; Tracked objects:
   525 ;;		On entry : 0/0
   526 ;;		On exit  : 0/0
   527 ;;		Unchanged: 0/0
   528 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   529 ;;      Params:         0       0       0       0       0       0       0       0       0
   530 ;;      Locals:         1       0       0       0       0       0       0       0       0
   531 ;;      Temps:          0       0       0       0       0       0       0       0       0
   532 ;;      Totals:         1       0       0       0       0       0       0       0       0
   533 ;;Total ram usage:        1 bytes
   534 ;; Hardware stack levels used:    1
   535 ;; Hardware stack levels required when called:    3
   536 ;; This function calls:
   537 ;;		Nothing
   538 ;; This function is called by:
   539 ;;		_show_count
   540 ;; This function uses a non-reentrant model
   541 ;;
   542                           
   543                           	psect	text2
   544  000D70                     __ptext2:
   545                           	opt stack 0
   546  000D70                     _wait_timer:
   547                           	opt stack 26
   548                           
   549                           ;incstack = 0
   550                           ;wait_timer@n stored from wreg
   551  000D70  6E19               	movwf	wait_timer@n,c
   552                           
   553                           ;main.c: 100: for(;n;n--){
   554  000D72  D005               	goto	l101
   555  000D74                     l104:
   556  000D74  F000               	nop	
   557  000D76                     l103:
   558  000D76  A040               	btfss	_flag_t/(0+8),_flag_t& (0+7),c
   559  000D78  D7FD               	goto	l104
   560                           
   561                           ;main.c: 102: flag_t = 0;
   562  000D7A  9040               	bcf	_flag_t/(0+8),_flag_t& (0+7),c
   563  000D7C  0619               	decf	wait_timer@n,f,c
   564  000D7E                     l101:
   565  000D7E  5019               	movf	wait_timer@n,w,c
   566  000D80  B4D8               	btfsc	status,2,c
   567  000D82  0012               	return	
   568  000D84  D7F8               	goto	l103
   569  000D86                     __end_of_wait_timer:
   570                           	opt stack 0
   571                           tblptru	equ	0xFF8
   572                           tblptrh	equ	0xFF7
   573                           tblptrl	equ	0xFF6
   574                           tablat	equ	0xFF5
   575                           prodh	equ	0xFF4
   576                           prodl	equ	0xFF3
   577                           postinc0	equ	0xFEE
   578                           wreg	equ	0xFE8
   579                           indf2	equ	0xFDF
   580                           fsr2h	equ	0xFDA
   581                           fsr2l	equ	0xFD9
   582                           status	equ	0xFD8
   583                           
   584 ;; *************** function _setup *****************
   585 ;; Defined at:
   586 ;;		line 72 in file "main.c"
   587 ;; Parameters:    Size  Location     Type
   588 ;;		None
   589 ;; Auto vars:     Size  Location     Type
   590 ;;		None
   591 ;; Return value:  Size  Location     Type
   592 ;;                  1    wreg      void 
   593 ;; Registers used:
   594 ;;		wreg, status,2
   595 ;; Tracked objects:
   596 ;;		On entry : 0/0
   597 ;;		On exit  : 0/0
   598 ;;		Unchanged: 0/0
   599 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   600 ;;      Params:         0       0       0       0       0       0       0       0       0
   601 ;;      Locals:         0       0       0       0       0       0       0       0       0
   602 ;;      Temps:          0       0       0       0       0       0       0       0       0
   603 ;;      Totals:         0       0       0       0       0       0       0       0       0
   604 ;;Total ram usage:        0 bytes
   605 ;; Hardware stack levels used:    1
   606 ;; Hardware stack levels required when called:    3
   607 ;; This function calls:
   608 ;;		Nothing
   609 ;; This function is called by:
   610 ;;		_main
   611 ;; This function uses a non-reentrant model
   612 ;;
   613                           
   614                           	psect	text3
   615  000CF6                     __ptext3:
   616                           	opt stack 0
   617  000CF6                     _setup:
   618                           	opt stack 27
   619                           
   620                           ;main.c: 73: INTCONbits.GIEH=0;
   621                           
   622                           ;incstack = 0
   623  000CF6  9EF2               	bcf	intcon,7,c	;volatile
   624                           
   625                           ;main.c: 74: ADCON1 = 0x0F;
   626  000CF8  0E0F               	movlw	15
   627  000CFA  6EC1               	movwf	4033,c	;volatile
   628                           
   629                           ;main.c: 75: CMCON = 0x07;
   630  000CFC  0E07               	movlw	7
   631  000CFE  6EB4               	movwf	4020,c	;volatile
   632                           
   633                           ;main.c: 76: TRISA = 0xFF;
   634  000D00  6892               	setf	3986,c	;volatile
   635                           
   636                           ;main.c: 77: TRISD = 0x00;
   637  000D02  0E00               	movlw	0
   638  000D04  6E95               	movwf	3989,c	;volatile
   639                           
   640                           ;main.c: 78: TRISB = 0x00;
   641  000D06  0E00               	movlw	0
   642  000D08  6E93               	movwf	3987,c	;volatile
   643                           
   644                           ;main.c: 79: LATA = LATB = 0xFF;
   645  000D0A  688A               	setf	3978,c	;volatile
   646  000D0C  6889               	setf	3977,c	;volatile
   647                           
   648                           ;main.c: 80: T0CON = 0b10001000;
   649  000D0E  0E88               	movlw	136
   650  000D10  6ED5               	movwf	4053,c	;volatile
   651                           
   652                           ;main.c: 81: INTCONbits.TMR0IF = 0;
   653  000D12  94F2               	bcf	intcon,2,c	;volatile
   654                           
   655                           ;main.c: 82: INTCONbits.TMR0IE = 1;
   656  000D14  8AF2               	bsf	intcon,5,c	;volatile
   657                           
   658                           ;main.c: 83: INTCON2bits.TMR0IP = 1;
   659  000D16  84F1               	bsf	intcon2,2,c	;volatile
   660                           
   661                           ;main.c: 84: T1CON = 0b00001011;
   662  000D18  0E0B               	movlw	11
   663  000D1A  6ECD               	movwf	4045,c	;volatile
   664                           
   665                           ;main.c: 85: PIR1bits.TMR1IF = 0;
   666  000D1C  909E               	bcf	3998,0,c	;volatile
   667                           
   668                           ;main.c: 86: PIE1bits.TMR1IE = 1;
   669  000D1E  809D               	bsf	3997,0,c	;volatile
   670                           
   671                           ;main.c: 87: IPR1bits.TMR1IP = 1;
   672  000D20  809F               	bsf	3999,0,c	;volatile
   673                           
   674                           ;main.c: 88: RCONbits.IPEN = 1;
   675  000D22  8ED0               	bsf	4048,7,c	;volatile
   676                           
   677                           ;main.c: 89: INTCONbits.GIEL = 0;
   678  000D24  9CF2               	bcf	intcon,6,c	;volatile
   679                           
   680                           ;main.c: 90: INTCONbits.GIEH = 1;
   681  000D26  8EF2               	bsf	intcon,7,c	;volatile
   682                           
   683                           ;main.c: 91: flag_t = 1;
   684  000D28  8040               	bsf	_flag_t/(0+8),_flag_t& (0+7),c
   685                           
   686                           ;main.c: 92: flagStatus = 0;
   687  000D2A  0E00               	movlw	0
   688  000D2C  6E3B               	movwf	_flagStatus,c
   689  000D2E  0012               	return		;funcret
   690  000D30                     __end_of_setup:
   691                           	opt stack 0
   692                           tblptru	equ	0xFF8
   693                           tblptrh	equ	0xFF7
   694                           tblptrl	equ	0xFF6
   695                           tablat	equ	0xFF5
   696                           prodh	equ	0xFF4
   697                           prodl	equ	0xFF3
   698                           intcon	equ	0xFF2
   699                           intcon2	equ	0xFF1
   700                           postinc0	equ	0xFEE
   701                           wreg	equ	0xFE8
   702                           indf2	equ	0xFDF
   703                           fsr2h	equ	0xFDA
   704                           fsr2l	equ	0xFD9
   705                           status	equ	0xFD8
   706                           
   707 ;; *************** function _make_disp_time *****************
   708 ;; Defined at:
   709 ;;		line 116 in file "main.c"
   710 ;; Parameters:    Size  Location     Type
   711 ;;  ptr             2   36[COMRAM] PTR unsigned char 
   712 ;;		 -> main@Display(8), 
   713 ;;  tm_ptr          2   38[COMRAM] PTR struct .
   714 ;;		 -> clock(4), 
   715 ;; Auto vars:     Size  Location     Type
   716 ;;  k               1   46[COMRAM] unsigned char 
   717 ;;  j               1   45[COMRAM] unsigned char 
   718 ;;  i               1   44[COMRAM] unsigned char 
   719 ;; Return value:  Size  Location     Type
   720 ;;                  1    wreg      void 
   721 ;; Registers used:
   722 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   723 ;; Tracked objects:
   724 ;;		On entry : 0/0
   725 ;;		On exit  : 0/0
   726 ;;		Unchanged: 0/0
   727 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   728 ;;      Params:         4       0       0       0       0       0       0       0       0
   729 ;;      Locals:         5       0       0       0       0       0       0       0       0
   730 ;;      Temps:          2       0       0       0       0       0       0       0       0
   731 ;;      Totals:        11       0       0       0       0       0       0       0       0
   732 ;;Total ram usage:       11 bytes
   733 ;; Hardware stack levels used:    1
   734 ;; Hardware stack levels required when called:    5
   735 ;; This function calls:
   736 ;;		_num_to_arr_num
   737 ;; This function is called by:
   738 ;;		_main
   739 ;; This function uses a non-reentrant model
   740 ;;
   741                           
   742                           	psect	text4
   743  000948                     __ptext4:
   744                           	opt stack 0
   745  000948                     _make_disp_time:
   746                           	opt stack 25
   747                           
   748                           ;main.c: 117: num_to_arr_num(ptr,tm_ptr->seg,2);
   749                           
   750                           ;incstack = 0
   751  000948  C025  F020         	movff	make_disp_time@ptr,num_to_arr_num@ptr
   752  00094C  C026  F021         	movff	make_disp_time@ptr+1,num_to_arr_num@ptr+1
   753  000950  C027  FFD9         	movff	make_disp_time@tm_ptr,fsr2l
   754  000954  C028  FFDA         	movff	make_disp_time@tm_ptr+1,fsr2h
   755  000958  50DF               	movf	indf2,w,c
   756  00095A  6E29               	movwf	??_make_disp_time& (0+255),c
   757  00095C  5029               	movf	??_make_disp_time,w,c
   758  00095E  6E22               	movwf	num_to_arr_num@num,c
   759  000960  6A23               	clrf	num_to_arr_num@num+1,c
   760  000962  0E02               	movlw	2
   761  000964  6E24               	movwf	num_to_arr_num@len,c
   762  000966  EC8F  F005         	call	_num_to_arr_num	;wreg free
   763                           
   764                           ;main.c: 118: num_to_arr_num(ptr+3,tm_ptr->min,2);
   765  00096A  0E03               	movlw	3
   766  00096C  2425               	addwf	make_disp_time@ptr,w,c
   767  00096E  6E20               	movwf	num_to_arr_num@ptr,c
   768  000970  0E00               	movlw	0
   769  000972  2026               	addwfc	make_disp_time@ptr+1,w,c
   770  000974  6E21               	movwf	num_to_arr_num@ptr+1,c
   771  000976  EE20 F001          	lfsr	2,1
   772  00097A  5027               	movf	make_disp_time@tm_ptr,w,c
   773  00097C  26D9               	addwf	fsr2l,f,c
   774  00097E  5028               	movf	make_disp_time@tm_ptr+1,w,c
   775  000980  22DA               	addwfc	fsr2h,f,c
   776  000982  50DF               	movf	indf2,w,c
   777  000984  6E29               	movwf	??_make_disp_time& (0+255),c
   778  000986  5029               	movf	??_make_disp_time,w,c
   779  000988  6E22               	movwf	num_to_arr_num@num,c
   780  00098A  6A23               	clrf	num_to_arr_num@num+1,c
   781  00098C  0E02               	movlw	2
   782  00098E  6E24               	movwf	num_to_arr_num@len,c
   783  000990  EC8F  F005         	call	_num_to_arr_num	;wreg free
   784                           
   785                           ;main.c: 119: num_to_arr_num(ptr+6,tm_ptr->hour,2);
   786  000994  0E06               	movlw	6
   787  000996  2425               	addwf	make_disp_time@ptr,w,c
   788  000998  6E20               	movwf	num_to_arr_num@ptr,c
   789  00099A  0E00               	movlw	0
   790  00099C  2026               	addwfc	make_disp_time@ptr+1,w,c
   791  00099E  6E21               	movwf	num_to_arr_num@ptr+1,c
   792  0009A0  EE20 F002          	lfsr	2,2
   793  0009A4  5027               	movf	make_disp_time@tm_ptr,w,c
   794  0009A6  26D9               	addwf	fsr2l,f,c
   795  0009A8  5028               	movf	make_disp_time@tm_ptr+1,w,c
   796  0009AA  22DA               	addwfc	fsr2h,f,c
   797  0009AC  50DF               	movf	indf2,w,c
   798  0009AE  6E29               	movwf	??_make_disp_time& (0+255),c
   799  0009B0  5029               	movf	??_make_disp_time,w,c
   800  0009B2  6E22               	movwf	num_to_arr_num@num,c
   801  0009B4  6A23               	clrf	num_to_arr_num@num+1,c
   802  0009B6  0E02               	movlw	2
   803  0009B8  6E24               	movwf	num_to_arr_num@len,c
   804  0009BA  EC8F  F005         	call	_num_to_arr_num	;wreg free
   805                           
   806                           ;main.c: 120: *(ptr + 2) = *(ptr + 5) = tm_ptr->blink? 10:11;
   807  0009BE  EE20 F003          	lfsr	2,3
   808  0009C2  5027               	movf	make_disp_time@tm_ptr,w,c
   809  0009C4  26D9               	addwf	fsr2l,f,c
   810  0009C6  5028               	movf	make_disp_time@tm_ptr+1,w,c
   811  0009C8  22DA               	addwfc	fsr2h,f,c
   812  0009CA  50DF               	movf	indf2,w,c
   813  0009CC  A4D8               	btfss	status,2,c
   814  0009CE  D004               	goto	l118
   815  0009D0  0E00               	movlw	0
   816  0009D2  6E2C               	movwf	_make_disp_time$499+1,c
   817  0009D4  0E0B               	movlw	11
   818  0009D6  D003               	goto	L2
   819  0009D8                     l118:
   820  0009D8  0E00               	movlw	0
   821  0009DA  6E2C               	movwf	_make_disp_time$499+1,c
   822  0009DC  0E0A               	movlw	10
   823  0009DE                     L2:
   824  0009DE  6E2B               	movwf	_make_disp_time$499,c
   825  0009E0  EE20 F005          	lfsr	2,5
   826  0009E4  5025               	movf	make_disp_time@ptr,w,c
   827  0009E6  26D9               	addwf	fsr2l,f,c
   828  0009E8  5026               	movf	make_disp_time@ptr+1,w,c
   829  0009EA  22DA               	addwfc	fsr2h,f,c
   830  0009EC  C02B  FFDF         	movff	_make_disp_time$499,indf2
   831  0009F0  EE10 F002          	lfsr	1,2
   832  0009F4  5025               	movf	make_disp_time@ptr,w,c
   833  0009F6  26E1               	addwf	fsr1l,f,c
   834  0009F8  5026               	movf	make_disp_time@ptr+1,w,c
   835  0009FA  22E2               	addwfc	fsr1h,f,c
   836  0009FC  CFDF FFE7          	movff	indf2,indf1
   837                           
   838                           ;main.c: 121: if(flagStatus && tm_ptr->blink)
   839  000A00  503B               	movf	_flagStatus,w,c
   840  000A02  B4D8               	btfsc	status,2,c
   841  000A04  0012               	return	
   842  000A06  EE20 F003          	lfsr	2,3
   843  000A0A  5027               	movf	make_disp_time@tm_ptr,w,c
   844  000A0C  26D9               	addwf	fsr2l,f,c
   845  000A0E  5028               	movf	make_disp_time@tm_ptr+1,w,c
   846  000A10  22DA               	addwfc	fsr2h,f,c
   847  000A12  50DF               	movf	indf2,w,c
   848  000A14  B4D8               	btfsc	status,2,c
   849  000A16  0012               	return	
   850                           
   851                           ;main.c: 122: for(char i = 0,j=1;j<=0x04;i+=3,j<<=1)
   852  000A18  0E00               	movlw	0
   853  000A1A  6E2D               	movwf	make_disp_time@i,c
   854  000A1C  0E01               	movlw	1
   855  000A1E  6E2E               	movwf	make_disp_time@j,c
   856  000A20                     l1135:
   857  000A20  0E04               	movlw	4
   858  000A22  642E               	cpfsgt	make_disp_time@j,c
   859  000A24  D001               	goto	l122
   860  000A26  0012               	return	
   861  000A28                     l122:
   862                           
   863                           ;main.c: 123: if(j == flagStatus)
   864  000A28  503B               	movf	_flagStatus,w,c
   865  000A2A  182E               	xorwf	make_disp_time@j,w,c
   866  000A2C  A4D8               	btfss	status,2,c
   867  000A2E  D01C               	goto	u620
   868                           
   869                           ;main.c: 124: for (char k = 0; k < 2; k++)
   870  000A30  0E00               	movlw	0
   871  000A32  6E2F               	movwf	make_disp_time@k,c
   872  000A34                     l1143:
   873  000A34  0E01               	movlw	1
   874  000A36  642F               	cpfsgt	make_disp_time@k,c
   875  000A38  D001               	goto	l125
   876  000A3A  D016               	goto	u620
   877  000A3C                     l125:
   878                           
   879                           ;main.c: 125: *(ptr + i + k) +=12;
   880  000A3C  502D               	movf	make_disp_time@i,w,c
   881  000A3E  0D01               	mullw	1
   882  000A40  C025  F029         	movff	make_disp_time@ptr,??_make_disp_time
   883  000A44  C026  F02A         	movff	make_disp_time@ptr+1,??_make_disp_time+1
   884  000A48  50F3               	movf	prodl,w,c
   885  000A4A  2629               	addwf	??_make_disp_time,f,c
   886  000A4C  50F4               	movf	prodh,w,c
   887  000A4E  222A               	addwfc	??_make_disp_time+1,f,c
   888  000A50  502F               	movf	make_disp_time@k,w,c
   889  000A52  0D01               	mullw	1
   890  000A54  50F3               	movf	prodl,w,c
   891  000A56  2429               	addwf	??_make_disp_time,w,c
   892  000A58  6ED9               	movwf	fsr2l,c
   893  000A5A  50F4               	movf	prodh,w,c
   894  000A5C  202A               	addwfc	??_make_disp_time+1,w,c
   895  000A5E  6EDA               	movwf	fsr2h,c
   896  000A60  0E0C               	movlw	12
   897  000A62  26DF               	addwf	indf2,f,c
   898  000A64  2A2F               	incf	make_disp_time@k,f,c
   899  000A66  D7E6               	goto	l1143
   900  000A68                     u620:
   901  000A68  0E03               	movlw	3
   902  000A6A  262D               	addwf	make_disp_time@i,f,c
   903  000A6C  90D8               	bcf	status,0,c
   904  000A6E  362E               	rlcf	make_disp_time@j,f,c
   905  000A70  D7D7               	goto	l1135
   906  000A72                     __end_of_make_disp_time:
   907                           	opt stack 0
   908                           tblptru	equ	0xFF8
   909                           tblptrh	equ	0xFF7
   910                           tblptrl	equ	0xFF6
   911                           tablat	equ	0xFF5
   912                           prodh	equ	0xFF4
   913                           prodl	equ	0xFF3
   914                           intcon	equ	0xFF2
   915                           intcon2	equ	0xFF1
   916                           postinc0	equ	0xFEE
   917                           wreg	equ	0xFE8
   918                           indf1	equ	0xFE7
   919                           fsr1h	equ	0xFE2
   920                           fsr1l	equ	0xFE1
   921                           indf2	equ	0xFDF
   922                           fsr2h	equ	0xFDA
   923                           fsr2l	equ	0xFD9
   924                           status	equ	0xFD8
   925                           
   926 ;; *************** function _num_to_arr_num *****************
   927 ;; Defined at:
   928 ;;		line 94 in file "main.c"
   929 ;; Parameters:    Size  Location     Type
   930 ;;  ptr             2   31[COMRAM] PTR unsigned char 
   931 ;;		 -> main@Display(8), 
   932 ;;  num             2   33[COMRAM] unsigned int 
   933 ;;  len             1   35[COMRAM] unsigned char 
   934 ;; Auto vars:     Size  Location     Type
   935 ;;		None
   936 ;; Return value:  Size  Location     Type
   937 ;;                  1    wreg      void 
   938 ;; Registers used:
   939 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   940 ;; Tracked objects:
   941 ;;		On entry : 0/0
   942 ;;		On exit  : 0/0
   943 ;;		Unchanged: 0/0
   944 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   945 ;;      Params:         5       0       0       0       0       0       0       0       0
   946 ;;      Locals:         0       0       0       0       0       0       0       0       0
   947 ;;      Temps:          0       0       0       0       0       0       0       0       0
   948 ;;      Totals:         5       0       0       0       0       0       0       0       0
   949 ;;Total ram usage:        5 bytes
   950 ;; Hardware stack levels used:    1
   951 ;; Hardware stack levels required when called:    4
   952 ;; This function calls:
   953 ;;		___lwdiv
   954 ;;		___lwmod
   955 ;; This function is called by:
   956 ;;		_make_disp_time
   957 ;; This function uses a non-reentrant model
   958 ;;
   959                           
   960                           	psect	text5
   961  000B1E                     __ptext5:
   962                           	opt stack 0
   963  000B1E                     _num_to_arr_num:
   964                           	opt stack 25
   965                           
   966                           ;main.c: 95: for(;len;*(ptr + --len)=0);
   967                           
   968                           ;incstack = 0
   969  000B1E  D00B               	goto	l93
   970  000B20  0624               	decf	num_to_arr_num@len,f,c
   971  000B22  5024               	movf	num_to_arr_num@len,w,c
   972  000B24  0D01               	mullw	1
   973  000B26  50F3               	movf	prodl,w,c
   974  000B28  2420               	addwf	num_to_arr_num@ptr,w,c
   975  000B2A  6ED9               	movwf	fsr2l,c
   976  000B2C  50F4               	movf	prodh,w,c
   977  000B2E  2021               	addwfc	num_to_arr_num@ptr+1,w,c
   978  000B30  6EDA               	movwf	fsr2h,c
   979  000B32  0E00               	movlw	0
   980  000B34  6EDF               	movwf	indf2,c
   981  000B36                     l93:
   982  000B36  5024               	movf	num_to_arr_num@len,w,c
   983  000B38  A4D8               	btfss	status,2,c
   984  000B3A  D7F2               	goto	l94
   985  000B3C                     u510:
   986                           
   987                           ;main.c: 96: for(;num>9;*ptr++ = num%10,num/=10);
   988  000B3C  5023               	movf	num_to_arr_num@num+1,w,c
   989  000B3E  E104               	bnz	l1103
   990  000B40  0E0A               	movlw	10
   991  000B42  5C22               	subwf	num_to_arr_num@num,w,c
   992  000B44  A0D8               	btfss	status,0,c
   993  000B46  D021               	goto	u530
   994  000B48                     l1103:
   995  000B48  C022  F019         	movff	num_to_arr_num@num,___lwmod@dividend
   996  000B4C  C023  F01A         	movff	num_to_arr_num@num+1,___lwmod@dividend+1
   997  000B50  0E00               	movlw	0
   998  000B52  6E1C               	movwf	___lwmod@divisor+1,c
   999  000B54  0E0A               	movlw	10
  1000  000B56  6E1B               	movwf	___lwmod@divisor,c
  1001  000B58  EC3B  F006         	call	___lwmod	;wreg free
  1002  000B5C  5019               	movf	?___lwmod,w,c
  1003  000B5E  C020  FFD9         	movff	num_to_arr_num@ptr,fsr2l
  1004  000B62  C021  FFDA         	movff	num_to_arr_num@ptr+1,fsr2h
  1005  000B66  6EDF               	movwf	indf2,c
  1006  000B68  4A20               	infsnz	num_to_arr_num@ptr,f,c
  1007  000B6A  2A21               	incf	num_to_arr_num@ptr+1,f,c
  1008  000B6C  C022  F019         	movff	num_to_arr_num@num,___lwdiv@dividend
  1009  000B70  C023  F01A         	movff	num_to_arr_num@num+1,___lwdiv@dividend+1
  1010  000B74  0E00               	movlw	0
  1011  000B76  6E1C               	movwf	___lwdiv@divisor+1,c
  1012  000B78  0E0A               	movlw	10
  1013  000B7A  6E1B               	movwf	___lwdiv@divisor,c
  1014  000B7C  EC12  F006         	call	___lwdiv	;wreg free
  1015  000B80  C019  F022         	movff	?___lwdiv,num_to_arr_num@num
  1016  000B84  C01A  F023         	movff	?___lwdiv+1,num_to_arr_num@num+1
  1017  000B88  D7D9               	goto	u510
  1018  000B8A                     u530:
  1019                           
  1020                           ;main.c: 97: *ptr = num%10;
  1021  000B8A  C022  F019         	movff	num_to_arr_num@num,___lwmod@dividend
  1022  000B8E  C023  F01A         	movff	num_to_arr_num@num+1,___lwmod@dividend+1
  1023  000B92  0E00               	movlw	0
  1024  000B94  6E1C               	movwf	___lwmod@divisor+1,c
  1025  000B96  0E0A               	movlw	10
  1026  000B98  6E1B               	movwf	___lwmod@divisor,c
  1027  000B9A  EC3B  F006         	call	___lwmod	;wreg free
  1028  000B9E  5019               	movf	?___lwmod,w,c
  1029  000BA0  C020  FFD9         	movff	num_to_arr_num@ptr,fsr2l
  1030  000BA4  C021  FFDA         	movff	num_to_arr_num@ptr+1,fsr2h
  1031  000BA8  6EDF               	movwf	indf2,c
  1032  000BAA  0012               	return		;funcret
  1033  000BAC                     __end_of_num_to_arr_num:
  1034                           	opt stack 0
  1035                           tblptru	equ	0xFF8
  1036                           tblptrh	equ	0xFF7
  1037                           tblptrl	equ	0xFF6
  1038                           tablat	equ	0xFF5
  1039                           prodh	equ	0xFF4
  1040                           prodl	equ	0xFF3
  1041                           intcon	equ	0xFF2
  1042                           intcon2	equ	0xFF1
  1043                           postinc0	equ	0xFEE
  1044                           wreg	equ	0xFE8
  1045                           indf1	equ	0xFE7
  1046                           fsr1h	equ	0xFE2
  1047                           fsr1l	equ	0xFE1
  1048                           indf2	equ	0xFDF
  1049                           fsr2h	equ	0xFDA
  1050                           fsr2l	equ	0xFD9
  1051                           status	equ	0xFD8
  1052                           
  1053 ;; *************** function ___lwmod *****************
  1054 ;; Defined at:
  1055 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
  1056 ;; Parameters:    Size  Location     Type
  1057 ;;  dividend        2   24[COMRAM] unsigned int 
  1058 ;;  divisor         2   26[COMRAM] unsigned int 
  1059 ;; Auto vars:     Size  Location     Type
  1060 ;;  counter         1   28[COMRAM] unsigned char 
  1061 ;; Return value:  Size  Location     Type
  1062 ;;                  2   24[COMRAM] unsigned int 
  1063 ;; Registers used:
  1064 ;;		wreg, status,2, status,0
  1065 ;; Tracked objects:
  1066 ;;		On entry : 0/0
  1067 ;;		On exit  : 0/0
  1068 ;;		Unchanged: 0/0
  1069 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1070 ;;      Params:         4       0       0       0       0       0       0       0       0
  1071 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1072 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1073 ;;      Totals:         5       0       0       0       0       0       0       0       0
  1074 ;;Total ram usage:        5 bytes
  1075 ;; Hardware stack levels used:    1
  1076 ;; Hardware stack levels required when called:    3
  1077 ;; This function calls:
  1078 ;;		Nothing
  1079 ;; This function is called by:
  1080 ;;		_num_to_arr_num
  1081 ;; This function uses a non-reentrant model
  1082 ;;
  1083                           
  1084                           	psect	text6
  1085  000C76                     __ptext6:
  1086                           	opt stack 0
  1087  000C76                     ___lwmod:
  1088                           	opt stack 25
  1089                           
  1090                           ;incstack = 0
  1091  000C76  501B               	movf	___lwmod@divisor,w,c
  1092  000C78  101C               	iorwf	___lwmod@divisor+1,w,c
  1093  000C7A  B4D8               	btfsc	status,2,c
  1094  000C7C  D018               	goto	l562
  1095  000C7E  0E01               	movlw	1
  1096  000C80  6E1D               	movwf	___lwmod@counter,c
  1097  000C82  D004               	goto	l557
  1098  000C84  90D8               	bcf	status,0,c
  1099  000C86  361B               	rlcf	___lwmod@divisor,f,c
  1100  000C88  361C               	rlcf	___lwmod@divisor+1,f,c
  1101  000C8A  2A1D               	incf	___lwmod@counter,f,c
  1102  000C8C                     l557:
  1103  000C8C  AE1C               	btfss	___lwmod@divisor+1,7,c
  1104  000C8E  D7FA               	goto	l558
  1105  000C90                     u460:
  1106  000C90  501B               	movf	___lwmod@divisor,w,c
  1107  000C92  5C19               	subwf	___lwmod@dividend,w,c
  1108  000C94  501C               	movf	___lwmod@divisor+1,w,c
  1109  000C96  581A               	subwfb	___lwmod@dividend+1,w,c
  1110  000C98  A0D8               	btfss	status,0,c
  1111  000C9A  D004               	goto	l561
  1112  000C9C  501B               	movf	___lwmod@divisor,w,c
  1113  000C9E  5E19               	subwf	___lwmod@dividend,f,c
  1114  000CA0  501C               	movf	___lwmod@divisor+1,w,c
  1115  000CA2  5A1A               	subwfb	___lwmod@dividend+1,f,c
  1116  000CA4                     l561:
  1117  000CA4  90D8               	bcf	status,0,c
  1118  000CA6  321C               	rrcf	___lwmod@divisor+1,f,c
  1119  000CA8  321B               	rrcf	___lwmod@divisor,f,c
  1120  000CAA  2E1D               	decfsz	___lwmod@counter,f,c
  1121  000CAC  D7F1               	goto	u460
  1122  000CAE                     l562:
  1123  000CAE  C019  F019         	movff	___lwmod@dividend,?___lwmod
  1124  000CB2  C01A  F01A         	movff	___lwmod@dividend+1,?___lwmod+1
  1125  000CB6  0012               	return		;funcret
  1126  000CB8                     __end_of___lwmod:
  1127                           	opt stack 0
  1128                           tblptru	equ	0xFF8
  1129                           tblptrh	equ	0xFF7
  1130                           tblptrl	equ	0xFF6
  1131                           tablat	equ	0xFF5
  1132                           prodh	equ	0xFF4
  1133                           prodl	equ	0xFF3
  1134                           intcon	equ	0xFF2
  1135                           intcon2	equ	0xFF1
  1136                           postinc0	equ	0xFEE
  1137                           wreg	equ	0xFE8
  1138                           indf1	equ	0xFE7
  1139                           fsr1h	equ	0xFE2
  1140                           fsr1l	equ	0xFE1
  1141                           indf2	equ	0xFDF
  1142                           fsr2h	equ	0xFDA
  1143                           fsr2l	equ	0xFD9
  1144                           status	equ	0xFD8
  1145                           
  1146 ;; *************** function ___lwdiv *****************
  1147 ;; Defined at:
  1148 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
  1149 ;; Parameters:    Size  Location     Type
  1150 ;;  dividend        2   24[COMRAM] unsigned int 
  1151 ;;  divisor         2   26[COMRAM] unsigned int 
  1152 ;; Auto vars:     Size  Location     Type
  1153 ;;  quotient        2   28[COMRAM] unsigned int 
  1154 ;;  counter         1   30[COMRAM] unsigned char 
  1155 ;; Return value:  Size  Location     Type
  1156 ;;                  2   24[COMRAM] unsigned int 
  1157 ;; Registers used:
  1158 ;;		wreg, status,2, status,0
  1159 ;; Tracked objects:
  1160 ;;		On entry : 0/0
  1161 ;;		On exit  : 0/0
  1162 ;;		Unchanged: 0/0
  1163 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1164 ;;      Params:         4       0       0       0       0       0       0       0       0
  1165 ;;      Locals:         3       0       0       0       0       0       0       0       0
  1166 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1167 ;;      Totals:         7       0       0       0       0       0       0       0       0
  1168 ;;Total ram usage:        7 bytes
  1169 ;; Hardware stack levels used:    1
  1170 ;; Hardware stack levels required when called:    3
  1171 ;; This function calls:
  1172 ;;		Nothing
  1173 ;; This function is called by:
  1174 ;;		_num_to_arr_num
  1175 ;; This function uses a non-reentrant model
  1176 ;;
  1177                           
  1178                           	psect	text7
  1179  000C24                     __ptext7:
  1180                           	opt stack 0
  1181  000C24                     ___lwdiv:
  1182                           	opt stack 25
  1183                           
  1184                           ;incstack = 0
  1185  000C24  0E00               	movlw	0
  1186  000C26  6E1E               	movwf	___lwdiv@quotient+1,c
  1187  000C28  0E00               	movlw	0
  1188  000C2A  6E1D               	movwf	___lwdiv@quotient,c
  1189  000C2C  501B               	movf	___lwdiv@divisor,w,c
  1190  000C2E  101C               	iorwf	___lwdiv@divisor+1,w,c
  1191  000C30  B4D8               	btfsc	status,2,c
  1192  000C32  D01C               	goto	l552
  1193  000C34  0E01               	movlw	1
  1194  000C36  6E1F               	movwf	___lwdiv@counter,c
  1195  000C38  D004               	goto	l547
  1196  000C3A  90D8               	bcf	status,0,c
  1197  000C3C  361B               	rlcf	___lwdiv@divisor,f,c
  1198  000C3E  361C               	rlcf	___lwdiv@divisor+1,f,c
  1199  000C40  2A1F               	incf	___lwdiv@counter,f,c
  1200  000C42                     l547:
  1201  000C42  AE1C               	btfss	___lwdiv@divisor+1,7,c
  1202  000C44  D7FA               	goto	l548
  1203  000C46                     u430:
  1204  000C46  90D8               	bcf	status,0,c
  1205  000C48  361D               	rlcf	___lwdiv@quotient,f,c
  1206  000C4A  361E               	rlcf	___lwdiv@quotient+1,f,c
  1207  000C4C  501B               	movf	___lwdiv@divisor,w,c
  1208  000C4E  5C19               	subwf	___lwdiv@dividend,w,c
  1209  000C50  501C               	movf	___lwdiv@divisor+1,w,c
  1210  000C52  581A               	subwfb	___lwdiv@dividend+1,w,c
  1211  000C54  A0D8               	btfss	status,0,c
  1212  000C56  D005               	goto	l551
  1213  000C58  501B               	movf	___lwdiv@divisor,w,c
  1214  000C5A  5E19               	subwf	___lwdiv@dividend,f,c
  1215  000C5C  501C               	movf	___lwdiv@divisor+1,w,c
  1216  000C5E  5A1A               	subwfb	___lwdiv@dividend+1,f,c
  1217  000C60  801D               	bsf	___lwdiv@quotient,0,c
  1218  000C62                     l551:
  1219  000C62  90D8               	bcf	status,0,c
  1220  000C64  321C               	rrcf	___lwdiv@divisor+1,f,c
  1221  000C66  321B               	rrcf	___lwdiv@divisor,f,c
  1222  000C68  2E1F               	decfsz	___lwdiv@counter,f,c
  1223  000C6A  D7ED               	goto	u430
  1224  000C6C                     l552:
  1225  000C6C  C01D  F019         	movff	___lwdiv@quotient,?___lwdiv
  1226  000C70  C01E  F01A         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1227  000C74  0012               	return		;funcret
  1228  000C76                     __end_of___lwdiv:
  1229                           	opt stack 0
  1230                           tblptru	equ	0xFF8
  1231                           tblptrh	equ	0xFF7
  1232                           tblptrl	equ	0xFF6
  1233                           tablat	equ	0xFF5
  1234                           prodh	equ	0xFF4
  1235                           prodl	equ	0xFF3
  1236                           intcon	equ	0xFF2
  1237                           intcon2	equ	0xFF1
  1238                           postinc0	equ	0xFEE
  1239                           wreg	equ	0xFE8
  1240                           indf1	equ	0xFE7
  1241                           fsr1h	equ	0xFE2
  1242                           fsr1l	equ	0xFE1
  1243                           indf2	equ	0xFDF
  1244                           fsr2h	equ	0xFDA
  1245                           fsr2l	equ	0xFD9
  1246                           status	equ	0xFD8
  1247                           
  1248 ;; *************** function _ISR *****************
  1249 ;; Defined at:
  1250 ;;		line 28 in file "main.c"
  1251 ;; Parameters:    Size  Location     Type
  1252 ;;		None
  1253 ;; Auto vars:     Size  Location     Type
  1254 ;;		None
  1255 ;; Return value:  Size  Location     Type
  1256 ;;                  1    wreg      void 
  1257 ;; Registers used:
  1258 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1259 ;; Tracked objects:
  1260 ;;		On entry : 0/0
  1261 ;;		On exit  : 0/0
  1262 ;;		Unchanged: 0/0
  1263 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1264 ;;      Params:         0       0       0       0       0       0       0       0       0
  1265 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1266 ;;      Temps:         18       0       0       0       0       0       0       0       0
  1267 ;;      Totals:        18       0       0       0       0       0       0       0       0
  1268 ;;Total ram usage:       18 bytes
  1269 ;; Hardware stack levels used:    1
  1270 ;; Hardware stack levels required when called:    2
  1271 ;; This function calls:
  1272 ;;		_pp_time
  1273 ;;		_pp_tm
  1274 ;; This function is called by:
  1275 ;;		Interrupt level 2
  1276 ;; This function uses a non-reentrant model
  1277 ;;
  1278                           
  1279                           	psect	intcode
  1280  000008                     __pintcode:
  1281                           	opt stack 0
  1282  000008                     _ISR:
  1283                           	opt stack 25
  1284                           
  1285                           ;incstack = 0
  1286  000008  8241               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  1287  00000A  ED08  F004         	call	int_func,f	;refresh shadow registers
  1288                           tblptru	equ	0xFF8
  1289                           tblptrh	equ	0xFF7
  1290                           tblptrl	equ	0xFF6
  1291                           tablat	equ	0xFF5
  1292                           prodh	equ	0xFF4
  1293                           prodl	equ	0xFF3
  1294                           intcon	equ	0xFF2
  1295                           intcon2	equ	0xFF1
  1296                           postinc0	equ	0xFEE
  1297                           wreg	equ	0xFE8
  1298                           indf1	equ	0xFE7
  1299                           fsr1h	equ	0xFE2
  1300                           fsr1l	equ	0xFE1
  1301                           indf2	equ	0xFDF
  1302                           fsr2h	equ	0xFDA
  1303                           fsr2l	equ	0xFD9
  1304                           status	equ	0xFD8
  1305                           
  1306                           	psect	intcode_body
  1307  000810                     __pintcode_body:
  1308                           	opt stack 25
  1309  000810                     int_func:
  1310                           	opt stack 25
  1311  000810  0006               	pop		; remove dummy address from shadow register refresh
  1312  000812  CFFA F007          	movff	pclath,??_ISR
  1313  000816  CFFB F008          	movff	pclatu,??_ISR+1
  1314  00081A  CFE9 F009          	movff	fsr0l,??_ISR+2
  1315  00081E  CFEA F00A          	movff	fsr0h,??_ISR+3
  1316  000822  CFE1 F00B          	movff	fsr1l,??_ISR+4
  1317  000826  CFE2 F00C          	movff	fsr1h,??_ISR+5
  1318  00082A  CFD9 F00D          	movff	fsr2l,??_ISR+6
  1319  00082E  CFDA F00E          	movff	fsr2h,??_ISR+7
  1320  000832  CFF3 F00F          	movff	prodl,??_ISR+8
  1321  000836  CFF4 F010          	movff	prodh,??_ISR+9
  1322  00083A  CFF6 F011          	movff	tblptrl,??_ISR+10
  1323  00083E  CFF7 F012          	movff	tblptrh,??_ISR+11
  1324  000842  CFF8 F013          	movff	tblptru,??_ISR+12
  1325  000846  CFF5 F014          	movff	tablat,??_ISR+13
  1326  00084A  C041  F015         	movff	btemp,??_ISR+14
  1327  00084E  C042  F016         	movff	btemp+1,??_ISR+15
  1328  000852  C043  F017         	movff	btemp+2,??_ISR+16
  1329  000856  C044  F018         	movff	btemp+3,??_ISR+17
  1330                           
  1331                           ;main.c: 29: if(PIR1bits.TMR1IF){
  1332  00085A  A09E               	btfss	3998,0,c	;volatile
  1333  00085C  D00B               	goto	i2l68
  1334                           
  1335                           ;main.c: 30: TMR1H |= 0x80;
  1336  00085E  8ECF               	bsf	4047,7,c	;volatile
  1337                           
  1338                           ;main.c: 31: PIR1bits.TMR1IF = 0;
  1339  000860  909E               	bcf	3998,0,c	;volatile
  1340                           
  1341                           ;main.c: 32: if(!flagStatus)
  1342  000862  503B               	movf	_flagStatus,w,c
  1343  000864  A4D8               	btfss	status,2,c
  1344  000866  D006               	goto	i2l68
  1345                           
  1346                           ;main.c: 33: pp_time(&clock);
  1347  000868  0E3C               	movlw	low _clock
  1348  00086A  6E05               	movwf	pp_time@tm_ptr,c
  1349  00086C  0E00               	movlw	high _clock
  1350  00086E  6E06               	movwf	pp_time@tm_ptr+1,c
  1351  000870  EC5C  F006         	call	_pp_time	;wreg free
  1352  000874                     i2l68:
  1353                           
  1354                           ;main.c: 34: }
  1355                           ;main.c: 35: if(INTCONbits.TMR0IF){
  1356  000874  A4F2               	btfss	intcon,2,c	;volatile
  1357  000876  D01A               	goto	i2l70
  1358                           
  1359                           ;main.c: 36: TMR0L = 0x78;
  1360  000878  0E78               	movlw	120
  1361  00087A  6ED6               	movwf	4054,c	;volatile
  1362                           
  1363                           ;main.c: 37: TMR0H = 0xEC;
  1364  00087C  0EEC               	movlw	236
  1365  00087E  6ED7               	movwf	4055,c	;volatile
  1366                           
  1367                           ;main.c: 38: INTCONbits.TMR0IF = 0;
  1368  000880  94F2               	bcf	intcon,2,c	;volatile
  1369                           
  1370                           ;main.c: 39: flag_t = 1;
  1371  000882  8040               	bsf	_flag_t/(0+8),_flag_t& (0+7),c
  1372                           
  1373                           ;main.c: 40: ++count_rbnd;
  1374  000884  2A3A               	incf	_count_rbnd,f,c
  1375                           
  1376                           ;main.c: 41: if(++count>499){
  1377  000886  4A38               	infsnz	_count,f,c
  1378  000888  2A39               	incf	_count+1,f,c
  1379  00088A  0EF4               	movlw	244
  1380  00088C  5C38               	subwf	_count,w,c
  1381  00088E  0E01               	movlw	1
  1382  000890  5839               	subwfb	_count+1,w,c
  1383  000892  A0D8               	btfss	status,0,c
  1384  000894  D00B               	goto	i2l70
  1385                           
  1386                           ;main.c: 42: count = 0;
  1387  000896  0E00               	movlw	0
  1388  000898  6E39               	movwf	_count+1,c
  1389  00089A  0E00               	movlw	0
  1390  00089C  6E38               	movwf	_count,c
  1391                           
  1392                           ;main.c: 43: clock.blink = !clock.blink;
  1393  00089E  503F               	movf	_clock+3,w,c
  1394  0008A0  A4D8               	btfss	status,2,c
  1395  0008A2  D002               	goto	i2u71_40
  1396  0008A4  0E01               	movlw	1
  1397  0008A6  D001               	goto	i2u72_40
  1398  0008A8                     i2u71_40:
  1399  0008A8  0E00               	movlw	0
  1400  0008AA                     i2u72_40:
  1401  0008AA  6E3F               	movwf	_clock+3,c
  1402  0008AC                     i2l70:
  1403                           
  1404                           ;main.c: 44: }
  1405                           ;main.c: 45: }
  1406                           ;main.c: 46: if(!PORTAbits.RA1 && count_rbnd>100){
  1407  0008AC  B280               	btfsc	3968,1,c	;volatile
  1408  0008AE  D015               	goto	i2l71
  1409  0008B0  0E64               	movlw	100
  1410  0008B2  643A               	cpfsgt	_count_rbnd,c
  1411  0008B4  D012               	goto	i2l71
  1412                           
  1413                           ;main.c: 47: count_rbnd = 0;
  1414  0008B6  0E00               	movlw	0
  1415  0008B8  6E3A               	movwf	_count_rbnd,c
  1416  0008BA  A280               	btfss	3968,1,c	;volatile
  1417  0008BC  D7FE               	goto	i2l73
  1418                           
  1419                           ;main.c: 49: if(!flagStatus){
  1420  0008BE  503B               	movf	_flagStatus,w,c
  1421  0008C0  A4D8               	btfss	status,2,c
  1422  0008C2  D003               	goto	i2l75
  1423                           
  1424                           ;main.c: 50: PIE1bits.TMR1IE = 0;
  1425  0008C4  909D               	bcf	3997,0,c	;volatile
  1426                           
  1427                           ;main.c: 51: flagStatus = 0x01;
  1428  0008C6  0E01               	movlw	1
  1429  0008C8  D006               	goto	L3
  1430  0008CA                     i2l75:
  1431                           
  1432                           ;main.c: 53: flagStatus <<= 1;
  1433  0008CA  90D8               	bcf	status,0,c
  1434  0008CC  363B               	rlcf	_flagStatus,f,c
  1435                           
  1436                           ;main.c: 54: if(flagStatus & 0x08){
  1437  0008CE  A63B               	btfss	_flagStatus,3,c
  1438  0008D0  D015               	goto	i2l79
  1439                           
  1440                           ;main.c: 55: PIE1bits.TMR1IE = 1;
  1441  0008D2  809D               	bsf	3997,0,c	;volatile
  1442                           
  1443                           ;main.c: 56: flagStatus = 0;
  1444  0008D4  0E00               	movlw	0
  1445  0008D6                     L3:
  1446  0008D6  6E3B               	movwf	_flagStatus,c
  1447                           
  1448                           ;main.c: 57: }
  1449                           ;main.c: 58: }
  1450                           ;main.c: 59: }else if(flagStatus && !PORTAbits.RA5 && count_rbnd>100){
  1451  0008D8  D011               	goto	i2l79
  1452  0008DA                     i2l71:
  1453  0008DA  503B               	movf	_flagStatus,w,c
  1454  0008DC  A4D8               	btfss	status,2,c
  1455  0008DE  BA80               	btfsc	3968,5,c	;volatile
  1456  0008E0  D00D               	goto	i2l79
  1457  0008E2  0E64               	movlw	100
  1458  0008E4  643A               	cpfsgt	_count_rbnd,c
  1459  0008E6  D00A               	goto	i2l79
  1460                           
  1461                           ;main.c: 60: count_rbnd = 0;
  1462  0008E8  0E00               	movlw	0
  1463  0008EA  6E3A               	movwf	_count_rbnd,c
  1464                           
  1465                           ;main.c: 61: pp_tm(&clock,flagStatus);
  1466  0008EC  0E3C               	movlw	low _clock
  1467  0008EE  6E01               	movwf	pp_tm@tm_ptr,c
  1468  0008F0  0E00               	movlw	high _clock
  1469  0008F2  6E02               	movwf	pp_tm@tm_ptr+1,c
  1470  0008F4  C03B  F003         	movff	_flagStatus,pp_tm@type
  1471  0008F8  ECD6  F005         	call	_pp_tm	;wreg free
  1472  0008FC                     i2l79:
  1473  0008FC  C018  F044         	movff	??_ISR+17,btemp+3
  1474  000900  C017  F043         	movff	??_ISR+16,btemp+2
  1475  000904  C016  F042         	movff	??_ISR+15,btemp+1
  1476  000908  C015  F041         	movff	??_ISR+14,btemp
  1477  00090C  C014  FFF5         	movff	??_ISR+13,tablat
  1478  000910  C013  FFF8         	movff	??_ISR+12,tblptru
  1479  000914  C012  FFF7         	movff	??_ISR+11,tblptrh
  1480  000918  C011  FFF6         	movff	??_ISR+10,tblptrl
  1481  00091C  C010  FFF4         	movff	??_ISR+9,prodh
  1482  000920  C00F  FFF3         	movff	??_ISR+8,prodl
  1483  000924  C00E  FFDA         	movff	??_ISR+7,fsr2h
  1484  000928  C00D  FFD9         	movff	??_ISR+6,fsr2l
  1485  00092C  C00C  FFE2         	movff	??_ISR+5,fsr1h
  1486  000930  C00B  FFE1         	movff	??_ISR+4,fsr1l
  1487  000934  C00A  FFEA         	movff	??_ISR+3,fsr0h
  1488  000938  C009  FFE9         	movff	??_ISR+2,fsr0l
  1489  00093C  C008  FFFB         	movff	??_ISR+1,pclatu
  1490  000940  C007  FFFA         	movff	??_ISR,pclath
  1491  000944  9241               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  1492  000946  0011               	retfie		f
  1493  000948                     __end_of_ISR:
  1494                           	opt stack 0
  1495                           pclatu	equ	0xFFB
  1496                           pclath	equ	0xFFA
  1497                           tblptru	equ	0xFF8
  1498                           tblptrh	equ	0xFF7
  1499                           tblptrl	equ	0xFF6
  1500                           tablat	equ	0xFF5
  1501                           prodh	equ	0xFF4
  1502                           prodl	equ	0xFF3
  1503                           intcon	equ	0xFF2
  1504                           intcon2	equ	0xFF1
  1505                           postinc0	equ	0xFEE
  1506                           fsr0h	equ	0xFEA
  1507                           fsr0l	equ	0xFE9
  1508                           wreg	equ	0xFE8
  1509                           indf1	equ	0xFE7
  1510                           fsr1h	equ	0xFE2
  1511                           fsr1l	equ	0xFE1
  1512                           indf2	equ	0xFDF
  1513                           fsr2h	equ	0xFDA
  1514                           fsr2l	equ	0xFD9
  1515                           status	equ	0xFD8
  1516                           
  1517 ;; *************** function _pp_time *****************
  1518 ;; Defined at:
  1519 ;;		line 127 in file "main.c"
  1520 ;; Parameters:    Size  Location     Type
  1521 ;;  tm_ptr          2    4[COMRAM] PTR struct .
  1522 ;;		 -> clock(4), 
  1523 ;; Auto vars:     Size  Location     Type
  1524 ;;		None
  1525 ;; Return value:  Size  Location     Type
  1526 ;;                  1    wreg      void 
  1527 ;; Registers used:
  1528 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1529 ;; Tracked objects:
  1530 ;;		On entry : 0/0
  1531 ;;		On exit  : 0/0
  1532 ;;		Unchanged: 0/0
  1533 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1534 ;;      Params:         2       0       0       0       0       0       0       0       0
  1535 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1536 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1537 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1538 ;;Total ram usage:        2 bytes
  1539 ;; Hardware stack levels used:    1
  1540 ;; Hardware stack levels required when called:    1
  1541 ;; This function calls:
  1542 ;;		_pp_tm
  1543 ;; This function is called by:
  1544 ;;		_ISR
  1545 ;; This function uses a non-reentrant model
  1546 ;;
  1547                           
  1548                           	psect	text9
  1549  000CB8                     __ptext9:
  1550                           	opt stack 0
  1551  000CB8                     _pp_time:
  1552                           	opt stack 25
  1553                           
  1554                           ;main.c: 128: if(pp_tm(tm_ptr,1))
  1555                           
  1556                           ;incstack = 0
  1557  000CB8  C005  F001         	movff	pp_time@tm_ptr,pp_tm@tm_ptr
  1558  000CBC  C006  F002         	movff	pp_time@tm_ptr+1,pp_tm@tm_ptr+1
  1559  000CC0  0E01               	movlw	1
  1560  000CC2  6E03               	movwf	pp_tm@type,c
  1561  000CC4  ECD6  F005         	call	_pp_tm	;wreg free
  1562  000CC8  0900               	iorlw	0
  1563  000CCA  B4D8               	btfsc	status,2,c
  1564  000CCC  0012               	return	
  1565                           
  1566                           ;main.c: 129: if(pp_tm(tm_ptr,2))
  1567  000CCE  C005  F001         	movff	pp_time@tm_ptr,pp_tm@tm_ptr
  1568  000CD2  C006  F002         	movff	pp_time@tm_ptr+1,pp_tm@tm_ptr+1
  1569  000CD6  0E02               	movlw	2
  1570  000CD8  6E03               	movwf	pp_tm@type,c
  1571  000CDA  ECD6  F005         	call	_pp_tm	;wreg free
  1572  000CDE  0900               	iorlw	0
  1573  000CE0  B4D8               	btfsc	status,2,c
  1574  000CE2  0012               	return	
  1575                           
  1576                           ;main.c: 130: pp_tm(tm_ptr,4);
  1577  000CE4  C005  F001         	movff	pp_time@tm_ptr,pp_tm@tm_ptr
  1578  000CE8  C006  F002         	movff	pp_time@tm_ptr+1,pp_tm@tm_ptr+1
  1579  000CEC  0E04               	movlw	4
  1580  000CEE  6E03               	movwf	pp_tm@type,c
  1581  000CF0  ECD6  F005         	call	_pp_tm	;wreg free
  1582  000CF4  0012               	return	
  1583  000CF6                     __end_of_pp_time:
  1584                           	opt stack 0
  1585                           pclatu	equ	0xFFB
  1586                           pclath	equ	0xFFA
  1587                           tblptru	equ	0xFF8
  1588                           tblptrh	equ	0xFF7
  1589                           tblptrl	equ	0xFF6
  1590                           tablat	equ	0xFF5
  1591                           prodh	equ	0xFF4
  1592                           prodl	equ	0xFF3
  1593                           intcon	equ	0xFF2
  1594                           intcon2	equ	0xFF1
  1595                           postinc0	equ	0xFEE
  1596                           fsr0h	equ	0xFEA
  1597                           fsr0l	equ	0xFE9
  1598                           wreg	equ	0xFE8
  1599                           indf1	equ	0xFE7
  1600                           fsr1h	equ	0xFE2
  1601                           fsr1l	equ	0xFE1
  1602                           indf2	equ	0xFDF
  1603                           fsr2h	equ	0xFDA
  1604                           fsr2l	equ	0xFD9
  1605                           status	equ	0xFD8
  1606                           
  1607 ;; *************** function _pp_tm *****************
  1608 ;; Defined at:
  1609 ;;		line 132 in file "main.c"
  1610 ;; Parameters:    Size  Location     Type
  1611 ;;  tm_ptr          2    0[COMRAM] PTR struct .
  1612 ;;		 -> clock(4), 
  1613 ;;  type            1    2[COMRAM] unsigned char 
  1614 ;; Auto vars:     Size  Location     Type
  1615 ;;		None
  1616 ;; Return value:  Size  Location     Type
  1617 ;;                  1    wreg      unsigned char 
  1618 ;; Registers used:
  1619 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1620 ;; Tracked objects:
  1621 ;;		On entry : 0/0
  1622 ;;		On exit  : 0/0
  1623 ;;		Unchanged: 0/0
  1624 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1625 ;;      Params:         3       0       0       0       0       0       0       0       0
  1626 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1627 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1628 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1629 ;;Total ram usage:        4 bytes
  1630 ;; Hardware stack levels used:    1
  1631 ;; This function calls:
  1632 ;;		Nothing
  1633 ;; This function is called by:
  1634 ;;		_ISR
  1635 ;;		_pp_time
  1636 ;; This function uses a non-reentrant model
  1637 ;;
  1638                           
  1639                           	psect	text10
  1640  000BAC                     __ptext10:
  1641                           	opt stack 0
  1642  000BAC                     _pp_tm:
  1643                           	opt stack 26
  1644                           
  1645                           ;main.c: 133: switch (type) {
  1646                           
  1647                           ;incstack = 0
  1648  000BAC  D02F               	goto	i2l135
  1649  000BAE                     
  1650                           ;main.c: 135: if(++tm_ptr->seg>59){
  1651  000BAE  C001  FFD9         	movff	pp_tm@tm_ptr,fsr2l
  1652  000BB2  C002  FFDA         	movff	pp_tm@tm_ptr+1,fsr2h
  1653  000BB6  2ADF               	incf	indf2,f,c
  1654  000BB8  0E3B               	movlw	59
  1655  000BBA  64DF               	cpfsgt	indf2,c
  1656  000BBC  D031               	goto	i2l139
  1657                           
  1658                           ;main.c: 136: tm_ptr->seg = 0;
  1659  000BBE  C001  FFD9         	movff	pp_tm@tm_ptr,fsr2l
  1660  000BC2  C002  FFDA         	movff	pp_tm@tm_ptr+1,fsr2h
  1661  000BC6                     L4:
  1662  000BC6  0E00               	movlw	0
  1663  000BC8  6EDF               	movwf	indf2,c
  1664  000BCA  D01E               	goto	i2l1081
  1665  000BCC                     
  1666                           ;main.c: 140: if(++tm_ptr->min>59){
  1667  000BCC  EE20 F001          	lfsr	2,1
  1668  000BD0  5001               	movf	pp_tm@tm_ptr,w,c
  1669  000BD2  26D9               	addwf	fsr2l,f,c
  1670  000BD4  5002               	movf	pp_tm@tm_ptr+1,w,c
  1671  000BD6  22DA               	addwfc	fsr2h,f,c
  1672  000BD8  2ADF               	incf	indf2,f,c
  1673  000BDA  0E3B               	movlw	59
  1674  000BDC  64DF               	cpfsgt	indf2,c
  1675  000BDE  D020               	goto	i2l139
  1676                           
  1677                           ;main.c: 141: tm_ptr->min = 0;
  1678  000BE0  EE20 F001          	lfsr	2,1
  1679  000BE4  D00C               	goto	L5
  1680  000BE6                     
  1681                           ;main.c: 145: if(++tm_ptr->hour>23){
  1682  000BE6  EE20 F002          	lfsr	2,2
  1683  000BEA  5001               	movf	pp_tm@tm_ptr,w,c
  1684  000BEC  26D9               	addwf	fsr2l,f,c
  1685  000BEE  5002               	movf	pp_tm@tm_ptr+1,w,c
  1686  000BF0  22DA               	addwfc	fsr2h,f,c
  1687  000BF2  2ADF               	incf	indf2,f,c
  1688  000BF4  0E17               	movlw	23
  1689  000BF6  64DF               	cpfsgt	indf2,c
  1690  000BF8  D013               	goto	i2l139
  1691                           
  1692                           ;main.c: 146: tm_ptr->hour = 0;
  1693  000BFA  EE20 F002          	lfsr	2,2
  1694  000BFE                     L5:
  1695  000BFE  5001               	movf	pp_tm@tm_ptr,w,c
  1696  000C00  26D9               	addwf	fsr2l,f,c
  1697  000C02  5002               	movf	pp_tm@tm_ptr+1,w,c
  1698  000C04  22DA               	addwfc	fsr2h,f,c
  1699  000C06  D7DF               	goto	L4
  1700  000C08                     i2l1081:
  1701                           
  1702                           ;main.c: 147: return 1;
  1703  000C08  0E01               	movlw	1
  1704  000C0A  0012               	return	
  1705  000C0C                     i2l135:
  1706  000C0C  5003               	movf	pp_tm@type,w,c
  1707                           
  1708                           ; Switch size 1, requested type "space"
  1709                           ; Number of cases is 3, Range of values is 1 to 4
  1710                           ; switch strategies available:
  1711                           ; Name         Instructions Cycles
  1712                           ; simple_byte           10     6 (average)
  1713                           ;	Chosen strategy is simple_byte
  1714  000C0E  0A01               	xorlw	1	; case 1
  1715  000C10  B4D8               	btfsc	status,2,c
  1716  000C12  D7CD               	goto	i2l136
  1717  000C14  0A03               	xorlw	3	; case 2
  1718  000C16  B4D8               	btfsc	status,2,c
  1719  000C18  D7D9               	goto	i2l140
  1720  000C1A  0A06               	xorlw	6	; case 4
  1721  000C1C  B4D8               	btfsc	status,2,c
  1722  000C1E  D7E3               	goto	i2l142
  1723  000C20                     i2l139:
  1724                           
  1725                           ;main.c: 150: return 0;
  1726  000C20  0E00               	movlw	0
  1727  000C22  0012               	return	
  1728  000C24                     __end_of_pp_tm:
  1729                           	opt stack 0
  1730                           pclatu	equ	0xFFB
  1731                           pclath	equ	0xFFA
  1732                           tblptru	equ	0xFF8
  1733                           tblptrh	equ	0xFF7
  1734                           tblptrl	equ	0xFF6
  1735                           tablat	equ	0xFF5
  1736                           prodh	equ	0xFF4
  1737                           prodl	equ	0xFF3
  1738                           intcon	equ	0xFF2
  1739                           intcon2	equ	0xFF1
  1740                           postinc0	equ	0xFEE
  1741                           fsr0h	equ	0xFEA
  1742                           fsr0l	equ	0xFE9
  1743                           wreg	equ	0xFE8
  1744                           indf1	equ	0xFE7
  1745                           fsr1h	equ	0xFE2
  1746                           fsr1l	equ	0xFE1
  1747                           indf2	equ	0xFDF
  1748                           fsr2h	equ	0xFDA
  1749                           fsr2l	equ	0xFD9
  1750                           status	equ	0xFD8
  1751                           pclatu	equ	0xFFB
  1752                           pclath	equ	0xFFA
  1753                           tblptru	equ	0xFF8
  1754                           tblptrh	equ	0xFF7
  1755                           tblptrl	equ	0xFF6
  1756                           tablat	equ	0xFF5
  1757                           prodh	equ	0xFF4
  1758                           prodl	equ	0xFF3
  1759                           intcon	equ	0xFF2
  1760                           intcon2	equ	0xFF1
  1761                           postinc0	equ	0xFEE
  1762                           fsr0h	equ	0xFEA
  1763                           fsr0l	equ	0xFE9
  1764                           wreg	equ	0xFE8
  1765                           indf1	equ	0xFE7
  1766                           fsr1h	equ	0xFE2
  1767                           fsr1l	equ	0xFE1
  1768                           indf2	equ	0xFDF
  1769                           fsr2h	equ	0xFDA
  1770                           fsr2l	equ	0xFD9
  1771                           status	equ	0xFD8
  1772                           
  1773                           	psect	rparam
  1774  0000                     pclatu	equ	0xFFB
  1775                           pclath	equ	0xFFA
  1776                           tblptru	equ	0xFF8
  1777                           tblptrh	equ	0xFF7
  1778                           tblptrl	equ	0xFF6
  1779                           tablat	equ	0xFF5
  1780                           prodh	equ	0xFF4
  1781                           prodl	equ	0xFF3
  1782                           intcon	equ	0xFF2
  1783                           intcon2	equ	0xFF1
  1784                           postinc0	equ	0xFEE
  1785                           fsr0h	equ	0xFEA
  1786                           fsr0l	equ	0xFE9
  1787                           wreg	equ	0xFE8
  1788                           indf1	equ	0xFE7
  1789                           fsr1h	equ	0xFE2
  1790                           fsr1l	equ	0xFE1
  1791                           indf2	equ	0xFDF
  1792                           fsr2h	equ	0xFDA
  1793                           fsr2l	equ	0xFD9
  1794                           status	equ	0xFD8
  1795                           
  1796                           	psect	temp
  1797  000041                     btemp:
  1798                           	opt stack 0
  1799  000041                     	ds	1
  1800  0000                     int$flags	set	btemp
  1801  0000                     wtemp6	set	btemp+1
  1802                           pclatu	equ	0xFFB
  1803                           pclath	equ	0xFFA
  1804                           tblptru	equ	0xFF8
  1805                           tblptrh	equ	0xFF7
  1806                           tblptrl	equ	0xFF6
  1807                           tablat	equ	0xFF5
  1808                           prodh	equ	0xFF4
  1809                           prodl	equ	0xFF3
  1810                           intcon	equ	0xFF2
  1811                           intcon2	equ	0xFF1
  1812                           postinc0	equ	0xFEE
  1813                           fsr0h	equ	0xFEA
  1814                           fsr0l	equ	0xFE9
  1815                           wreg	equ	0xFE8
  1816                           indf1	equ	0xFE7
  1817                           fsr1h	equ	0xFE2
  1818                           fsr1l	equ	0xFE1
  1819                           indf2	equ	0xFDF
  1820                           fsr2h	equ	0xFDA
  1821                           fsr2l	equ	0xFD9
  1822                           status	equ	0xFD8


Data Sizes:
    Strings     13
    Constant    0
    Data        0
    BSS         8
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     55      64
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    pp_tm@tm_ptr	PTR struct . size(2) Largest target is 4
		 -> clock(COMRAM[4]), 

    pp_time@tm_ptr	PTR struct . size(2) Largest target is 4
		 -> clock(COMRAM[4]), 

    make_disp_time@tm_ptr	PTR struct . size(2) Largest target is 4
		 -> clock(COMRAM[4]), 

    make_disp_time@ptr	PTR unsigned char  size(2) Largest target is 8
		 -> main@Display(COMRAM[8]), 

    show_count@ptr	PTR unsigned char  size(2) Largest target is 8
		 -> main@Display(COMRAM[8]), 

    show_count@dectoDy	PTR const unsigned char  size(2) Largest target is 13
		 -> STR_1(CODE[13]), 

    num_to_arr_num@ptr	PTR unsigned char  size(2) Largest target is 8
		 -> main@Display(COMRAM[8]), 


Critical Paths under _main in COMRAM

    _main->_make_disp_time
    _show_count->_wait_timer
    _make_disp_time->_num_to_arr_num
    _num_to_arr_num->___lwdiv

Critical Paths under _ISR in COMRAM

    _ISR->_pp_time
    _pp_time->_pp_tm

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 8     8      0    2594
                                             47 COMRAM     8     8      0
                     _make_disp_time
                              _setup
                         _show_count
 ---------------------------------------------------------------------------------
 (1) _show_count                                          12    10      2     274
                                             25 COMRAM    12    10      2
                         _wait_timer
 ---------------------------------------------------------------------------------
 (2) _wait_timer                                           1     1      0      15
                                             24 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _make_disp_time                                      11     7      4    2261
                                             36 COMRAM    11     7      4
                     _num_to_arr_num
 ---------------------------------------------------------------------------------
 (2) _num_to_arr_num                                       5     0      5    1683
                                             31 COMRAM     5     0      5
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     463
                                             24 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     314
                                             24 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _ISR                                                 18    18      0    1666
                                              6 COMRAM    18    18      0
                            _pp_time
                              _pp_tm
 ---------------------------------------------------------------------------------
 (5) _pp_time                                              2     0      2     904
                                              4 COMRAM     2     0      2
                              _pp_tm
 ---------------------------------------------------------------------------------
 (5) _pp_tm                                                4     1      3     762
                                              0 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _make_disp_time
     _num_to_arr_num
       ___lwdiv
       ___lwmod
   _setup
   _show_count
     _wait_timer

 _ISR (ROOT)
   _pp_time
     _pp_tm
   _pp_tm

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5E      0       1       0        1.1%
COMRAM              5E     37      40       1       68.1%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      40      20        0.0%
DATA                 0      0      40       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sun Jun 03 10:36:52 2018

            main@Display 0030                       l93 0B36                       l85 0D34  
                     l94 0B20              __CFG_BORV$3 000000             __CFG_CP0$OFF 000000  
           __CFG_CP1$OFF 000000             __CFG_CP2$OFF 000000             __CFG_CP3$OFF 000000  
                    l101 0D7E                      l110 0A8A                      l103 0D76  
                    l104 0D74                      l112 0AD8                      l122 0A28  
                    l125 0A3C                      l118 09D8                      l551 0C62  
                    l552 0C6C                      l561 0CA4                      l562 0CAE  
                    l547 0C42                      l548 0C3A                      l557 0C8C  
                    l558 0C84             __CFG_CPB$OFF 000000                      u430 0C46  
                    u510 0B3C                      u530 0B8A             __CFG_CPD$OFF 000000  
                    u460 0C90                      u620 0A68                      _ISR 0008  
           __CFG_BOR$OFF 000000                      wreg 000FE8             __CFG_FOSC$HS 000000  
           __CFG_LVP$OFF 000000                     ?_ISR 0001             __CFG_WDT$OFF 000000  
                   l1103 0B48                     l1143 0A34                     l1135 0A20  
                   l1171 0B06                     STR_1 0801                     _LATA 000F89  
                   _LATB 000F8A                     _LATD 000F8C                     i2l70 08AC  
                   i2l71 08DA                     i2l73 08BA                     i2l75 08CA  
                   i2l68 0874                     i2l79 08FC                     _main 0D30  
                   fsr0h 000FEA                     fsr1h 000FE2                     fsr2h 000FDA  
                   fsr0l 000FE9                     indf1 000FE7                     indf2 000FDF  
                   fsr1l 000FE1                     fsr2l 000FD9                     btemp 0041  
                   prodh 000FF4                     prodl 000FF3                     start 000E  
          __CFG_IESO$OFF 000000            __CFG_MCLRE$ON 000000             ___param_bank 000000  
                  ??_ISR 0007           _make_disp_time 0948            __CFG_PLLDIV$1 000000  
          show_count@ptr 001A           __CFG_CCP2MX$ON 000000                    ?_main 0001  
                  _CMCON 000FB4                    _T0CON 000FD5                    _T1CON 000FCD  
        __end_of___lwdiv 0C76          __end_of___lwmod 0CB8                    i2l140 0BCC  
                  i2l142 0BE6                    i2l135 0C0C                    i2l136 0BAE  
                  i2l139 0C20                    _TMR0H 000FD7                    _TMR1H 000FCF  
                  _TMR0L 000FD6            __CFG_USBDIV$1 000000                    _TRISA 000F92  
                  _TRISB 000F93                    _TRISD 000F95            __CFG_PWRT$OFF 000000  
          __CFG_WRT0$OFF 000000            __CFG_WRT1$OFF 000000            __CFG_WRT2$OFF 000000  
       ??_num_to_arr_num 0025            __CFG_WRT3$OFF 000000           __CFG_EBTR0$OFF 000000  
         __CFG_FCMEN$OFF 000000           __CFG_EBTR1$OFF 000000           __CFG_EBTR2$OFF 000000  
         __CFG_EBTR3$OFF 000000            __CFG_WRTB$OFF 000000            __CFG_WRTC$OFF 000000  
          __CFG_WRTD$OFF 000000           __CFG_EBTRB$OFF 000000                    _clock 003C  
                  _count 0038                    _pp_tm 0BAC                    _setup 0CF6  
        __end_of_pp_time 0CF6                    pclath 000FFA                    tablat 000FF5  
                  status 000FD8                    wtemp6 0042           __CFG_ICPRT$OFF 000000  
        __initialization 0D56   __end_of_make_disp_time 0A72             __end_of_main 0D56  
                 ??_main 0030            __activetblptr 000002                   _ADCON1 000FC1  
                 ?_pp_tm 0001                   ?_setup 0001                   i2l1081 0C08  
     _make_disp_time$499 002B           __CFG_XINST$OFF 000000          ?_make_disp_time 0025  
         __CFG_STVREN$ON 000000                   _flag_t 0200                ??___lwdiv 001D  
              ??___lwmod 001D     make_disp_time@tm_ptr 0027                   clear_0 0D5C  
           __mediumconst 0000                   tblptrh 000FF7                   tblptrl 000FF6  
              ??_pp_time 0007                   tblptru 000FF8               __accesstop 0060  
__end_of__initialization 0D62          __CFG_PBADEN$OFF 000000            ___rparam_used 000001  
         __pcstackCOMRAM 0001            __end_of_pp_tm 0C24        show_count@dectoDy 0023  
          __end_of_setup 0D30                  ??_pp_tm 0004                  ??_setup 0019  
             _flagStatus 003B                  i2u71_40 08A8                  i2u72_40 08AA  
        make_disp_time@i 002D          make_disp_time@j 002E          make_disp_time@k 002F  
        __CFG_VREGEN$OFF 000000               _count_rbnd 003A                  __Hparam 0000  
                __Lparam 0000              pp_tm@tm_ptr 0001                  ___lwdiv 0C24  
                ___lwmod 0C76             __psmallconst 0800                  __pcinit 0D56  
                __ramtop 0800                  __ptext0 0D30                  __ptext1 0A72  
                __ptext2 0D70                  __ptext3 0CF6                  __ptext4 0948  
                __ptext5 0B1E                  __ptext6 0C76                  __ptext7 0C24  
                __ptext9 0CB8             __size_of_ISR 0940                  _pp_time 0CB8  
         __pintcode_body 0810     end_of_initialization 0D62            __Lmediumconst 0000  
                int_func 0810         ??_make_disp_time 0029                  postinc0 000FEE  
             _wait_timer 0D70              wait_timer@n 0019                _PORTAbits 000F80  
             _show_count 0A72              show_count@a 0022              show_count@i 0025  
__size_of_num_to_arr_num 008E        make_disp_time@ptr 0025            __pbitnvCOMRAM 0200  
    start_initialization 0D56              __end_of_ISR 0948         __CFG_LPT1OSC$OFF 000000  
            ?_wait_timer 0001              ?_show_count 001A              __pbssCOMRAM 0038  
       ___lwdiv@dividend 0019                __pintcode 0008                 ?___lwdiv 0019  
               ?___lwmod 0019            pp_time@tm_ptr 0005              __smallconst 0800  
               ?_pp_time 0005         ___lwdiv@quotient 001D           __size_of_pp_tm 0078  
         __size_of_setup 003A      __size_of_wait_timer 0016           _num_to_arr_num 0B1E  
               _IPR1bits 000F9F                 _PIE1bits 000F9D      __size_of_show_count 00AC  
               _PIR1bits 000F9E                 _RCONbits 000FD0         __CFG_WDTPS$32768 000000  
            _INTCON2bits 000FF1   __end_of_num_to_arr_num 0BAC                 __Hrparam 0000  
               __Lrparam 0000         __size_of___lwdiv 0052         __size_of___lwmod 0042  
      num_to_arr_num@len 0024        num_to_arr_num@num 0022        num_to_arr_num@ptr 0020  
        ___lwdiv@divisor 001B          ___lwdiv@counter 001F                 __ptext10 0BAC  
       __size_of_pp_time 003E          ?_num_to_arr_num 0020                pp_tm@type 0003  
          __size_of_main 0026                 int$flags 0041  __size_of_make_disp_time 012A  
           ??_wait_timer 0019             ??_show_count 001C    __CFG_CPUDIV$OSC1_PLL2 000000  
             _INTCONbits 000FF2                 intlevel2 0000         ___lwmod@dividend 0019  
     __end_of_wait_timer 0D86       __end_of_show_count 0B1E          ___lwmod@divisor 001B  
        ___lwmod@counter 001D  
