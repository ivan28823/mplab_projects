

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sat Jun 09 10:43:43 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	bitnvCOMRAM,global,bit,class=COMRAM,space=1,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    19                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    23                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    24                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    25  0000                     
    26                           ; Version 1.45
    27                           ; Generated 16/11/2017 GMT
    28                           ; 
    29                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    30                           ; All rights reserved.
    31                           ; 
    32                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    33                           ; 
    34                           ; Redistribution and use in source and binary forms, with or without modification, are
    35                           ; permitted provided that the following conditions are met:
    36                           ; 
    37                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    38                           ;        conditions and the following disclaimer.
    39                           ; 
    40                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    41                           ;        of conditions and the following disclaimer in the documentation and/or other
    42                           ;        materials provided with the distribution.
    43                           ; 
    44                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    45                           ;        software without specific prior written permission.
    46                           ; 
    47                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    48                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    49                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    50                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    51                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    52                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    53                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    54                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    55                           ; 
    56                           ; 
    57                           ; Code-generator required, PIC18F4550 Definitions
    58                           ; 
    59                           ; SFR Addresses
    60  0000                     
    61                           	psect	bitnvCOMRAM
    62  0001F8                     __pbitnvCOMRAM:
    63                           	opt stack 0
    64  0001F8                     _flag_t:
    65                           	opt stack 0
    66  0001F8                     	ds	1
    67  0000                     _LATD	set	3980
    68  0000                     _RCONbits	set	4048
    69  0000                     _IPR1bits	set	3999
    70  0000                     _T1CON	set	4045
    71  0000                     _INTCON2bits	set	4081
    72  0000                     _T0CON	set	4053
    73  0000                     _LATB	set	3978
    74  0000                     _LATA	set	3977
    75  0000                     _TRISB	set	3987
    76  0000                     _TRISD	set	3989
    77  0000                     _TRISA	set	3986
    78  0000                     _CMCON	set	4020
    79  0000                     _ADCON1	set	4033
    80  0000                     _PIE1bits	set	3997
    81  0000                     _PORTAbits	set	3968
    82  0000                     _TMR0H	set	4055
    83  0000                     _TMR0L	set	4054
    84  0000                     _INTCONbits	set	4082
    85  0000                     _TMR1H	set	4047
    86  0000                     _PIR1bits	set	3998
    87                           
    88                           	psect	smallconst
    89  000800                     __psmallconst:
    90                           	opt stack 0
    91  000800  00                 	db	0
    92  000801                     STR_1:
    93  000801  C0                 	db	-64
    94  000802  F9                 	db	-7
    95  000803  A4                 	db	-92
    96  000804  B0                 	db	-80
    97  000805  99                 	db	-103
    98  000806  92                 	db	-110
    99  000807  82                 	db	-126
   100  000808  F8                 	db	-8
   101  000809  80                 	db	-128
   102  00080A  98                 	db	-104
   103  00080B  BF                 	db	-65
   104  00080C  FF                 	db	-1
   105  00080D  00                 	db	0
   106                           
   107                           ; #config settings
   108  00080E  00                 	db	0	; dummy byte at the end
   109  0000                     
   110                           	psect	cinit
   111  000D48                     __pcinit:
   112                           	opt stack 0
   113  000D48                     start_initialization:
   114                           	opt stack 0
   115  000D48                     __initialization:
   116                           	opt stack 0
   117                           
   118                           ; Clear objects allocated to COMRAM (7 bytes)
   119  000D48  EE00  F038         	lfsr	0,__pbssCOMRAM
   120  000D4C  0E07               	movlw	7
   121  000D4E                     clear_0:
   122  000D4E  6AEE               	clrf	postinc0,c
   123  000D50  06E8               	decf	wreg,f,c
   124  000D52  E1FD               	bnz	clear_0
   125  000D54                     end_of_initialization:
   126                           	opt stack 0
   127  000D54                     __end_of__initialization:
   128                           	opt stack 0
   129  000D54  9040               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   130  000D56  9240               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   131  000D58  0E00               	movlw	low (__Lmediumconst shr (0+16))
   132  000D5A  6EF8               	movwf	tblptru,c
   133  000D5C  0100               	movlb	0
   134  000D5E  EF91  F006         	goto	_main	;jump to C main() function
   135                           tblptru	equ	0xFF8
   136                           postinc0	equ	0xFEE
   137                           wreg	equ	0xFE8
   138                           
   139                           	psect	bssCOMRAM
   140  000038                     __pbssCOMRAM:
   141                           	opt stack 0
   142  000038                     _count_rbnd:
   143                           	opt stack 0
   144  000038                     	ds	1
   145  000039                     _flagStatus:
   146                           	opt stack 0
   147  000039                     	ds	1
   148  00003A                     _count:
   149                           	opt stack 0
   150  00003A                     	ds	1
   151  00003B                     _clock:
   152                           	opt stack 0
   153  00003B                     	ds	4
   154                           tblptru	equ	0xFF8
   155                           postinc0	equ	0xFEE
   156                           wreg	equ	0xFE8
   157                           
   158                           	psect	cstackCOMRAM
   159  000001                     __pcstackCOMRAM:
   160                           	opt stack 0
   161  000001                     pp_tm@tm_ptr:
   162                           	opt stack 0
   163                           
   164                           ; 2 bytes @ 0x0
   165  000001                     	ds	2
   166  000003                     pp_tm@type:
   167                           	opt stack 0
   168                           
   169                           ; 1 bytes @ 0x2
   170  000003                     	ds	1
   171  000004                     
   172                           ; 1 bytes @ 0x3
   173  000004                     	ds	1
   174  000005                     pp_time@tm_ptr:
   175                           	opt stack 0
   176                           
   177                           ; 2 bytes @ 0x4
   178  000005                     	ds	2
   179  000007                     ??_ISR:
   180                           
   181                           ; 1 bytes @ 0x6
   182  000007                     	ds	18
   183  000019                     ?___lwdiv:
   184                           	opt stack 0
   185  000019                     ?___lwmod:
   186                           	opt stack 0
   187  000019                     wait_timer@n:
   188                           	opt stack 0
   189  000019                     ___lwdiv@dividend:
   190                           	opt stack 0
   191  000019                     ___lwmod@dividend:
   192                           	opt stack 0
   193                           
   194                           ; 2 bytes @ 0x18
   195  000019                     	ds	1
   196  00001A                     show_count@ptr:
   197                           	opt stack 0
   198                           
   199                           ; 2 bytes @ 0x19
   200  00001A                     	ds	1
   201  00001B                     ___lwdiv@divisor:
   202                           	opt stack 0
   203  00001B                     ___lwmod@divisor:
   204                           	opt stack 0
   205                           
   206                           ; 2 bytes @ 0x1A
   207  00001B                     	ds	1
   208  00001C                     ??_show_count:
   209                           
   210                           ; 1 bytes @ 0x1B
   211  00001C                     	ds	1
   212  00001D                     ___lwmod@counter:
   213                           	opt stack 0
   214  00001D                     ___lwdiv@quotient:
   215                           	opt stack 0
   216                           
   217                           ; 2 bytes @ 0x1C
   218  00001D                     	ds	2
   219  00001F                     ___lwdiv@counter:
   220                           	opt stack 0
   221                           
   222                           ; 1 bytes @ 0x1E
   223  00001F                     	ds	1
   224  000020                     num_to_arr_num@ptr:
   225                           	opt stack 0
   226                           
   227                           ; 2 bytes @ 0x1F
   228  000020                     	ds	2
   229  000022                     show_count@a:
   230                           	opt stack 0
   231  000022                     num_to_arr_num@num:
   232                           	opt stack 0
   233                           
   234                           ; 2 bytes @ 0x21
   235  000022                     	ds	1
   236  000023                     show_count@dectoDy:
   237                           	opt stack 0
   238                           
   239                           ; 2 bytes @ 0x22
   240  000023                     	ds	1
   241  000024                     num_to_arr_num@len:
   242                           	opt stack 0
   243                           
   244                           ; 1 bytes @ 0x23
   245  000024                     	ds	1
   246  000025                     show_count@i:
   247                           	opt stack 0
   248  000025                     make_disp_time@ptr:
   249                           	opt stack 0
   250                           
   251                           ; 2 bytes @ 0x24
   252  000025                     	ds	2
   253  000027                     make_disp_time@tm_ptr:
   254                           	opt stack 0
   255                           
   256                           ; 2 bytes @ 0x26
   257  000027                     	ds	2
   258  000029                     ??_make_disp_time:
   259                           
   260                           ; 1 bytes @ 0x28
   261  000029                     	ds	2
   262  00002B                     _make_disp_time$499:
   263                           	opt stack 0
   264                           
   265                           ; 2 bytes @ 0x2A
   266  00002B                     	ds	2
   267  00002D                     make_disp_time@i:
   268                           	opt stack 0
   269                           
   270                           ; 1 bytes @ 0x2C
   271  00002D                     	ds	1
   272  00002E                     make_disp_time@j:
   273                           	opt stack 0
   274                           
   275                           ; 1 bytes @ 0x2D
   276  00002E                     	ds	1
   277  00002F                     make_disp_time@k:
   278                           	opt stack 0
   279                           
   280                           ; 1 bytes @ 0x2E
   281  00002F                     	ds	1
   282  000030                     main@Display:
   283                           	opt stack 0
   284                           
   285                           ; 8 bytes @ 0x2F
   286  000030                     	ds	8
   287                           tblptru	equ	0xFF8
   288                           postinc0	equ	0xFEE
   289                           wreg	equ	0xFE8
   290                           
   291 ;;
   292 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   293 ;;
   294 ;; *************** function _main *****************
   295 ;; Defined at:
   296 ;;		line 62 in file "main.c"
   297 ;; Parameters:    Size  Location     Type
   298 ;;		None
   299 ;; Auto vars:     Size  Location     Type
   300 ;;  Display         8   47[COMRAM] unsigned char [8]
   301 ;; Return value:  Size  Location     Type
   302 ;;                  1    wreg      void 
   303 ;; Registers used:
   304 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   305 ;; Tracked objects:
   306 ;;		On entry : 0/0
   307 ;;		On exit  : 0/0
   308 ;;		Unchanged: 0/0
   309 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   310 ;;      Params:         0       0       0       0       0       0       0       0       0
   311 ;;      Locals:         8       0       0       0       0       0       0       0       0
   312 ;;      Temps:          0       0       0       0       0       0       0       0       0
   313 ;;      Totals:         8       0       0       0       0       0       0       0       0
   314 ;;Total ram usage:        8 bytes
   315 ;; Hardware stack levels required when called:    6
   316 ;; This function calls:
   317 ;;		_make_disp_time
   318 ;;		_setup
   319 ;;		_show_count
   320 ;; This function is called by:
   321 ;;		Startup code after reset
   322 ;; This function uses a non-reentrant model
   323 ;;
   324                           
   325                           	psect	text0
   326  000D22                     __ptext0:
   327                           	opt stack 0
   328  000D22                     _main:
   329                           	opt stack 25
   330                           
   331                           ;main.c: 63: setup();
   332                           
   333                           ;incstack = 0
   334  000D22  EC74  F006         	call	_setup	;wreg free
   335  000D26                     
   336                           ;main.c: 66: make_disp_time(Display,&clock);
   337  000D26  0E30               	movlw	low main@Display
   338  000D28  6E25               	movwf	make_disp_time@ptr,c
   339  000D2A  0E00               	movlw	high main@Display
   340  000D2C  6E26               	movwf	make_disp_time@ptr+1,c
   341  000D2E  0E3B               	movlw	low _clock
   342  000D30  6E27               	movwf	make_disp_time@tm_ptr,c
   343  000D32  0E00               	movlw	high _clock
   344  000D34  6E28               	movwf	make_disp_time@tm_ptr+1,c
   345  000D36  EC08  F004         	call	_make_disp_time	;wreg free
   346                           
   347                           ;main.c: 67: show_count(Display);
   348  000D3A  0E30               	movlw	low main@Display
   349  000D3C  6E1A               	movwf	show_count@ptr,c
   350  000D3E  0E00               	movlw	high main@Display
   351  000D40  6E1B               	movwf	show_count@ptr+1,c
   352  000D42  EC31  F005         	call	_show_count	;wreg free
   353                           
   354                           ;main.c: 68: }
   355  000D46  D7EF               	goto	l85
   356  000D48                     __end_of_main:
   357                           	opt stack 0
   358                           tblptru	equ	0xFF8
   359                           postinc0	equ	0xFEE
   360                           wreg	equ	0xFE8
   361                           
   362 ;; *************** function _show_count *****************
   363 ;; Defined at:
   364 ;;		line 103 in file "main.c"
   365 ;; Parameters:    Size  Location     Type
   366 ;;  ptr             2   25[COMRAM] PTR unsigned char 
   367 ;;		 -> main@Display(8), 
   368 ;; Auto vars:     Size  Location     Type
   369 ;;  i               1   36[COMRAM] unsigned char 
   370 ;;  a               1   33[COMRAM] unsigned char 
   371 ;;  dectoDy         2   34[COMRAM] PTR const unsigned char 
   372 ;;		 -> STR_1(13), 
   373 ;; Return value:  Size  Location     Type
   374 ;;                  1    wreg      void 
   375 ;; Registers used:
   376 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   377 ;; Tracked objects:
   378 ;;		On entry : 0/0
   379 ;;		On exit  : 0/0
   380 ;;		Unchanged: 0/0
   381 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   382 ;;      Params:         2       0       0       0       0       0       0       0       0
   383 ;;      Locals:         4       0       0       0       0       0       0       0       0
   384 ;;      Temps:          6       0       0       0       0       0       0       0       0
   385 ;;      Totals:        12       0       0       0       0       0       0       0       0
   386 ;;Total ram usage:       12 bytes
   387 ;; Hardware stack levels used:    1
   388 ;; Hardware stack levels required when called:    4
   389 ;; This function calls:
   390 ;;		_wait_timer
   391 ;; This function is called by:
   392 ;;		_main
   393 ;; This function uses a non-reentrant model
   394 ;;
   395                           
   396                           	psect	text1
   397  000A62                     __ptext1:
   398                           	opt stack 0
   399  000A62                     _show_count:
   400                           	opt stack 26
   401                           
   402                           ;main.c: 104: const char * dectoDy = "\xC0\xF9\xA4\xB0\x99\x92\x82\xF8\x80\x98\xBF\xFF";
   403                           
   404                           ;incstack = 0
   405  000A62  0E01               	movlw	low STR_1
   406  000A64  6E23               	movwf	show_count@dectoDy,c
   407  000A66  0E08               	movlw	high STR_1
   408  000A68  6E24               	movwf	show_count@dectoDy+1,c
   409                           
   410                           ;main.c: 105: for(unsigned char i = 0,a=1;i<8;a<<=1,i++){
   411  000A6A  0E00               	movlw	0
   412  000A6C  6E25               	movwf	show_count@i,c
   413  000A6E  0E01               	movlw	1
   414  000A70  6E22               	movwf	show_count@a,c
   415  000A72  0E07               	movlw	7
   416  000A74  6425               	cpfsgt	show_count@i,c
   417  000A76  D001               	goto	l110
   418  000A78  0012               	return	
   419  000A7A                     l110:
   420                           
   421                           ;main.c: 106: LATB = 0xFF;
   422  000A7A  688A               	setf	3978,c	;volatile
   423                           
   424                           ;main.c: 107: if(*ptr>11){
   425  000A7C  C01A  FFD9         	movff	show_count@ptr,fsr2l
   426  000A80  C01B  FFDA         	movff	show_count@ptr+1,fsr2h
   427  000A84  0E0B               	movlw	11
   428  000A86  64DF               	cpfsgt	indf2,c
   429  000A88  D020               	goto	l112
   430                           
   431                           ;main.c: 108: LATD = *(dectoDy + (*ptr++ - 12)) & 0x7F;
   432  000A8A  0EF4               	movlw	244
   433  000A8C  6E1C               	movwf	??_show_count& (0+255),c
   434  000A8E  0EFF               	movlw	255
   435  000A90  6E1D               	movwf	(??_show_count+1)& (0+255),c
   436  000A92  C01A  FFD9         	movff	show_count@ptr,fsr2l
   437  000A96  C01B  FFDA         	movff	show_count@ptr+1,fsr2h
   438  000A9A  50DF               	movf	indf2,w,c
   439  000A9C  6E1E               	movwf	(??_show_count+2)& (0+255),c
   440  000A9E  6A1F               	clrf	(??_show_count+3)& (0+255),c
   441  000AA0  501C               	movf	??_show_count,w,c
   442  000AA2  261E               	addwf	??_show_count+2,f,c
   443  000AA4  501D               	movf	??_show_count+1,w,c
   444  000AA6  221F               	addwfc	??_show_count+3,f,c
   445  000AA8  C023  F020         	movff	show_count@dectoDy,??_show_count+4
   446  000AAC  C024  F021         	movff	show_count@dectoDy+1,??_show_count+5
   447  000AB0  501E               	movf	??_show_count+2,w,c
   448  000AB2  2620               	addwf	??_show_count+4,f,c
   449  000AB4  501F               	movf	??_show_count+3,w,c
   450  000AB6  2221               	addwfc	??_show_count+5,f,c
   451  000AB8  C020  FFF6         	movff	??_show_count+4,tblptrl
   452  000ABC  C021  FFF7         	movff	??_show_count+5,tblptrh
   453  000AC0                     	if	0	;tblptru may be non-zero
   454  000AC0                     	endif
   455  000AC0                     	if	0	;tblptru may be non-zero
   456  000AC0                     	endif
   457  000AC0  0008               	tblrd		*
   458  000AC2  50F5               	movf	tablat,w,c
   459  000AC4  0B7F               	andlw	127
   460  000AC6  6E8C               	movwf	3980,c	;volatile
   461  000AC8  D017               	goto	l1171
   462  000ACA                     l112:
   463                           
   464                           ;main.c: 110: LATD = *(dectoDy + *ptr++) ;
   465  000ACA  C01A  FFD9         	movff	show_count@ptr,fsr2l
   466  000ACE  C01B  FFDA         	movff	show_count@ptr+1,fsr2h
   467  000AD2  50DF               	movf	indf2,w,c
   468  000AD4  6E1C               	movwf	??_show_count& (0+255),c
   469  000AD6  501C               	movf	??_show_count,w,c
   470  000AD8  0D01               	mullw	1
   471  000ADA  C023  F01D         	movff	show_count@dectoDy,??_show_count+1
   472  000ADE  C024  F01E         	movff	show_count@dectoDy+1,??_show_count+2
   473  000AE2  50F3               	movf	prodl,w,c
   474  000AE4  261D               	addwf	??_show_count+1,f,c
   475  000AE6  50F4               	movf	prodh,w,c
   476  000AE8  221E               	addwfc	??_show_count+2,f,c
   477  000AEA  C01D  FFF6         	movff	??_show_count+1,tblptrl
   478  000AEE  C01E  FFF7         	movff	??_show_count+2,tblptrh
   479  000AF2                     	if	0	;tblptru may be non-zero
   480  000AF2                     	endif
   481  000AF2                     	if	0	;tblptru may be non-zero
   482  000AF2                     	endif
   483  000AF2  0008               	tblrd		*
   484  000AF4  CFF5 FF8C          	movff	tablat,3980	;volatile
   485  000AF8                     l1171:
   486  000AF8  4A1A               	infsnz	show_count@ptr,f,c
   487  000AFA  2A1B               	incf	show_count@ptr+1,f,c
   488                           
   489                           ;main.c: 111: LATB = ~a;
   490  000AFC  5022               	movf	show_count@a,w,c
   491  000AFE  0AFF               	xorlw	255
   492  000B00  6E8A               	movwf	3978,c	;volatile
   493                           
   494                           ;main.c: 112: wait_timer(1);
   495  000B02  0E01               	movlw	1
   496  000B04  ECB1  F006         	call	_wait_timer
   497  000B08  90D8               	bcf	status,0,c
   498  000B0A  3622               	rlcf	show_count@a,f,c
   499  000B0C  2A25               	incf	show_count@i,f,c
   500  000B0E  D7B1               	goto	L1
   501  000B10                     __end_of_show_count:
   502                           	opt stack 0
   503                           tblptru	equ	0xFF8
   504                           tblptrh	equ	0xFF7
   505                           tblptrl	equ	0xFF6
   506                           tablat	equ	0xFF5
   507                           prodh	equ	0xFF4
   508                           prodl	equ	0xFF3
   509                           postinc0	equ	0xFEE
   510                           wreg	equ	0xFE8
   511                           indf2	equ	0xFDF
   512                           fsr2h	equ	0xFDA
   513                           fsr2l	equ	0xFD9
   514                           status	equ	0xFD8
   515                           
   516 ;; *************** function _wait_timer *****************
   517 ;; Defined at:
   518 ;;		line 97 in file "main.c"
   519 ;; Parameters:    Size  Location     Type
   520 ;;  n               1    wreg     unsigned char 
   521 ;; Auto vars:     Size  Location     Type
   522 ;;  n               1   24[COMRAM] unsigned char 
   523 ;; Return value:  Size  Location     Type
   524 ;;                  1    wreg      void 
   525 ;; Registers used:
   526 ;;		wreg, status,2, status,0
   527 ;; Tracked objects:
   528 ;;		On entry : 0/0
   529 ;;		On exit  : 0/0
   530 ;;		Unchanged: 0/0
   531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   532 ;;      Params:         0       0       0       0       0       0       0       0       0
   533 ;;      Locals:         1       0       0       0       0       0       0       0       0
   534 ;;      Temps:          0       0       0       0       0       0       0       0       0
   535 ;;      Totals:         1       0       0       0       0       0       0       0       0
   536 ;;Total ram usage:        1 bytes
   537 ;; Hardware stack levels used:    1
   538 ;; Hardware stack levels required when called:    3
   539 ;; This function calls:
   540 ;;		Nothing
   541 ;; This function is called by:
   542 ;;		_show_count
   543 ;; This function uses a non-reentrant model
   544 ;;
   545                           
   546                           	psect	text2
   547  000D62                     __ptext2:
   548                           	opt stack 0
   549  000D62                     _wait_timer:
   550                           	opt stack 26
   551                           
   552                           ;incstack = 0
   553                           ;wait_timer@n stored from wreg
   554  000D62  6E19               	movwf	wait_timer@n,c
   555                           
   556                           ;main.c: 98: for(;n;n--){
   557  000D64  D005               	goto	l101
   558  000D66                     l104:
   559  000D66  F000               	nop	
   560  000D68                     l103:
   561  000D68  A03F               	btfss	_flag_t/(0+8),_flag_t& (0+7),c
   562  000D6A  D7FD               	goto	l104
   563                           
   564                           ;main.c: 100: flag_t = 0;
   565  000D6C  903F               	bcf	_flag_t/(0+8),_flag_t& (0+7),c
   566  000D6E  0619               	decf	wait_timer@n,f,c
   567  000D70                     l101:
   568  000D70  5019               	movf	wait_timer@n,w,c
   569  000D72  B4D8               	btfsc	status,2,c
   570  000D74  0012               	return	
   571  000D76  D7F8               	goto	l103
   572  000D78                     __end_of_wait_timer:
   573                           	opt stack 0
   574                           tblptru	equ	0xFF8
   575                           tblptrh	equ	0xFF7
   576                           tblptrl	equ	0xFF6
   577                           tablat	equ	0xFF5
   578                           prodh	equ	0xFF4
   579                           prodl	equ	0xFF3
   580                           postinc0	equ	0xFEE
   581                           wreg	equ	0xFE8
   582                           indf2	equ	0xFDF
   583                           fsr2h	equ	0xFDA
   584                           fsr2l	equ	0xFD9
   585                           status	equ	0xFD8
   586                           
   587 ;; *************** function _setup *****************
   588 ;; Defined at:
   589 ;;		line 70 in file "main.c"
   590 ;; Parameters:    Size  Location     Type
   591 ;;		None
   592 ;; Auto vars:     Size  Location     Type
   593 ;;		None
   594 ;; Return value:  Size  Location     Type
   595 ;;                  1    wreg      void 
   596 ;; Registers used:
   597 ;;		wreg, status,2
   598 ;; Tracked objects:
   599 ;;		On entry : 0/0
   600 ;;		On exit  : 0/0
   601 ;;		Unchanged: 0/0
   602 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   603 ;;      Params:         0       0       0       0       0       0       0       0       0
   604 ;;      Locals:         0       0       0       0       0       0       0       0       0
   605 ;;      Temps:          0       0       0       0       0       0       0       0       0
   606 ;;      Totals:         0       0       0       0       0       0       0       0       0
   607 ;;Total ram usage:        0 bytes
   608 ;; Hardware stack levels used:    1
   609 ;; Hardware stack levels required when called:    3
   610 ;; This function calls:
   611 ;;		Nothing
   612 ;; This function is called by:
   613 ;;		_main
   614 ;; This function uses a non-reentrant model
   615 ;;
   616                           
   617                           	psect	text3
   618  000CE8                     __ptext3:
   619                           	opt stack 0
   620  000CE8                     _setup:
   621                           	opt stack 27
   622                           
   623                           ;main.c: 71: INTCONbits.GIEH=0;
   624                           
   625                           ;incstack = 0
   626  000CE8  9EF2               	bcf	intcon,7,c	;volatile
   627                           
   628                           ;main.c: 72: ADCON1 = 0x0F;
   629  000CEA  0E0F               	movlw	15
   630  000CEC  6EC1               	movwf	4033,c	;volatile
   631                           
   632                           ;main.c: 73: CMCON = 0x07;
   633  000CEE  0E07               	movlw	7
   634  000CF0  6EB4               	movwf	4020,c	;volatile
   635                           
   636                           ;main.c: 74: TRISA = 0xFF;
   637  000CF2  6892               	setf	3986,c	;volatile
   638                           
   639                           ;main.c: 75: TRISD = 0x00;
   640  000CF4  0E00               	movlw	0
   641  000CF6  6E95               	movwf	3989,c	;volatile
   642                           
   643                           ;main.c: 76: TRISB = 0x00;
   644  000CF8  0E00               	movlw	0
   645  000CFA  6E93               	movwf	3987,c	;volatile
   646                           
   647                           ;main.c: 77: LATA = LATB = 0xFF;
   648  000CFC  688A               	setf	3978,c	;volatile
   649  000CFE  6889               	setf	3977,c	;volatile
   650                           
   651                           ;main.c: 78: T0CON = 0b10001000;
   652  000D00  0E88               	movlw	136
   653  000D02  6ED5               	movwf	4053,c	;volatile
   654                           
   655                           ;main.c: 79: INTCONbits.TMR0IF = 0;
   656  000D04  94F2               	bcf	intcon,2,c	;volatile
   657                           
   658                           ;main.c: 80: INTCONbits.TMR0IE = 1;
   659  000D06  8AF2               	bsf	intcon,5,c	;volatile
   660                           
   661                           ;main.c: 81: INTCON2bits.TMR0IP = 1;
   662  000D08  84F1               	bsf	intcon2,2,c	;volatile
   663                           
   664                           ;main.c: 82: T1CON = 0b00001011;
   665  000D0A  0E0B               	movlw	11
   666  000D0C  6ECD               	movwf	4045,c	;volatile
   667                           
   668                           ;main.c: 83: PIR1bits.TMR1IF = 0;
   669  000D0E  909E               	bcf	3998,0,c	;volatile
   670                           
   671                           ;main.c: 84: PIE1bits.TMR1IE = 1;
   672  000D10  809D               	bsf	3997,0,c	;volatile
   673                           
   674                           ;main.c: 85: IPR1bits.TMR1IP = 1;
   675  000D12  809F               	bsf	3999,0,c	;volatile
   676                           
   677                           ;main.c: 86: RCONbits.IPEN = 1;
   678  000D14  8ED0               	bsf	4048,7,c	;volatile
   679                           
   680                           ;main.c: 87: INTCONbits.GIEL = 0;
   681  000D16  9CF2               	bcf	intcon,6,c	;volatile
   682                           
   683                           ;main.c: 88: INTCONbits.GIEH = 1;
   684  000D18  8EF2               	bsf	intcon,7,c	;volatile
   685                           
   686                           ;main.c: 89: flag_t = 1;
   687  000D1A  803F               	bsf	_flag_t/(0+8),_flag_t& (0+7),c
   688                           
   689                           ;main.c: 90: flagStatus = 0;
   690  000D1C  0E00               	movlw	0
   691  000D1E  6E39               	movwf	_flagStatus,c
   692  000D20  0012               	return		;funcret
   693  000D22                     __end_of_setup:
   694                           	opt stack 0
   695                           tblptru	equ	0xFF8
   696                           tblptrh	equ	0xFF7
   697                           tblptrl	equ	0xFF6
   698                           tablat	equ	0xFF5
   699                           prodh	equ	0xFF4
   700                           prodl	equ	0xFF3
   701                           intcon	equ	0xFF2
   702                           intcon2	equ	0xFF1
   703                           postinc0	equ	0xFEE
   704                           wreg	equ	0xFE8
   705                           indf2	equ	0xFDF
   706                           fsr2h	equ	0xFDA
   707                           fsr2l	equ	0xFD9
   708                           status	equ	0xFD8
   709                           
   710 ;; *************** function _make_disp_time *****************
   711 ;; Defined at:
   712 ;;		line 115 in file "main.c"
   713 ;; Parameters:    Size  Location     Type
   714 ;;  ptr             2   36[COMRAM] PTR unsigned char 
   715 ;;		 -> main@Display(8), 
   716 ;;  tm_ptr          2   38[COMRAM] PTR struct .
   717 ;;		 -> clock(4), 
   718 ;; Auto vars:     Size  Location     Type
   719 ;;  k               1   46[COMRAM] unsigned char 
   720 ;;  j               1   45[COMRAM] unsigned char 
   721 ;;  i               1   44[COMRAM] unsigned char 
   722 ;; Return value:  Size  Location     Type
   723 ;;                  1    wreg      void 
   724 ;; Registers used:
   725 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   726 ;; Tracked objects:
   727 ;;		On entry : 0/0
   728 ;;		On exit  : 0/0
   729 ;;		Unchanged: 0/0
   730 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   731 ;;      Params:         4       0       0       0       0       0       0       0       0
   732 ;;      Locals:         5       0       0       0       0       0       0       0       0
   733 ;;      Temps:          2       0       0       0       0       0       0       0       0
   734 ;;      Totals:        11       0       0       0       0       0       0       0       0
   735 ;;Total ram usage:       11 bytes
   736 ;; Hardware stack levels used:    1
   737 ;; Hardware stack levels required when called:    5
   738 ;; This function calls:
   739 ;;		_num_to_arr_num
   740 ;; This function is called by:
   741 ;;		_main
   742 ;; This function uses a non-reentrant model
   743 ;;
   744                           
   745                           	psect	text4
   746  000810                     __ptext4:
   747                           	opt stack 0
   748  000810                     _make_disp_time:
   749                           	opt stack 25
   750                           
   751                           ;main.c: 116: num_to_arr_num(ptr,tm_ptr->seg,2);
   752                           
   753                           ;incstack = 0
   754  000810  C025  F020         	movff	make_disp_time@ptr,num_to_arr_num@ptr
   755  000814  C026  F021         	movff	make_disp_time@ptr+1,num_to_arr_num@ptr+1
   756  000818  C027  FFD9         	movff	make_disp_time@tm_ptr,fsr2l
   757  00081C  C028  FFDA         	movff	make_disp_time@tm_ptr+1,fsr2h
   758  000820  50DF               	movf	indf2,w,c
   759  000822  6E29               	movwf	??_make_disp_time& (0+255),c
   760  000824  5029               	movf	??_make_disp_time,w,c
   761  000826  6E22               	movwf	num_to_arr_num@num,c
   762  000828  6A23               	clrf	num_to_arr_num@num+1,c
   763  00082A  0E02               	movlw	2
   764  00082C  6E24               	movwf	num_to_arr_num@len,c
   765  00082E  EC88  F005         	call	_num_to_arr_num	;wreg free
   766                           
   767                           ;main.c: 117: num_to_arr_num(ptr+3,tm_ptr->min,2);
   768  000832  0E03               	movlw	3
   769  000834  2425               	addwf	make_disp_time@ptr,w,c
   770  000836  6E20               	movwf	num_to_arr_num@ptr,c
   771  000838  0E00               	movlw	0
   772  00083A  2026               	addwfc	make_disp_time@ptr+1,w,c
   773  00083C  6E21               	movwf	num_to_arr_num@ptr+1,c
   774  00083E  EE20 F001          	lfsr	2,1
   775  000842  5027               	movf	make_disp_time@tm_ptr,w,c
   776  000844  26D9               	addwf	fsr2l,f,c
   777  000846  5028               	movf	make_disp_time@tm_ptr+1,w,c
   778  000848  22DA               	addwfc	fsr2h,f,c
   779  00084A  50DF               	movf	indf2,w,c
   780  00084C  6E29               	movwf	??_make_disp_time& (0+255),c
   781  00084E  5029               	movf	??_make_disp_time,w,c
   782  000850  6E22               	movwf	num_to_arr_num@num,c
   783  000852  6A23               	clrf	num_to_arr_num@num+1,c
   784  000854  0E02               	movlw	2
   785  000856  6E24               	movwf	num_to_arr_num@len,c
   786  000858  EC88  F005         	call	_num_to_arr_num	;wreg free
   787                           
   788                           ;main.c: 118: num_to_arr_num(ptr+6,tm_ptr->hour,2);
   789  00085C  0E06               	movlw	6
   790  00085E  2425               	addwf	make_disp_time@ptr,w,c
   791  000860  6E20               	movwf	num_to_arr_num@ptr,c
   792  000862  0E00               	movlw	0
   793  000864  2026               	addwfc	make_disp_time@ptr+1,w,c
   794  000866  6E21               	movwf	num_to_arr_num@ptr+1,c
   795  000868  EE20 F002          	lfsr	2,2
   796  00086C  5027               	movf	make_disp_time@tm_ptr,w,c
   797  00086E  26D9               	addwf	fsr2l,f,c
   798  000870  5028               	movf	make_disp_time@tm_ptr+1,w,c
   799  000872  22DA               	addwfc	fsr2h,f,c
   800  000874  50DF               	movf	indf2,w,c
   801  000876  6E29               	movwf	??_make_disp_time& (0+255),c
   802  000878  5029               	movf	??_make_disp_time,w,c
   803  00087A  6E22               	movwf	num_to_arr_num@num,c
   804  00087C  6A23               	clrf	num_to_arr_num@num+1,c
   805  00087E  0E02               	movlw	2
   806  000880  6E24               	movwf	num_to_arr_num@len,c
   807  000882  EC88  F005         	call	_num_to_arr_num	;wreg free
   808                           
   809                           ;main.c: 119: *(ptr + 2) = *(ptr + 5) = tm_ptr->blink? 10:11;
   810  000886  EE20 F003          	lfsr	2,3
   811  00088A  5027               	movf	make_disp_time@tm_ptr,w,c
   812  00088C  26D9               	addwf	fsr2l,f,c
   813  00088E  5028               	movf	make_disp_time@tm_ptr+1,w,c
   814  000890  22DA               	addwfc	fsr2h,f,c
   815  000892  50DF               	movf	indf2,w,c
   816  000894  A4D8               	btfss	status,2,c
   817  000896  D004               	goto	l118
   818  000898  0E00               	movlw	0
   819  00089A  6E2C               	movwf	_make_disp_time$499+1,c
   820  00089C  0E0B               	movlw	11
   821  00089E  D003               	goto	L2
   822  0008A0                     l118:
   823  0008A0  0E00               	movlw	0
   824  0008A2  6E2C               	movwf	_make_disp_time$499+1,c
   825  0008A4  0E0A               	movlw	10
   826  0008A6                     L2:
   827  0008A6  6E2B               	movwf	_make_disp_time$499,c
   828  0008A8  EE20 F005          	lfsr	2,5
   829  0008AC  5025               	movf	make_disp_time@ptr,w,c
   830  0008AE  26D9               	addwf	fsr2l,f,c
   831  0008B0  5026               	movf	make_disp_time@ptr+1,w,c
   832  0008B2  22DA               	addwfc	fsr2h,f,c
   833  0008B4  C02B  FFDF         	movff	_make_disp_time$499,indf2
   834  0008B8  EE10 F002          	lfsr	1,2
   835  0008BC  5025               	movf	make_disp_time@ptr,w,c
   836  0008BE  26E1               	addwf	fsr1l,f,c
   837  0008C0  5026               	movf	make_disp_time@ptr+1,w,c
   838  0008C2  22E2               	addwfc	fsr1h,f,c
   839  0008C4  CFDF FFE7          	movff	indf2,indf1
   840                           
   841                           ;main.c: 120: if(flagStatus && tm_ptr->blink)
   842  0008C8  5039               	movf	_flagStatus,w,c
   843  0008CA  B4D8               	btfsc	status,2,c
   844  0008CC  0012               	return	
   845  0008CE  EE20 F003          	lfsr	2,3
   846  0008D2  5027               	movf	make_disp_time@tm_ptr,w,c
   847  0008D4  26D9               	addwf	fsr2l,f,c
   848  0008D6  5028               	movf	make_disp_time@tm_ptr+1,w,c
   849  0008D8  22DA               	addwfc	fsr2h,f,c
   850  0008DA  50DF               	movf	indf2,w,c
   851  0008DC  B4D8               	btfsc	status,2,c
   852  0008DE  0012               	return	
   853                           
   854                           ;main.c: 121: for(char i = 0,j=1;j<=0x04;i+=3,j<<=1)
   855  0008E0  0E00               	movlw	0
   856  0008E2  6E2D               	movwf	make_disp_time@i,c
   857  0008E4  0E01               	movlw	1
   858  0008E6  6E2E               	movwf	make_disp_time@j,c
   859  0008E8                     l1135:
   860  0008E8  0E04               	movlw	4
   861  0008EA  642E               	cpfsgt	make_disp_time@j,c
   862  0008EC  D001               	goto	l122
   863  0008EE  0012               	return	
   864  0008F0                     l122:
   865                           
   866                           ;main.c: 122: if(j == flagStatus)
   867  0008F0  5039               	movf	_flagStatus,w,c
   868  0008F2  182E               	xorwf	make_disp_time@j,w,c
   869  0008F4  A4D8               	btfss	status,2,c
   870  0008F6  D01C               	goto	u620
   871                           
   872                           ;main.c: 123: for (char k = 0; k < 2; k++)
   873  0008F8  0E00               	movlw	0
   874  0008FA  6E2F               	movwf	make_disp_time@k,c
   875  0008FC                     l1143:
   876  0008FC  0E01               	movlw	1
   877  0008FE  642F               	cpfsgt	make_disp_time@k,c
   878  000900  D001               	goto	l125
   879  000902  D016               	goto	u620
   880  000904                     l125:
   881                           
   882                           ;main.c: 124: *(ptr + i + k) +=12;
   883  000904  502D               	movf	make_disp_time@i,w,c
   884  000906  0D01               	mullw	1
   885  000908  C025  F029         	movff	make_disp_time@ptr,??_make_disp_time
   886  00090C  C026  F02A         	movff	make_disp_time@ptr+1,??_make_disp_time+1
   887  000910  50F3               	movf	prodl,w,c
   888  000912  2629               	addwf	??_make_disp_time,f,c
   889  000914  50F4               	movf	prodh,w,c
   890  000916  222A               	addwfc	??_make_disp_time+1,f,c
   891  000918  502F               	movf	make_disp_time@k,w,c
   892  00091A  0D01               	mullw	1
   893  00091C  50F3               	movf	prodl,w,c
   894  00091E  2429               	addwf	??_make_disp_time,w,c
   895  000920  6ED9               	movwf	fsr2l,c
   896  000922  50F4               	movf	prodh,w,c
   897  000924  202A               	addwfc	??_make_disp_time+1,w,c
   898  000926  6EDA               	movwf	fsr2h,c
   899  000928  0E0C               	movlw	12
   900  00092A  26DF               	addwf	indf2,f,c
   901  00092C  2A2F               	incf	make_disp_time@k,f,c
   902  00092E  D7E6               	goto	l1143
   903  000930                     u620:
   904  000930  0E03               	movlw	3
   905  000932  262D               	addwf	make_disp_time@i,f,c
   906  000934  90D8               	bcf	status,0,c
   907  000936  362E               	rlcf	make_disp_time@j,f,c
   908  000938  D7D7               	goto	l1135
   909  00093A                     __end_of_make_disp_time:
   910                           	opt stack 0
   911                           tblptru	equ	0xFF8
   912                           tblptrh	equ	0xFF7
   913                           tblptrl	equ	0xFF6
   914                           tablat	equ	0xFF5
   915                           prodh	equ	0xFF4
   916                           prodl	equ	0xFF3
   917                           intcon	equ	0xFF2
   918                           intcon2	equ	0xFF1
   919                           postinc0	equ	0xFEE
   920                           wreg	equ	0xFE8
   921                           indf1	equ	0xFE7
   922                           fsr1h	equ	0xFE2
   923                           fsr1l	equ	0xFE1
   924                           indf2	equ	0xFDF
   925                           fsr2h	equ	0xFDA
   926                           fsr2l	equ	0xFD9
   927                           status	equ	0xFD8
   928                           
   929 ;; *************** function _num_to_arr_num *****************
   930 ;; Defined at:
   931 ;;		line 92 in file "main.c"
   932 ;; Parameters:    Size  Location     Type
   933 ;;  ptr             2   31[COMRAM] PTR unsigned char 
   934 ;;		 -> main@Display(8), 
   935 ;;  num             2   33[COMRAM] unsigned int 
   936 ;;  len             1   35[COMRAM] unsigned char 
   937 ;; Auto vars:     Size  Location     Type
   938 ;;		None
   939 ;; Return value:  Size  Location     Type
   940 ;;                  1    wreg      void 
   941 ;; Registers used:
   942 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   943 ;; Tracked objects:
   944 ;;		On entry : 0/0
   945 ;;		On exit  : 0/0
   946 ;;		Unchanged: 0/0
   947 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   948 ;;      Params:         5       0       0       0       0       0       0       0       0
   949 ;;      Locals:         0       0       0       0       0       0       0       0       0
   950 ;;      Temps:          0       0       0       0       0       0       0       0       0
   951 ;;      Totals:         5       0       0       0       0       0       0       0       0
   952 ;;Total ram usage:        5 bytes
   953 ;; Hardware stack levels used:    1
   954 ;; Hardware stack levels required when called:    4
   955 ;; This function calls:
   956 ;;		___lwdiv
   957 ;;		___lwmod
   958 ;; This function is called by:
   959 ;;		_make_disp_time
   960 ;; This function uses a non-reentrant model
   961 ;;
   962                           
   963                           	psect	text5
   964  000B10                     __ptext5:
   965                           	opt stack 0
   966  000B10                     _num_to_arr_num:
   967                           	opt stack 25
   968                           
   969                           ;main.c: 93: for(;len;*(ptr + --len)=0);
   970                           
   971                           ;incstack = 0
   972  000B10  D00B               	goto	l93
   973  000B12  0624               	decf	num_to_arr_num@len,f,c
   974  000B14  5024               	movf	num_to_arr_num@len,w,c
   975  000B16  0D01               	mullw	1
   976  000B18  50F3               	movf	prodl,w,c
   977  000B1A  2420               	addwf	num_to_arr_num@ptr,w,c
   978  000B1C  6ED9               	movwf	fsr2l,c
   979  000B1E  50F4               	movf	prodh,w,c
   980  000B20  2021               	addwfc	num_to_arr_num@ptr+1,w,c
   981  000B22  6EDA               	movwf	fsr2h,c
   982  000B24  0E00               	movlw	0
   983  000B26  6EDF               	movwf	indf2,c
   984  000B28                     l93:
   985  000B28  5024               	movf	num_to_arr_num@len,w,c
   986  000B2A  A4D8               	btfss	status,2,c
   987  000B2C  D7F2               	goto	l94
   988  000B2E                     u510:
   989                           
   990                           ;main.c: 94: for(;num>9;*ptr++ = num%10,num/=10);
   991  000B2E  5023               	movf	num_to_arr_num@num+1,w,c
   992  000B30  E104               	bnz	l1103
   993  000B32  0E0A               	movlw	10
   994  000B34  5C22               	subwf	num_to_arr_num@num,w,c
   995  000B36  A0D8               	btfss	status,0,c
   996  000B38  D021               	goto	u530
   997  000B3A                     l1103:
   998  000B3A  C022  F019         	movff	num_to_arr_num@num,___lwmod@dividend
   999  000B3E  C023  F01A         	movff	num_to_arr_num@num+1,___lwmod@dividend+1
  1000  000B42  0E00               	movlw	0
  1001  000B44  6E1C               	movwf	___lwmod@divisor+1,c
  1002  000B46  0E0A               	movlw	10
  1003  000B48  6E1B               	movwf	___lwmod@divisor,c
  1004  000B4A  EC34  F006         	call	___lwmod	;wreg free
  1005  000B4E  5019               	movf	?___lwmod,w,c
  1006  000B50  C020  FFD9         	movff	num_to_arr_num@ptr,fsr2l
  1007  000B54  C021  FFDA         	movff	num_to_arr_num@ptr+1,fsr2h
  1008  000B58  6EDF               	movwf	indf2,c
  1009  000B5A  4A20               	infsnz	num_to_arr_num@ptr,f,c
  1010  000B5C  2A21               	incf	num_to_arr_num@ptr+1,f,c
  1011  000B5E  C022  F019         	movff	num_to_arr_num@num,___lwdiv@dividend
  1012  000B62  C023  F01A         	movff	num_to_arr_num@num+1,___lwdiv@dividend+1
  1013  000B66  0E00               	movlw	0
  1014  000B68  6E1C               	movwf	___lwdiv@divisor+1,c
  1015  000B6A  0E0A               	movlw	10
  1016  000B6C  6E1B               	movwf	___lwdiv@divisor,c
  1017  000B6E  EC0B  F006         	call	___lwdiv	;wreg free
  1018  000B72  C019  F022         	movff	?___lwdiv,num_to_arr_num@num
  1019  000B76  C01A  F023         	movff	?___lwdiv+1,num_to_arr_num@num+1
  1020  000B7A  D7D9               	goto	u510
  1021  000B7C                     u530:
  1022                           
  1023                           ;main.c: 95: *ptr = num%10;
  1024  000B7C  C022  F019         	movff	num_to_arr_num@num,___lwmod@dividend
  1025  000B80  C023  F01A         	movff	num_to_arr_num@num+1,___lwmod@dividend+1
  1026  000B84  0E00               	movlw	0
  1027  000B86  6E1C               	movwf	___lwmod@divisor+1,c
  1028  000B88  0E0A               	movlw	10
  1029  000B8A  6E1B               	movwf	___lwmod@divisor,c
  1030  000B8C  EC34  F006         	call	___lwmod	;wreg free
  1031  000B90  5019               	movf	?___lwmod,w,c
  1032  000B92  C020  FFD9         	movff	num_to_arr_num@ptr,fsr2l
  1033  000B96  C021  FFDA         	movff	num_to_arr_num@ptr+1,fsr2h
  1034  000B9A  6EDF               	movwf	indf2,c
  1035  000B9C  0012               	return		;funcret
  1036  000B9E                     __end_of_num_to_arr_num:
  1037                           	opt stack 0
  1038                           tblptru	equ	0xFF8
  1039                           tblptrh	equ	0xFF7
  1040                           tblptrl	equ	0xFF6
  1041                           tablat	equ	0xFF5
  1042                           prodh	equ	0xFF4
  1043                           prodl	equ	0xFF3
  1044                           intcon	equ	0xFF2
  1045                           intcon2	equ	0xFF1
  1046                           postinc0	equ	0xFEE
  1047                           wreg	equ	0xFE8
  1048                           indf1	equ	0xFE7
  1049                           fsr1h	equ	0xFE2
  1050                           fsr1l	equ	0xFE1
  1051                           indf2	equ	0xFDF
  1052                           fsr2h	equ	0xFDA
  1053                           fsr2l	equ	0xFD9
  1054                           status	equ	0xFD8
  1055                           
  1056 ;; *************** function ___lwmod *****************
  1057 ;; Defined at:
  1058 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
  1059 ;; Parameters:    Size  Location     Type
  1060 ;;  dividend        2   24[COMRAM] unsigned int 
  1061 ;;  divisor         2   26[COMRAM] unsigned int 
  1062 ;; Auto vars:     Size  Location     Type
  1063 ;;  counter         1   28[COMRAM] unsigned char 
  1064 ;; Return value:  Size  Location     Type
  1065 ;;                  2   24[COMRAM] unsigned int 
  1066 ;; Registers used:
  1067 ;;		wreg, status,2, status,0
  1068 ;; Tracked objects:
  1069 ;;		On entry : 0/0
  1070 ;;		On exit  : 0/0
  1071 ;;		Unchanged: 0/0
  1072 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1073 ;;      Params:         4       0       0       0       0       0       0       0       0
  1074 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1075 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1076 ;;      Totals:         5       0       0       0       0       0       0       0       0
  1077 ;;Total ram usage:        5 bytes
  1078 ;; Hardware stack levels used:    1
  1079 ;; Hardware stack levels required when called:    3
  1080 ;; This function calls:
  1081 ;;		Nothing
  1082 ;; This function is called by:
  1083 ;;		_num_to_arr_num
  1084 ;; This function uses a non-reentrant model
  1085 ;;
  1086                           
  1087                           	psect	text6
  1088  000C68                     __ptext6:
  1089                           	opt stack 0
  1090  000C68                     ___lwmod:
  1091                           	opt stack 25
  1092                           
  1093                           ;incstack = 0
  1094  000C68  501B               	movf	___lwmod@divisor,w,c
  1095  000C6A  101C               	iorwf	___lwmod@divisor+1,w,c
  1096  000C6C  B4D8               	btfsc	status,2,c
  1097  000C6E  D018               	goto	l562
  1098  000C70  0E01               	movlw	1
  1099  000C72  6E1D               	movwf	___lwmod@counter,c
  1100  000C74  D004               	goto	l557
  1101  000C76  90D8               	bcf	status,0,c
  1102  000C78  361B               	rlcf	___lwmod@divisor,f,c
  1103  000C7A  361C               	rlcf	___lwmod@divisor+1,f,c
  1104  000C7C  2A1D               	incf	___lwmod@counter,f,c
  1105  000C7E                     l557:
  1106  000C7E  AE1C               	btfss	___lwmod@divisor+1,7,c
  1107  000C80  D7FA               	goto	l558
  1108  000C82                     u460:
  1109  000C82  501B               	movf	___lwmod@divisor,w,c
  1110  000C84  5C19               	subwf	___lwmod@dividend,w,c
  1111  000C86  501C               	movf	___lwmod@divisor+1,w,c
  1112  000C88  581A               	subwfb	___lwmod@dividend+1,w,c
  1113  000C8A  A0D8               	btfss	status,0,c
  1114  000C8C  D004               	goto	l561
  1115  000C8E  501B               	movf	___lwmod@divisor,w,c
  1116  000C90  5E19               	subwf	___lwmod@dividend,f,c
  1117  000C92  501C               	movf	___lwmod@divisor+1,w,c
  1118  000C94  5A1A               	subwfb	___lwmod@dividend+1,f,c
  1119  000C96                     l561:
  1120  000C96  90D8               	bcf	status,0,c
  1121  000C98  321C               	rrcf	___lwmod@divisor+1,f,c
  1122  000C9A  321B               	rrcf	___lwmod@divisor,f,c
  1123  000C9C  2E1D               	decfsz	___lwmod@counter,f,c
  1124  000C9E  D7F1               	goto	u460
  1125  000CA0                     l562:
  1126  000CA0  C019  F019         	movff	___lwmod@dividend,?___lwmod
  1127  000CA4  C01A  F01A         	movff	___lwmod@dividend+1,?___lwmod+1
  1128  000CA8  0012               	return		;funcret
  1129  000CAA                     __end_of___lwmod:
  1130                           	opt stack 0
  1131                           tblptru	equ	0xFF8
  1132                           tblptrh	equ	0xFF7
  1133                           tblptrl	equ	0xFF6
  1134                           tablat	equ	0xFF5
  1135                           prodh	equ	0xFF4
  1136                           prodl	equ	0xFF3
  1137                           intcon	equ	0xFF2
  1138                           intcon2	equ	0xFF1
  1139                           postinc0	equ	0xFEE
  1140                           wreg	equ	0xFE8
  1141                           indf1	equ	0xFE7
  1142                           fsr1h	equ	0xFE2
  1143                           fsr1l	equ	0xFE1
  1144                           indf2	equ	0xFDF
  1145                           fsr2h	equ	0xFDA
  1146                           fsr2l	equ	0xFD9
  1147                           status	equ	0xFD8
  1148                           
  1149 ;; *************** function ___lwdiv *****************
  1150 ;; Defined at:
  1151 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
  1152 ;; Parameters:    Size  Location     Type
  1153 ;;  dividend        2   24[COMRAM] unsigned int 
  1154 ;;  divisor         2   26[COMRAM] unsigned int 
  1155 ;; Auto vars:     Size  Location     Type
  1156 ;;  quotient        2   28[COMRAM] unsigned int 
  1157 ;;  counter         1   30[COMRAM] unsigned char 
  1158 ;; Return value:  Size  Location     Type
  1159 ;;                  2   24[COMRAM] unsigned int 
  1160 ;; Registers used:
  1161 ;;		wreg, status,2, status,0
  1162 ;; Tracked objects:
  1163 ;;		On entry : 0/0
  1164 ;;		On exit  : 0/0
  1165 ;;		Unchanged: 0/0
  1166 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1167 ;;      Params:         4       0       0       0       0       0       0       0       0
  1168 ;;      Locals:         3       0       0       0       0       0       0       0       0
  1169 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1170 ;;      Totals:         7       0       0       0       0       0       0       0       0
  1171 ;;Total ram usage:        7 bytes
  1172 ;; Hardware stack levels used:    1
  1173 ;; Hardware stack levels required when called:    3
  1174 ;; This function calls:
  1175 ;;		Nothing
  1176 ;; This function is called by:
  1177 ;;		_num_to_arr_num
  1178 ;; This function uses a non-reentrant model
  1179 ;;
  1180                           
  1181                           	psect	text7
  1182  000C16                     __ptext7:
  1183                           	opt stack 0
  1184  000C16                     ___lwdiv:
  1185                           	opt stack 25
  1186                           
  1187                           ;incstack = 0
  1188  000C16  0E00               	movlw	0
  1189  000C18  6E1E               	movwf	___lwdiv@quotient+1,c
  1190  000C1A  0E00               	movlw	0
  1191  000C1C  6E1D               	movwf	___lwdiv@quotient,c
  1192  000C1E  501B               	movf	___lwdiv@divisor,w,c
  1193  000C20  101C               	iorwf	___lwdiv@divisor+1,w,c
  1194  000C22  B4D8               	btfsc	status,2,c
  1195  000C24  D01C               	goto	l552
  1196  000C26  0E01               	movlw	1
  1197  000C28  6E1F               	movwf	___lwdiv@counter,c
  1198  000C2A  D004               	goto	l547
  1199  000C2C  90D8               	bcf	status,0,c
  1200  000C2E  361B               	rlcf	___lwdiv@divisor,f,c
  1201  000C30  361C               	rlcf	___lwdiv@divisor+1,f,c
  1202  000C32  2A1F               	incf	___lwdiv@counter,f,c
  1203  000C34                     l547:
  1204  000C34  AE1C               	btfss	___lwdiv@divisor+1,7,c
  1205  000C36  D7FA               	goto	l548
  1206  000C38                     u430:
  1207  000C38  90D8               	bcf	status,0,c
  1208  000C3A  361D               	rlcf	___lwdiv@quotient,f,c
  1209  000C3C  361E               	rlcf	___lwdiv@quotient+1,f,c
  1210  000C3E  501B               	movf	___lwdiv@divisor,w,c
  1211  000C40  5C19               	subwf	___lwdiv@dividend,w,c
  1212  000C42  501C               	movf	___lwdiv@divisor+1,w,c
  1213  000C44  581A               	subwfb	___lwdiv@dividend+1,w,c
  1214  000C46  A0D8               	btfss	status,0,c
  1215  000C48  D005               	goto	l551
  1216  000C4A  501B               	movf	___lwdiv@divisor,w,c
  1217  000C4C  5E19               	subwf	___lwdiv@dividend,f,c
  1218  000C4E  501C               	movf	___lwdiv@divisor+1,w,c
  1219  000C50  5A1A               	subwfb	___lwdiv@dividend+1,f,c
  1220  000C52  801D               	bsf	___lwdiv@quotient,0,c
  1221  000C54                     l551:
  1222  000C54  90D8               	bcf	status,0,c
  1223  000C56  321C               	rrcf	___lwdiv@divisor+1,f,c
  1224  000C58  321B               	rrcf	___lwdiv@divisor,f,c
  1225  000C5A  2E1F               	decfsz	___lwdiv@counter,f,c
  1226  000C5C  D7ED               	goto	u430
  1227  000C5E                     l552:
  1228  000C5E  C01D  F019         	movff	___lwdiv@quotient,?___lwdiv
  1229  000C62  C01E  F01A         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1230  000C66  0012               	return		;funcret
  1231  000C68                     __end_of___lwdiv:
  1232                           	opt stack 0
  1233                           tblptru	equ	0xFF8
  1234                           tblptrh	equ	0xFF7
  1235                           tblptrl	equ	0xFF6
  1236                           tablat	equ	0xFF5
  1237                           prodh	equ	0xFF4
  1238                           prodl	equ	0xFF3
  1239                           intcon	equ	0xFF2
  1240                           intcon2	equ	0xFF1
  1241                           postinc0	equ	0xFEE
  1242                           wreg	equ	0xFE8
  1243                           indf1	equ	0xFE7
  1244                           fsr1h	equ	0xFE2
  1245                           fsr1l	equ	0xFE1
  1246                           indf2	equ	0xFDF
  1247                           fsr2h	equ	0xFDA
  1248                           fsr2l	equ	0xFD9
  1249                           status	equ	0xFD8
  1250                           
  1251 ;; *************** function _ISR *****************
  1252 ;; Defined at:
  1253 ;;		line 28 in file "main.c"
  1254 ;; Parameters:    Size  Location     Type
  1255 ;;		None
  1256 ;; Auto vars:     Size  Location     Type
  1257 ;;		None
  1258 ;; Return value:  Size  Location     Type
  1259 ;;                  1    wreg      void 
  1260 ;; Registers used:
  1261 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1262 ;; Tracked objects:
  1263 ;;		On entry : 0/0
  1264 ;;		On exit  : 0/0
  1265 ;;		Unchanged: 0/0
  1266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1267 ;;      Params:         0       0       0       0       0       0       0       0       0
  1268 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1269 ;;      Temps:         18       0       0       0       0       0       0       0       0
  1270 ;;      Totals:        18       0       0       0       0       0       0       0       0
  1271 ;;Total ram usage:       18 bytes
  1272 ;; Hardware stack levels used:    1
  1273 ;; Hardware stack levels required when called:    2
  1274 ;; This function calls:
  1275 ;;		_pp_time
  1276 ;;		_pp_tm
  1277 ;; This function is called by:
  1278 ;;		Interrupt level 2
  1279 ;; This function uses a non-reentrant model
  1280 ;;
  1281                           
  1282                           	psect	intcode
  1283  000008                     __pintcode:
  1284                           	opt stack 0
  1285  000008                     _ISR:
  1286                           	opt stack 25
  1287                           
  1288                           ;incstack = 0
  1289  000008  8240               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  1290  00000A  ED9D  F004         	call	int_func,f	;refresh shadow registers
  1291                           tblptru	equ	0xFF8
  1292                           tblptrh	equ	0xFF7
  1293                           tblptrl	equ	0xFF6
  1294                           tablat	equ	0xFF5
  1295                           prodh	equ	0xFF4
  1296                           prodl	equ	0xFF3
  1297                           intcon	equ	0xFF2
  1298                           intcon2	equ	0xFF1
  1299                           postinc0	equ	0xFEE
  1300                           wreg	equ	0xFE8
  1301                           indf1	equ	0xFE7
  1302                           fsr1h	equ	0xFE2
  1303                           fsr1l	equ	0xFE1
  1304                           indf2	equ	0xFDF
  1305                           fsr2h	equ	0xFDA
  1306                           fsr2l	equ	0xFD9
  1307                           status	equ	0xFD8
  1308                           
  1309                           	psect	intcode_body
  1310  00093A                     __pintcode_body:
  1311                           	opt stack 25
  1312  00093A                     int_func:
  1313                           	opt stack 25
  1314  00093A  0006               	pop		; remove dummy address from shadow register refresh
  1315  00093C  CFFA F007          	movff	pclath,??_ISR
  1316  000940  CFFB F008          	movff	pclatu,??_ISR+1
  1317  000944  CFE9 F009          	movff	fsr0l,??_ISR+2
  1318  000948  CFEA F00A          	movff	fsr0h,??_ISR+3
  1319  00094C  CFE1 F00B          	movff	fsr1l,??_ISR+4
  1320  000950  CFE2 F00C          	movff	fsr1h,??_ISR+5
  1321  000954  CFD9 F00D          	movff	fsr2l,??_ISR+6
  1322  000958  CFDA F00E          	movff	fsr2h,??_ISR+7
  1323  00095C  CFF3 F00F          	movff	prodl,??_ISR+8
  1324  000960  CFF4 F010          	movff	prodh,??_ISR+9
  1325  000964  CFF6 F011          	movff	tblptrl,??_ISR+10
  1326  000968  CFF7 F012          	movff	tblptrh,??_ISR+11
  1327  00096C  CFF8 F013          	movff	tblptru,??_ISR+12
  1328  000970  CFF5 F014          	movff	tablat,??_ISR+13
  1329  000974  C040  F015         	movff	btemp,??_ISR+14
  1330  000978  C041  F016         	movff	btemp+1,??_ISR+15
  1331  00097C  C042  F017         	movff	btemp+2,??_ISR+16
  1332  000980  C043  F018         	movff	btemp+3,??_ISR+17
  1333                           
  1334                           ;main.c: 29: if(PIR1bits.TMR1IF){
  1335  000984  A09E               	btfss	3998,0,c	;volatile
  1336  000986  D00B               	goto	i2l68
  1337                           
  1338                           ;main.c: 30: TMR1H |= 0x80;
  1339  000988  8ECF               	bsf	4047,7,c	;volatile
  1340                           
  1341                           ;main.c: 31: PIR1bits.TMR1IF = 0;
  1342  00098A  909E               	bcf	3998,0,c	;volatile
  1343                           
  1344                           ;main.c: 32: if(!flagStatus)
  1345  00098C  5039               	movf	_flagStatus,w,c
  1346  00098E  A4D8               	btfss	status,2,c
  1347  000990  D006               	goto	i2l68
  1348                           
  1349                           ;main.c: 33: pp_time(&clock);
  1350  000992  0E3B               	movlw	low _clock
  1351  000994  6E05               	movwf	pp_time@tm_ptr,c
  1352  000996  0E00               	movlw	high _clock
  1353  000998  6E06               	movwf	pp_time@tm_ptr+1,c
  1354  00099A  EC55  F006         	call	_pp_time	;wreg free
  1355  00099E                     i2l68:
  1356                           
  1357                           ;main.c: 34: }
  1358                           ;main.c: 35: if(INTCONbits.TMR0IF){
  1359  00099E  A4F2               	btfss	intcon,2,c	;volatile
  1360  0009A0  D012               	goto	i2l70
  1361                           
  1362                           ;main.c: 36: TMR0L = 0x78;
  1363  0009A2  0E78               	movlw	120
  1364  0009A4  6ED6               	movwf	4054,c	;volatile
  1365                           
  1366                           ;main.c: 37: TMR0H = 0xEC;
  1367  0009A6  0EEC               	movlw	236
  1368  0009A8  6ED7               	movwf	4055,c	;volatile
  1369                           
  1370                           ;main.c: 38: INTCONbits.TMR0IF = 0;
  1371  0009AA  94F2               	bcf	intcon,2,c	;volatile
  1372                           
  1373                           ;main.c: 39: flag_t = 1;
  1374  0009AC  803F               	bsf	_flag_t/(0+8),_flag_t& (0+7),c
  1375                           
  1376                           ;main.c: 40: ++count_rbnd;
  1377  0009AE  2A38               	incf	_count_rbnd,f,c
  1378                           
  1379                           ;main.c: 41: if(count++)
  1380  0009B0  2A3A               	incf	_count,f,c
  1381  0009B2  043A               	decf	_count,w,c
  1382  0009B4  B4D8               	btfsc	status,2,c
  1383  0009B6  D007               	goto	i2l70
  1384                           
  1385                           ;main.c: 42: clock.blink = !clock.blink;
  1386  0009B8  503E               	movf	_clock+3,w,c
  1387  0009BA  A4D8               	btfss	status,2,c
  1388  0009BC  D002               	goto	i2u71_40
  1389  0009BE  0E01               	movlw	1
  1390  0009C0  D001               	goto	i2u72_40
  1391  0009C2                     i2u71_40:
  1392  0009C2  0E00               	movlw	0
  1393  0009C4                     i2u72_40:
  1394  0009C4  6E3E               	movwf	_clock+3,c
  1395  0009C6                     i2l70:
  1396                           
  1397                           ;main.c: 43: }
  1398                           ;main.c: 44: if(!PORTAbits.RA1 && count_rbnd>100){
  1399  0009C6  B280               	btfsc	3968,1,c	;volatile
  1400  0009C8  D015               	goto	i2l71
  1401  0009CA  0E64               	movlw	100
  1402  0009CC  6438               	cpfsgt	_count_rbnd,c
  1403  0009CE  D012               	goto	i2l71
  1404                           
  1405                           ;main.c: 45: count_rbnd = 0;
  1406  0009D0  0E00               	movlw	0
  1407  0009D2  6E38               	movwf	_count_rbnd,c
  1408  0009D4  A280               	btfss	3968,1,c	;volatile
  1409  0009D6  D7FE               	goto	i2l73
  1410                           
  1411                           ;main.c: 47: if(!flagStatus){
  1412  0009D8  5039               	movf	_flagStatus,w,c
  1413  0009DA  A4D8               	btfss	status,2,c
  1414  0009DC  D003               	goto	i2l75
  1415                           
  1416                           ;main.c: 48: PIE1bits.TMR1IE = 0;
  1417  0009DE  909D               	bcf	3997,0,c	;volatile
  1418                           
  1419                           ;main.c: 49: flagStatus = 0x01;
  1420  0009E0  0E01               	movlw	1
  1421  0009E2  D006               	goto	L3
  1422  0009E4                     i2l75:
  1423                           
  1424                           ;main.c: 51: flagStatus <<= 1;
  1425  0009E4  90D8               	bcf	status,0,c
  1426  0009E6  3639               	rlcf	_flagStatus,f,c
  1427                           
  1428                           ;main.c: 52: if(flagStatus & 0x08){
  1429  0009E8  A639               	btfss	_flagStatus,3,c
  1430  0009EA  D015               	goto	i2l79
  1431                           
  1432                           ;main.c: 53: PIE1bits.TMR1IE = 1;
  1433  0009EC  809D               	bsf	3997,0,c	;volatile
  1434                           
  1435                           ;main.c: 54: flagStatus = 0;
  1436  0009EE  0E00               	movlw	0
  1437  0009F0                     L3:
  1438  0009F0  6E39               	movwf	_flagStatus,c
  1439                           
  1440                           ;main.c: 55: }
  1441                           ;main.c: 56: }
  1442                           ;main.c: 57: }else if(flagStatus && !PORTAbits.RA5 && count_rbnd>100){
  1443  0009F2  D011               	goto	i2l79
  1444  0009F4                     i2l71:
  1445  0009F4  5039               	movf	_flagStatus,w,c
  1446  0009F6  A4D8               	btfss	status,2,c
  1447  0009F8  BA80               	btfsc	3968,5,c	;volatile
  1448  0009FA  D00D               	goto	i2l79
  1449  0009FC  0E64               	movlw	100
  1450  0009FE  6438               	cpfsgt	_count_rbnd,c
  1451  000A00  D00A               	goto	i2l79
  1452                           
  1453                           ;main.c: 58: count_rbnd = 0;
  1454  000A02  0E00               	movlw	0
  1455  000A04  6E38               	movwf	_count_rbnd,c
  1456                           
  1457                           ;main.c: 59: pp_tm(&clock,flagStatus);
  1458  000A06  0E3B               	movlw	low _clock
  1459  000A08  6E01               	movwf	pp_tm@tm_ptr,c
  1460  000A0A  0E00               	movlw	high _clock
  1461  000A0C  6E02               	movwf	pp_tm@tm_ptr+1,c
  1462  000A0E  C039  F003         	movff	_flagStatus,pp_tm@type
  1463  000A12  ECCF  F005         	call	_pp_tm	;wreg free
  1464  000A16                     i2l79:
  1465  000A16  C018  F043         	movff	??_ISR+17,btemp+3
  1466  000A1A  C017  F042         	movff	??_ISR+16,btemp+2
  1467  000A1E  C016  F041         	movff	??_ISR+15,btemp+1
  1468  000A22  C015  F040         	movff	??_ISR+14,btemp
  1469  000A26  C014  FFF5         	movff	??_ISR+13,tablat
  1470  000A2A  C013  FFF8         	movff	??_ISR+12,tblptru
  1471  000A2E  C012  FFF7         	movff	??_ISR+11,tblptrh
  1472  000A32  C011  FFF6         	movff	??_ISR+10,tblptrl
  1473  000A36  C010  FFF4         	movff	??_ISR+9,prodh
  1474  000A3A  C00F  FFF3         	movff	??_ISR+8,prodl
  1475  000A3E  C00E  FFDA         	movff	??_ISR+7,fsr2h
  1476  000A42  C00D  FFD9         	movff	??_ISR+6,fsr2l
  1477  000A46  C00C  FFE2         	movff	??_ISR+5,fsr1h
  1478  000A4A  C00B  FFE1         	movff	??_ISR+4,fsr1l
  1479  000A4E  C00A  FFEA         	movff	??_ISR+3,fsr0h
  1480  000A52  C009  FFE9         	movff	??_ISR+2,fsr0l
  1481  000A56  C008  FFFB         	movff	??_ISR+1,pclatu
  1482  000A5A  C007  FFFA         	movff	??_ISR,pclath
  1483  000A5E  9240               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  1484  000A60  0011               	retfie		f
  1485  000A62                     __end_of_ISR:
  1486                           	opt stack 0
  1487                           pclatu	equ	0xFFB
  1488                           pclath	equ	0xFFA
  1489                           tblptru	equ	0xFF8
  1490                           tblptrh	equ	0xFF7
  1491                           tblptrl	equ	0xFF6
  1492                           tablat	equ	0xFF5
  1493                           prodh	equ	0xFF4
  1494                           prodl	equ	0xFF3
  1495                           intcon	equ	0xFF2
  1496                           intcon2	equ	0xFF1
  1497                           postinc0	equ	0xFEE
  1498                           fsr0h	equ	0xFEA
  1499                           fsr0l	equ	0xFE9
  1500                           wreg	equ	0xFE8
  1501                           indf1	equ	0xFE7
  1502                           fsr1h	equ	0xFE2
  1503                           fsr1l	equ	0xFE1
  1504                           indf2	equ	0xFDF
  1505                           fsr2h	equ	0xFDA
  1506                           fsr2l	equ	0xFD9
  1507                           status	equ	0xFD8
  1508                           
  1509 ;; *************** function _pp_time *****************
  1510 ;; Defined at:
  1511 ;;		line 126 in file "main.c"
  1512 ;; Parameters:    Size  Location     Type
  1513 ;;  tm_ptr          2    4[COMRAM] PTR struct .
  1514 ;;		 -> clock(4), 
  1515 ;; Auto vars:     Size  Location     Type
  1516 ;;		None
  1517 ;; Return value:  Size  Location     Type
  1518 ;;                  1    wreg      void 
  1519 ;; Registers used:
  1520 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1521 ;; Tracked objects:
  1522 ;;		On entry : 0/0
  1523 ;;		On exit  : 0/0
  1524 ;;		Unchanged: 0/0
  1525 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1526 ;;      Params:         2       0       0       0       0       0       0       0       0
  1527 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1528 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1529 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1530 ;;Total ram usage:        2 bytes
  1531 ;; Hardware stack levels used:    1
  1532 ;; Hardware stack levels required when called:    1
  1533 ;; This function calls:
  1534 ;;		_pp_tm
  1535 ;; This function is called by:
  1536 ;;		_ISR
  1537 ;; This function uses a non-reentrant model
  1538 ;;
  1539                           
  1540                           	psect	text9
  1541  000CAA                     __ptext9:
  1542                           	opt stack 0
  1543  000CAA                     _pp_time:
  1544                           	opt stack 25
  1545                           
  1546                           ;main.c: 127: if(pp_tm(tm_ptr,1))
  1547                           
  1548                           ;incstack = 0
  1549  000CAA  C005  F001         	movff	pp_time@tm_ptr,pp_tm@tm_ptr
  1550  000CAE  C006  F002         	movff	pp_time@tm_ptr+1,pp_tm@tm_ptr+1
  1551  000CB2  0E01               	movlw	1
  1552  000CB4  6E03               	movwf	pp_tm@type,c
  1553  000CB6  ECCF  F005         	call	_pp_tm	;wreg free
  1554  000CBA  0900               	iorlw	0
  1555  000CBC  B4D8               	btfsc	status,2,c
  1556  000CBE  0012               	return	
  1557                           
  1558                           ;main.c: 128: if(pp_tm(tm_ptr,2))
  1559  000CC0  C005  F001         	movff	pp_time@tm_ptr,pp_tm@tm_ptr
  1560  000CC4  C006  F002         	movff	pp_time@tm_ptr+1,pp_tm@tm_ptr+1
  1561  000CC8  0E02               	movlw	2
  1562  000CCA  6E03               	movwf	pp_tm@type,c
  1563  000CCC  ECCF  F005         	call	_pp_tm	;wreg free
  1564  000CD0  0900               	iorlw	0
  1565  000CD2  B4D8               	btfsc	status,2,c
  1566  000CD4  0012               	return	
  1567                           
  1568                           ;main.c: 129: pp_tm(tm_ptr,4);
  1569  000CD6  C005  F001         	movff	pp_time@tm_ptr,pp_tm@tm_ptr
  1570  000CDA  C006  F002         	movff	pp_time@tm_ptr+1,pp_tm@tm_ptr+1
  1571  000CDE  0E04               	movlw	4
  1572  000CE0  6E03               	movwf	pp_tm@type,c
  1573  000CE2  ECCF  F005         	call	_pp_tm	;wreg free
  1574  000CE6  0012               	return	
  1575  000CE8                     __end_of_pp_time:
  1576                           	opt stack 0
  1577                           pclatu	equ	0xFFB
  1578                           pclath	equ	0xFFA
  1579                           tblptru	equ	0xFF8
  1580                           tblptrh	equ	0xFF7
  1581                           tblptrl	equ	0xFF6
  1582                           tablat	equ	0xFF5
  1583                           prodh	equ	0xFF4
  1584                           prodl	equ	0xFF3
  1585                           intcon	equ	0xFF2
  1586                           intcon2	equ	0xFF1
  1587                           postinc0	equ	0xFEE
  1588                           fsr0h	equ	0xFEA
  1589                           fsr0l	equ	0xFE9
  1590                           wreg	equ	0xFE8
  1591                           indf1	equ	0xFE7
  1592                           fsr1h	equ	0xFE2
  1593                           fsr1l	equ	0xFE1
  1594                           indf2	equ	0xFDF
  1595                           fsr2h	equ	0xFDA
  1596                           fsr2l	equ	0xFD9
  1597                           status	equ	0xFD8
  1598                           
  1599 ;; *************** function _pp_tm *****************
  1600 ;; Defined at:
  1601 ;;		line 131 in file "main.c"
  1602 ;; Parameters:    Size  Location     Type
  1603 ;;  tm_ptr          2    0[COMRAM] PTR struct .
  1604 ;;		 -> clock(4), 
  1605 ;;  type            1    2[COMRAM] unsigned char 
  1606 ;; Auto vars:     Size  Location     Type
  1607 ;;		None
  1608 ;; Return value:  Size  Location     Type
  1609 ;;                  1    wreg      unsigned char 
  1610 ;; Registers used:
  1611 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1612 ;; Tracked objects:
  1613 ;;		On entry : 0/0
  1614 ;;		On exit  : 0/0
  1615 ;;		Unchanged: 0/0
  1616 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1617 ;;      Params:         3       0       0       0       0       0       0       0       0
  1618 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1619 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1620 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1621 ;;Total ram usage:        4 bytes
  1622 ;; Hardware stack levels used:    1
  1623 ;; This function calls:
  1624 ;;		Nothing
  1625 ;; This function is called by:
  1626 ;;		_ISR
  1627 ;;		_pp_time
  1628 ;; This function uses a non-reentrant model
  1629 ;;
  1630                           
  1631                           	psect	text10
  1632  000B9E                     __ptext10:
  1633                           	opt stack 0
  1634  000B9E                     _pp_tm:
  1635                           	opt stack 26
  1636                           
  1637                           ;main.c: 132: switch (type) {
  1638                           
  1639                           ;incstack = 0
  1640  000B9E  D02F               	goto	i2l135
  1641  000BA0                     
  1642                           ;main.c: 134: if(++tm_ptr->seg>59){
  1643  000BA0  C001  FFD9         	movff	pp_tm@tm_ptr,fsr2l
  1644  000BA4  C002  FFDA         	movff	pp_tm@tm_ptr+1,fsr2h
  1645  000BA8  2ADF               	incf	indf2,f,c
  1646  000BAA  0E3B               	movlw	59
  1647  000BAC  64DF               	cpfsgt	indf2,c
  1648  000BAE  D031               	goto	i2l139
  1649                           
  1650                           ;main.c: 135: tm_ptr->seg = 0;
  1651  000BB0  C001  FFD9         	movff	pp_tm@tm_ptr,fsr2l
  1652  000BB4  C002  FFDA         	movff	pp_tm@tm_ptr+1,fsr2h
  1653  000BB8                     L4:
  1654  000BB8  0E00               	movlw	0
  1655  000BBA  6EDF               	movwf	indf2,c
  1656  000BBC  D01E               	goto	i2l1081
  1657  000BBE                     
  1658                           ;main.c: 139: if(++tm_ptr->min>59){
  1659  000BBE  EE20 F001          	lfsr	2,1
  1660  000BC2  5001               	movf	pp_tm@tm_ptr,w,c
  1661  000BC4  26D9               	addwf	fsr2l,f,c
  1662  000BC6  5002               	movf	pp_tm@tm_ptr+1,w,c
  1663  000BC8  22DA               	addwfc	fsr2h,f,c
  1664  000BCA  2ADF               	incf	indf2,f,c
  1665  000BCC  0E3B               	movlw	59
  1666  000BCE  64DF               	cpfsgt	indf2,c
  1667  000BD0  D020               	goto	i2l139
  1668                           
  1669                           ;main.c: 140: tm_ptr->min = 0;
  1670  000BD2  EE20 F001          	lfsr	2,1
  1671  000BD6  D00C               	goto	L5
  1672  000BD8                     
  1673                           ;main.c: 144: if(++tm_ptr->hour>23){
  1674  000BD8  EE20 F002          	lfsr	2,2
  1675  000BDC  5001               	movf	pp_tm@tm_ptr,w,c
  1676  000BDE  26D9               	addwf	fsr2l,f,c
  1677  000BE0  5002               	movf	pp_tm@tm_ptr+1,w,c
  1678  000BE2  22DA               	addwfc	fsr2h,f,c
  1679  000BE4  2ADF               	incf	indf2,f,c
  1680  000BE6  0E17               	movlw	23
  1681  000BE8  64DF               	cpfsgt	indf2,c
  1682  000BEA  D013               	goto	i2l139
  1683                           
  1684                           ;main.c: 145: tm_ptr->hour = 0;
  1685  000BEC  EE20 F002          	lfsr	2,2
  1686  000BF0                     L5:
  1687  000BF0  5001               	movf	pp_tm@tm_ptr,w,c
  1688  000BF2  26D9               	addwf	fsr2l,f,c
  1689  000BF4  5002               	movf	pp_tm@tm_ptr+1,w,c
  1690  000BF6  22DA               	addwfc	fsr2h,f,c
  1691  000BF8  D7DF               	goto	L4
  1692  000BFA                     i2l1081:
  1693                           
  1694                           ;main.c: 146: return 1;
  1695  000BFA  0E01               	movlw	1
  1696  000BFC  0012               	return	
  1697  000BFE                     i2l135:
  1698  000BFE  5003               	movf	pp_tm@type,w,c
  1699                           
  1700                           ; Switch size 1, requested type "space"
  1701                           ; Number of cases is 3, Range of values is 1 to 4
  1702                           ; switch strategies available:
  1703                           ; Name         Instructions Cycles
  1704                           ; simple_byte           10     6 (average)
  1705                           ;	Chosen strategy is simple_byte
  1706  000C00  0A01               	xorlw	1	; case 1
  1707  000C02  B4D8               	btfsc	status,2,c
  1708  000C04  D7CD               	goto	i2l136
  1709  000C06  0A03               	xorlw	3	; case 2
  1710  000C08  B4D8               	btfsc	status,2,c
  1711  000C0A  D7D9               	goto	i2l140
  1712  000C0C  0A06               	xorlw	6	; case 4
  1713  000C0E  B4D8               	btfsc	status,2,c
  1714  000C10  D7E3               	goto	i2l142
  1715  000C12                     i2l139:
  1716                           
  1717                           ;main.c: 149: return 0;
  1718  000C12  0E00               	movlw	0
  1719  000C14  0012               	return	
  1720  000C16                     __end_of_pp_tm:
  1721                           	opt stack 0
  1722                           pclatu	equ	0xFFB
  1723                           pclath	equ	0xFFA
  1724                           tblptru	equ	0xFF8
  1725                           tblptrh	equ	0xFF7
  1726                           tblptrl	equ	0xFF6
  1727                           tablat	equ	0xFF5
  1728                           prodh	equ	0xFF4
  1729                           prodl	equ	0xFF3
  1730                           intcon	equ	0xFF2
  1731                           intcon2	equ	0xFF1
  1732                           postinc0	equ	0xFEE
  1733                           fsr0h	equ	0xFEA
  1734                           fsr0l	equ	0xFE9
  1735                           wreg	equ	0xFE8
  1736                           indf1	equ	0xFE7
  1737                           fsr1h	equ	0xFE2
  1738                           fsr1l	equ	0xFE1
  1739                           indf2	equ	0xFDF
  1740                           fsr2h	equ	0xFDA
  1741                           fsr2l	equ	0xFD9
  1742                           status	equ	0xFD8
  1743                           pclatu	equ	0xFFB
  1744                           pclath	equ	0xFFA
  1745                           tblptru	equ	0xFF8
  1746                           tblptrh	equ	0xFF7
  1747                           tblptrl	equ	0xFF6
  1748                           tablat	equ	0xFF5
  1749                           prodh	equ	0xFF4
  1750                           prodl	equ	0xFF3
  1751                           intcon	equ	0xFF2
  1752                           intcon2	equ	0xFF1
  1753                           postinc0	equ	0xFEE
  1754                           fsr0h	equ	0xFEA
  1755                           fsr0l	equ	0xFE9
  1756                           wreg	equ	0xFE8
  1757                           indf1	equ	0xFE7
  1758                           fsr1h	equ	0xFE2
  1759                           fsr1l	equ	0xFE1
  1760                           indf2	equ	0xFDF
  1761                           fsr2h	equ	0xFDA
  1762                           fsr2l	equ	0xFD9
  1763                           status	equ	0xFD8
  1764                           
  1765                           	psect	rparam
  1766  0000                     pclatu	equ	0xFFB
  1767                           pclath	equ	0xFFA
  1768                           tblptru	equ	0xFF8
  1769                           tblptrh	equ	0xFF7
  1770                           tblptrl	equ	0xFF6
  1771                           tablat	equ	0xFF5
  1772                           prodh	equ	0xFF4
  1773                           prodl	equ	0xFF3
  1774                           intcon	equ	0xFF2
  1775                           intcon2	equ	0xFF1
  1776                           postinc0	equ	0xFEE
  1777                           fsr0h	equ	0xFEA
  1778                           fsr0l	equ	0xFE9
  1779                           wreg	equ	0xFE8
  1780                           indf1	equ	0xFE7
  1781                           fsr1h	equ	0xFE2
  1782                           fsr1l	equ	0xFE1
  1783                           indf2	equ	0xFDF
  1784                           fsr2h	equ	0xFDA
  1785                           fsr2l	equ	0xFD9
  1786                           status	equ	0xFD8
  1787                           
  1788                           	psect	temp
  1789  000040                     btemp:
  1790                           	opt stack 0
  1791  000040                     	ds	1
  1792  0000                     int$flags	set	btemp
  1793  0000                     wtemp6	set	btemp+1
  1794                           pclatu	equ	0xFFB
  1795                           pclath	equ	0xFFA
  1796                           tblptru	equ	0xFF8
  1797                           tblptrh	equ	0xFF7
  1798                           tblptrl	equ	0xFF6
  1799                           tablat	equ	0xFF5
  1800                           prodh	equ	0xFF4
  1801                           prodl	equ	0xFF3
  1802                           intcon	equ	0xFF2
  1803                           intcon2	equ	0xFF1
  1804                           postinc0	equ	0xFEE
  1805                           fsr0h	equ	0xFEA
  1806                           fsr0l	equ	0xFE9
  1807                           wreg	equ	0xFE8
  1808                           indf1	equ	0xFE7
  1809                           fsr1h	equ	0xFE2
  1810                           fsr1l	equ	0xFE1
  1811                           indf2	equ	0xFDF
  1812                           fsr2h	equ	0xFDA
  1813                           fsr2l	equ	0xFD9
  1814                           status	equ	0xFD8


Data Sizes:
    Strings     13
    Constant    0
    Data        0
    BSS         7
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     55      63
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    pp_tm@tm_ptr	PTR struct . size(2) Largest target is 4
		 -> clock(COMRAM[4]), 

    pp_time@tm_ptr	PTR struct . size(2) Largest target is 4
		 -> clock(COMRAM[4]), 

    make_disp_time@tm_ptr	PTR struct . size(2) Largest target is 4
		 -> clock(COMRAM[4]), 

    make_disp_time@ptr	PTR unsigned char  size(2) Largest target is 8
		 -> main@Display(COMRAM[8]), 

    show_count@ptr	PTR unsigned char  size(2) Largest target is 8
		 -> main@Display(COMRAM[8]), 

    show_count@dectoDy	PTR const unsigned char  size(2) Largest target is 13
		 -> STR_1(CODE[13]), 

    num_to_arr_num@ptr	PTR unsigned char  size(2) Largest target is 8
		 -> main@Display(COMRAM[8]), 


Critical Paths under _main in COMRAM

    _main->_make_disp_time
    _show_count->_wait_timer
    _make_disp_time->_num_to_arr_num
    _num_to_arr_num->___lwdiv

Critical Paths under _ISR in COMRAM

    _ISR->_pp_time
    _pp_time->_pp_tm

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 8     8      0    2594
                                             47 COMRAM     8     8      0
                     _make_disp_time
                              _setup
                         _show_count
 ---------------------------------------------------------------------------------
 (1) _show_count                                          12    10      2     274
                                             25 COMRAM    12    10      2
                         _wait_timer
 ---------------------------------------------------------------------------------
 (2) _wait_timer                                           1     1      0      15
                                             24 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _make_disp_time                                      11     7      4    2261
                                             36 COMRAM    11     7      4
                     _num_to_arr_num
 ---------------------------------------------------------------------------------
 (2) _num_to_arr_num                                       5     0      5    1683
                                             31 COMRAM     5     0      5
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     463
                                             24 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     314
                                             24 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _ISR                                                 18    18      0    1666
                                              6 COMRAM    18    18      0
                            _pp_time
                              _pp_tm
 ---------------------------------------------------------------------------------
 (5) _pp_time                                              2     0      2     904
                                              4 COMRAM     2     0      2
                              _pp_tm
 ---------------------------------------------------------------------------------
 (5) _pp_tm                                                4     1      3     762
                                              0 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _make_disp_time
     _num_to_arr_num
       ___lwdiv
       ___lwmod
   _setup
   _show_count
     _wait_timer

 _ISR (ROOT)
   _pp_time
     _pp_tm
   _pp_tm

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5E      0       1       0        1.1%
COMRAM              5E     37      3F       1       67.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      3F      20        0.0%
DATA                 0      0      3F       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sat Jun 09 10:43:43 2018

            main@Display 0030                       l93 0B28                       l85 0D26  
                     l94 0B12              __CFG_BORV$3 000000             __CFG_CP0$OFF 000000  
           __CFG_CP1$OFF 000000             __CFG_CP2$OFF 000000             __CFG_CP3$OFF 000000  
                    l101 0D70                      l110 0A7A                      l103 0D68  
                    l104 0D66                      l112 0ACA                      l122 08F0  
                    l125 0904                      l118 08A0                      l551 0C54  
                    l552 0C5E                      l561 0C96                      l562 0CA0  
                    l547 0C34                      l548 0C2C                      l557 0C7E  
                    l558 0C76             __CFG_CPB$OFF 000000                      u430 0C38  
                    u510 0B2E                      u530 0B7C             __CFG_CPD$OFF 000000  
                    u460 0C82                      u620 0930                      _ISR 0008  
           __CFG_BOR$OFF 000000                      wreg 000FE8             __CFG_FOSC$HS 000000  
           __CFG_LVP$OFF 000000                     ?_ISR 0001             __CFG_WDT$OFF 000000  
                   l1103 0B3A                     l1143 08FC                     l1135 08E8  
                   l1171 0AF8                     STR_1 0801                     _LATA 000F89  
                   _LATB 000F8A                     _LATD 000F8C                     i2l70 09C6  
                   i2l71 09F4                     i2l73 09D4                     i2l75 09E4  
                   i2l68 099E                     i2l79 0A16                     _main 0D22  
                   fsr0h 000FEA                     fsr1h 000FE2                     fsr2h 000FDA  
                   fsr0l 000FE9                     indf1 000FE7                     indf2 000FDF  
                   fsr1l 000FE1                     fsr2l 000FD9                     btemp 0040  
                   prodh 000FF4                     prodl 000FF3                     start 000E  
          __CFG_IESO$OFF 000000            __CFG_MCLRE$ON 000000             ___param_bank 000000  
                  ??_ISR 0007           _make_disp_time 0810            __CFG_PLLDIV$1 000000  
          show_count@ptr 001A           __CFG_CCP2MX$ON 000000                    ?_main 0001  
                  _CMCON 000FB4                    _T0CON 000FD5                    _T1CON 000FCD  
        __end_of___lwdiv 0C68          __end_of___lwmod 0CAA                    i2l140 0BBE  
                  i2l142 0BD8                    i2l135 0BFE                    i2l136 0BA0  
                  i2l139 0C12                    _TMR0H 000FD7                    _TMR1H 000FCF  
                  _TMR0L 000FD6            __CFG_USBDIV$1 000000                    _TRISA 000F92  
                  _TRISB 000F93                    _TRISD 000F95            __CFG_PWRT$OFF 000000  
          __CFG_WRT0$OFF 000000            __CFG_WRT1$OFF 000000            __CFG_WRT2$OFF 000000  
       ??_num_to_arr_num 0025            __CFG_WRT3$OFF 000000           __CFG_EBTR0$OFF 000000  
         __CFG_FCMEN$OFF 000000           __CFG_EBTR1$OFF 000000           __CFG_EBTR2$OFF 000000  
         __CFG_EBTR3$OFF 000000            __CFG_WRTB$OFF 000000            __CFG_WRTC$OFF 000000  
          __CFG_WRTD$OFF 000000           __CFG_EBTRB$OFF 000000                    _clock 003B  
                  _count 003A                    _pp_tm 0B9E                    _setup 0CE8  
        __end_of_pp_time 0CE8                    pclath 000FFA                    tablat 000FF5  
                  status 000FD8                    wtemp6 0041           __CFG_ICPRT$OFF 000000  
        __initialization 0D48   __end_of_make_disp_time 093A             __end_of_main 0D48  
                 ??_main 0030            __activetblptr 000002                   _ADCON1 000FC1  
                 ?_pp_tm 0001                   ?_setup 0001                   i2l1081 0BFA  
     _make_disp_time$499 002B           __CFG_XINST$OFF 000000          ?_make_disp_time 0025  
         __CFG_STVREN$ON 000000                   _flag_t 01F8                ??___lwdiv 001D  
              ??___lwmod 001D     make_disp_time@tm_ptr 0027                   clear_0 0D4E  
           __mediumconst 0000                   tblptrh 000FF7                   tblptrl 000FF6  
              ??_pp_time 0007                   tblptru 000FF8               __accesstop 0060  
__end_of__initialization 0D54          __CFG_PBADEN$OFF 000000            ___rparam_used 000001  
         __pcstackCOMRAM 0001            __end_of_pp_tm 0C16        show_count@dectoDy 0023  
          __end_of_setup 0D22                  ??_pp_tm 0004                  ??_setup 0019  
             _flagStatus 0039                  i2u71_40 09C2                  i2u72_40 09C4  
        make_disp_time@i 002D          make_disp_time@j 002E          make_disp_time@k 002F  
        __CFG_VREGEN$OFF 000000               _count_rbnd 0038                  __Hparam 0000  
                __Lparam 0000              pp_tm@tm_ptr 0001                  ___lwdiv 0C16  
                ___lwmod 0C68             __psmallconst 0800                  __pcinit 0D48  
                __ramtop 0800                  __ptext0 0D22                  __ptext1 0A62  
                __ptext2 0D62                  __ptext3 0CE8                  __ptext4 0810  
                __ptext5 0B10                  __ptext6 0C68                  __ptext7 0C16  
                __ptext9 0CAA             __size_of_ISR 0A5A                  _pp_time 0CAA  
         __pintcode_body 093A     end_of_initialization 0D54            __Lmediumconst 0000  
                int_func 093A         ??_make_disp_time 0029                  postinc0 000FEE  
             _wait_timer 0D62              wait_timer@n 0019                _PORTAbits 000F80  
             _show_count 0A62              show_count@a 0022              show_count@i 0025  
__size_of_num_to_arr_num 008E        make_disp_time@ptr 0025            __pbitnvCOMRAM 01F8  
    start_initialization 0D48              __end_of_ISR 0A62         __CFG_LPT1OSC$OFF 000000  
            ?_wait_timer 0001              ?_show_count 001A              __pbssCOMRAM 0038  
       ___lwdiv@dividend 0019                __pintcode 0008                 ?___lwdiv 0019  
               ?___lwmod 0019            pp_time@tm_ptr 0005              __smallconst 0800  
               ?_pp_time 0005         ___lwdiv@quotient 001D           __size_of_pp_tm 0078  
         __size_of_setup 003A      __size_of_wait_timer 0016           _num_to_arr_num 0B10  
               _IPR1bits 000F9F                 _PIE1bits 000F9D      __size_of_show_count 00AE  
               _PIR1bits 000F9E                 _RCONbits 000FD0         __CFG_WDTPS$32768 000000  
            _INTCON2bits 000FF1   __end_of_num_to_arr_num 0B9E                 __Hrparam 0000  
               __Lrparam 0000         __size_of___lwdiv 0052         __size_of___lwmod 0042  
      num_to_arr_num@len 0024        num_to_arr_num@num 0022        num_to_arr_num@ptr 0020  
        ___lwdiv@divisor 001B          ___lwdiv@counter 001F                 __ptext10 0B9E  
       __size_of_pp_time 003E          ?_num_to_arr_num 0020                pp_tm@type 0003  
          __size_of_main 0026                 int$flags 0040  __size_of_make_disp_time 012A  
           ??_wait_timer 0019             ??_show_count 001C    __CFG_CPUDIV$OSC1_PLL2 000000  
             _INTCONbits 000FF2                 intlevel2 0000         ___lwmod@dividend 0019  
     __end_of_wait_timer 0D78       __end_of_show_count 0B10          ___lwmod@divisor 001B  
        ___lwmod@counter 001D  
