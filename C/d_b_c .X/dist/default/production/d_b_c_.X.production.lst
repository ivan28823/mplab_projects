

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Thu May 31 23:19:30 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	bitnvCOMRAM,global,bit,class=COMRAM,space=1,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    18                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    19                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    20                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    21                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    22  0000                     
    23                           ; Version 1.45
    24                           ; Generated 16/11/2017 GMT
    25                           ; 
    26                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    27                           ; All rights reserved.
    28                           ; 
    29                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    30                           ; 
    31                           ; Redistribution and use in source and binary forms, with or without modification, are
    32                           ; permitted provided that the following conditions are met:
    33                           ; 
    34                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    35                           ;        conditions and the following disclaimer.
    36                           ; 
    37                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    38                           ;        of conditions and the following disclaimer in the documentation and/or other
    39                           ;        materials provided with the distribution.
    40                           ; 
    41                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    42                           ;        software without specific prior written permission.
    43                           ; 
    44                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    45                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    46                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    47                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    48                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    49                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    50                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    51                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    52                           ; 
    53                           ; 
    54                           ; Code-generator required, PIC18F4550 Definitions
    55                           ; 
    56                           ; SFR Addresses
    57  0000                     
    58                           	psect	smallconst
    59  000800                     __psmallconst:
    60                           	opt stack 0
    61  000800  00                 	db	0
    62  000801                     _dectoDy:
    63                           	opt stack 0
    64  000801  C0                 	db	192
    65  000802  F9                 	db	249
    66  000803  A4                 	db	164
    67  000804  B0                 	db	176
    68  000805  99                 	db	153
    69  000806  92                 	db	146
    70  000807  82                 	db	130
    71  000808  F8                 	db	248
    72  000809  80                 	db	128
    73  00080A  98                 	db	152
    74  00080B  88                 	db	136
    75  00080C  03                 	db	3
    76  00080D  C6                 	db	198
    77  00080E  A1                 	db	161
    78  00080F  86                 	db	134
    79  000810  8E                 	db	142
    80  000811                     __end_of_dectoDy:
    81                           	opt stack 0
    82  000811  00                 	db	0	; dummy byte at the end
    83  0000                     
    84                           	psect	bitnvCOMRAM
    85  000138                     __pbitnvCOMRAM:
    86                           	opt stack 0
    87  000138                     _flag_t:
    88                           	opt stack 0
    89  000138                     	ds	1
    90  0000                     _LATD	set	3980
    91  0000                     _LATB	set	3978
    92  0000                     _RCONbits	set	4048
    93  0000                     _IPR1bits	set	3999
    94  0000                     _PIE1bits	set	3997
    95  0000                     _T1CON	set	4045
    96  0000                     _INTCON2bits	set	4081
    97  0000                     _T0CON	set	4053
    98  0000                     _TRISB	set	3987
    99  0000                     _TRISD	set	3989
   100  0000                     _CMCON	set	4020
   101  0000                     _ADCON1	set	4033
   102  0000                     _TMR0H	set	4055
   103  0000                     _TMR0L	set	4054
   104  0000                     _INTCONbits	set	4082
   105  0000                     _TMR1H	set	4047
   106  0000                     _PIR1bits	set	3998
   107                           
   108                           ; #config settings
   109  0000                     
   110                           	psect	cinit
   111  000AB4                     __pcinit:
   112                           	opt stack 0
   113  000AB4                     start_initialization:
   114                           	opt stack 0
   115  000AB4                     __initialization:
   116                           	opt stack 0
   117                           
   118                           ; Clear objects allocated to COMRAM (7 bytes)
   119  000AB4  EE00  F020         	lfsr	0,__pbssCOMRAM
   120  000AB8  0E07               	movlw	7
   121  000ABA                     clear_0:
   122  000ABA  6AEE               	clrf	postinc0,c
   123  000ABC  06E8               	decf	wreg,f,c
   124  000ABE  E1FD               	bnz	clear_0
   125  000AC0                     end_of_initialization:
   126                           	opt stack 0
   127  000AC0                     __end_of__initialization:
   128                           	opt stack 0
   129  000AC0  9028               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   130  000AC2  9228               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   131  000AC4  0E00               	movlw	low (__Lsmallconst shr (0+16))
   132  000AC6  6EF8               	movwf	tblptru,c
   133  000AC8  0E08               	movlw	high __Lsmallconst
   134  000ACA  6EF7               	movwf	tblptrh,c
   135  000ACC  0100               	movlb	0
   136  000ACE  EF45  F005         	goto	_main	;jump to C main() function
   137                           tblptru	equ	0xFF8
   138                           tblptrh	equ	0xFF7
   139                           postinc0	equ	0xFEE
   140                           wreg	equ	0xFE8
   141                           
   142                           	psect	bssCOMRAM
   143  000020                     __pbssCOMRAM:
   144                           	opt stack 0
   145  000020                     _count:
   146                           	opt stack 0
   147  000020                     	ds	2
   148  000022                     _count_t:
   149                           	opt stack 0
   150  000022                     	ds	1
   151  000023                     _numDisplay:
   152                           	opt stack 0
   153  000023                     	ds	4
   154                           tblptru	equ	0xFF8
   155                           tblptrh	equ	0xFF7
   156                           postinc0	equ	0xFEE
   157                           wreg	equ	0xFE8
   158                           
   159                           	psect	cstackCOMRAM
   160  000001                     __pcstackCOMRAM:
   161                           	opt stack 0
   162  000001                     ??_ISR:
   163  000001                     
   164                           ; 1 bytes @ 0x0
   165  000001                     	ds	18
   166  000013                     ?___lwdiv:
   167                           	opt stack 0
   168  000013                     ?___lwmod:
   169                           	opt stack 0
   170  000013                     wait_timer@n:
   171                           	opt stack 0
   172  000013                     ___lwdiv@dividend:
   173                           	opt stack 0
   174  000013                     ___lwmod@dividend:
   175                           	opt stack 0
   176                           
   177                           ; 2 bytes @ 0x12
   178  000013                     	ds	1
   179  000014                     show_count@ptr:
   180                           	opt stack 0
   181                           
   182                           ; 2 bytes @ 0x13
   183  000014                     	ds	1
   184  000015                     ___lwdiv@divisor:
   185                           	opt stack 0
   186  000015                     ___lwmod@divisor:
   187                           	opt stack 0
   188                           
   189                           ; 2 bytes @ 0x14
   190  000015                     	ds	1
   191  000016                     ??_show_count:
   192                           
   193                           ; 1 bytes @ 0x15
   194  000016                     	ds	1
   195  000017                     show_count@a:
   196                           	opt stack 0
   197  000017                     ___lwmod@counter:
   198                           	opt stack 0
   199  000017                     ___lwdiv@quotient:
   200                           	opt stack 0
   201                           
   202                           ; 2 bytes @ 0x16
   203  000017                     	ds	1
   204  000018                     show_count@i:
   205                           	opt stack 0
   206                           
   207                           ; 1 bytes @ 0x17
   208  000018                     	ds	1
   209  000019                     ___lwdiv@counter:
   210                           	opt stack 0
   211                           
   212                           ; 1 bytes @ 0x18
   213  000019                     	ds	1
   214  00001A                     ntan@ptr:
   215                           	opt stack 0
   216                           
   217                           ; 2 bytes @ 0x19
   218  00001A                     	ds	2
   219  00001C                     ntan@num:
   220                           	opt stack 0
   221                           
   222                           ; 2 bytes @ 0x1B
   223  00001C                     	ds	2
   224  00001E                     ntan@len:
   225                           	opt stack 0
   226                           
   227                           ; 1 bytes @ 0x1D
   228  00001E                     	ds	1
   229  00001F                     ntan@index:
   230                           	opt stack 0
   231                           
   232                           ; 1 bytes @ 0x1E
   233  00001F                     	ds	1
   234  000020                     tblptru	equ	0xFF8
   235                           tblptrh	equ	0xFF7
   236                           postinc0	equ	0xFEE
   237                           wreg	equ	0xFE8
   238                           
   239                           ; 1 bytes @ 0x1F
   240 ;;
   241 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   242 ;;
   243 ;; *************** function _main *****************
   244 ;; Defined at:
   245 ;;		line 38 in file "main.c"
   246 ;; Parameters:    Size  Location     Type
   247 ;;		None
   248 ;; Auto vars:     Size  Location     Type
   249 ;;		None
   250 ;; Return value:  Size  Location     Type
   251 ;;                  1    wreg      void 
   252 ;; Registers used:
   253 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   254 ;; Tracked objects:
   255 ;;		On entry : 0/0
   256 ;;		On exit  : 0/0
   257 ;;		Unchanged: 0/0
   258 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   259 ;;      Params:         0       0       0       0       0       0       0       0       0
   260 ;;      Locals:         0       0       0       0       0       0       0       0       0
   261 ;;      Temps:          0       0       0       0       0       0       0       0       0
   262 ;;      Totals:         0       0       0       0       0       0       0       0       0
   263 ;;Total ram usage:        0 bytes
   264 ;; Hardware stack levels required when called:    3
   265 ;; This function calls:
   266 ;;		_ntan
   267 ;;		_setup
   268 ;;		_show_count
   269 ;; This function is called by:
   270 ;;		Startup code after reset
   271 ;; This function uses a non-reentrant model
   272 ;;
   273                           
   274                           	psect	text0
   275  000A8A                     __ptext0:
   276                           	opt stack 0
   277  000A8A                     _main:
   278                           	opt stack 28
   279                           
   280                           ;main.c: 39: setup();
   281                           
   282                           ;incstack = 0
   283  000A8A  EC2D  F005         	call	_setup	;wreg free
   284  000A8E                     
   285                           ;main.c: 41: ntan(numDisplay,count,4);
   286  000A8E  0E23               	movlw	low _numDisplay
   287  000A90  6E1A               	movwf	ntan@ptr,c
   288  000A92  0E00               	movlw	high _numDisplay
   289  000A94  6E1B               	movwf	ntan@ptr+1,c
   290  000A96  C020  F01C         	movff	_count,ntan@num
   291  000A9A  C021  F01D         	movff	_count+1,ntan@num+1
   292  000A9E  0E04               	movlw	4
   293  000AA0  6E1E               	movwf	ntan@len,c
   294  000AA2  EC6C  F004         	call	_ntan	;wreg free
   295                           
   296                           ;main.c: 42: show_count(numDisplay);
   297  000AA6  0E23               	movlw	low _numDisplay
   298  000AA8  6E14               	movwf	show_count@ptr,c
   299  000AAA  0E00               	movlw	high _numDisplay
   300  000AAC  6E15               	movwf	show_count@ptr+1,c
   301  000AAE  ECE5  F004         	call	_show_count	;wreg free
   302                           
   303                           ;main.c: 43: }
   304  000AB2  D7ED               	goto	l63
   305  000AB4                     __end_of_main:
   306                           	opt stack 0
   307                           tblptru	equ	0xFF8
   308                           tblptrh	equ	0xFF7
   309                           postinc0	equ	0xFEE
   310                           wreg	equ	0xFE8
   311                           
   312 ;; *************** function _show_count *****************
   313 ;; Defined at:
   314 ;;		line 87 in file "main.c"
   315 ;; Parameters:    Size  Location     Type
   316 ;;  ptr             2   19[COMRAM] PTR unsigned char 
   317 ;;		 -> numDisplay(4), 
   318 ;; Auto vars:     Size  Location     Type
   319 ;;  i               1   23[COMRAM] unsigned char 
   320 ;;  a               1   22[COMRAM] unsigned char 
   321 ;; Return value:  Size  Location     Type
   322 ;;                  1    wreg      void 
   323 ;; Registers used:
   324 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   325 ;; Tracked objects:
   326 ;;		On entry : 0/0
   327 ;;		On exit  : 0/0
   328 ;;		Unchanged: 0/0
   329 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   330 ;;      Params:         2       0       0       0       0       0       0       0       0
   331 ;;      Locals:         2       0       0       0       0       0       0       0       0
   332 ;;      Temps:          1       0       0       0       0       0       0       0       0
   333 ;;      Totals:         5       0       0       0       0       0       0       0       0
   334 ;;Total ram usage:        5 bytes
   335 ;; Hardware stack levels used:    1
   336 ;; Hardware stack levels required when called:    2
   337 ;; This function calls:
   338 ;;		_wait_timer
   339 ;; This function is called by:
   340 ;;		_main
   341 ;; This function uses a non-reentrant model
   342 ;;
   343                           
   344                           	psect	text1
   345  0009CA                     __ptext1:
   346                           	opt stack 0
   347  0009CA                     _show_count:
   348                           	opt stack 28
   349                           
   350                           ;main.c: 88: for(unsigned char i = 0,a=1;i<4;a<<=1){
   351                           
   352                           ;incstack = 0
   353  0009CA  0E00               	movlw	0
   354  0009CC  6E18               	movwf	show_count@i,c
   355  0009CE  0E01               	movlw	1
   356  0009D0  6E17               	movwf	show_count@a,c
   357  0009D2                     l905:
   358  0009D2  0E03               	movlw	3
   359  0009D4  6418               	cpfsgt	show_count@i,c
   360  0009D6  D001               	goto	l87
   361  0009D8  0012               	return	
   362  0009DA                     l87:
   363                           
   364                           ;main.c: 89: LATB = ~a;
   365  0009DA  5017               	movf	show_count@a,w,c
   366  0009DC  0AFF               	xorlw	255
   367  0009DE  6E8A               	movwf	3978,c	;volatile
   368                           
   369                           ;main.c: 90: LATD = *(dectoDy + *(ptr + i++));
   370  0009E0  5018               	movf	show_count@i,w,c
   371  0009E2  0D01               	mullw	1
   372  0009E4  50F3               	movf	prodl,w,c
   373  0009E6  2414               	addwf	show_count@ptr,w,c
   374  0009E8  6ED9               	movwf	fsr2l,c
   375  0009EA  50F4               	movf	prodh,w,c
   376  0009EC  2015               	addwfc	show_count@ptr+1,w,c
   377  0009EE  6EDA               	movwf	fsr2h,c
   378  0009F0  50DF               	movf	indf2,w,c
   379  0009F2  6E16               	movwf	??_show_count& (0+255),c
   380  0009F4  5016               	movf	??_show_count,w,c
   381  0009F6  0D01               	mullw	1
   382  0009F8  0E01               	movlw	low _dectoDy
   383  0009FA  24F3               	addwf	prodl,w,c
   384  0009FC  6EF6               	movwf	tblptrl,c
   385  0009FE  0E08               	movlw	high _dectoDy
   386  000A00  20F4               	addwfc	prodh,w,c
   387  000A02  6EF7               	movwf	tblptrh,c
   388  000A04                     	if	0	;There are less than 3 active tblptr bytes
   389  000A04                     	endif
   390  000A04  0008               	tblrd		*
   391  000A06  CFF5 FF8C          	movff	tablat,3980	;volatile
   392  000A0A  2A18               	incf	show_count@i,f,c
   393                           
   394                           ;main.c: 91: wait_timer(1);
   395  000A0C  0E01               	movlw	1
   396  000A0E  EC69  F005         	call	_wait_timer
   397  000A12  90D8               	bcf	status,0,c
   398  000A14  3617               	rlcf	show_count@a,f,c
   399  000A16  D7DD               	goto	l905
   400  000A18                     __end_of_show_count:
   401                           	opt stack 0
   402                           tblptru	equ	0xFF8
   403                           tblptrh	equ	0xFF7
   404                           tblptrl	equ	0xFF6
   405                           tablat	equ	0xFF5
   406                           prodh	equ	0xFF4
   407                           prodl	equ	0xFF3
   408                           postinc0	equ	0xFEE
   409                           wreg	equ	0xFE8
   410                           indf2	equ	0xFDF
   411                           fsr2h	equ	0xFDA
   412                           fsr2l	equ	0xFD9
   413                           status	equ	0xFD8
   414                           
   415 ;; *************** function _wait_timer *****************
   416 ;; Defined at:
   417 ;;		line 81 in file "main.c"
   418 ;; Parameters:    Size  Location     Type
   419 ;;  n               1    wreg     unsigned char 
   420 ;; Auto vars:     Size  Location     Type
   421 ;;  n               1   18[COMRAM] unsigned char 
   422 ;; Return value:  Size  Location     Type
   423 ;;                  1    wreg      void 
   424 ;; Registers used:
   425 ;;		wreg, status,2, status,0
   426 ;; Tracked objects:
   427 ;;		On entry : 0/0
   428 ;;		On exit  : 0/0
   429 ;;		Unchanged: 0/0
   430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   431 ;;      Params:         0       0       0       0       0       0       0       0       0
   432 ;;      Locals:         1       0       0       0       0       0       0       0       0
   433 ;;      Temps:          0       0       0       0       0       0       0       0       0
   434 ;;      Totals:         1       0       0       0       0       0       0       0       0
   435 ;;Total ram usage:        1 bytes
   436 ;; Hardware stack levels used:    1
   437 ;; Hardware stack levels required when called:    1
   438 ;; This function calls:
   439 ;;		Nothing
   440 ;; This function is called by:
   441 ;;		_show_count
   442 ;; This function uses a non-reentrant model
   443 ;;
   444                           
   445                           	psect	text2
   446  000AD2                     __ptext2:
   447                           	opt stack 0
   448  000AD2                     _wait_timer:
   449                           	opt stack 28
   450                           
   451                           ;incstack = 0
   452                           ;wait_timer@n stored from wreg
   453  000AD2  6E13               	movwf	wait_timer@n,c
   454                           
   455                           ;main.c: 82: for(;n;n--){
   456  000AD4  D004               	goto	l78
   457  000AD6                     
   458                           ;main.c: 83: while(!flag_t);
   459  000AD6  A027               	btfss	_flag_t/(0+8),_flag_t& (0+7),c
   460  000AD8  D7FE               	goto	l79
   461                           
   462                           ;main.c: 84: flag_t = 0;
   463  000ADA  9027               	bcf	_flag_t/(0+8),_flag_t& (0+7),c
   464  000ADC  0613               	decf	wait_timer@n,f,c
   465  000ADE                     l78:
   466  000ADE  5013               	movf	wait_timer@n,w,c
   467  000AE0  B4D8               	btfsc	status,2,c
   468  000AE2  0012               	return	
   469  000AE4  D7F8               	goto	l79
   470  000AE6                     __end_of_wait_timer:
   471                           	opt stack 0
   472                           tblptru	equ	0xFF8
   473                           tblptrh	equ	0xFF7
   474                           tblptrl	equ	0xFF6
   475                           tablat	equ	0xFF5
   476                           prodh	equ	0xFF4
   477                           prodl	equ	0xFF3
   478                           postinc0	equ	0xFEE
   479                           wreg	equ	0xFE8
   480                           indf2	equ	0xFDF
   481                           fsr2h	equ	0xFDA
   482                           fsr2l	equ	0xFD9
   483                           status	equ	0xFD8
   484                           
   485 ;; *************** function _setup *****************
   486 ;; Defined at:
   487 ;;		line 46 in file "main.c"
   488 ;; Parameters:    Size  Location     Type
   489 ;;		None
   490 ;; Auto vars:     Size  Location     Type
   491 ;;		None
   492 ;; Return value:  Size  Location     Type
   493 ;;                  1    wreg      void 
   494 ;; Registers used:
   495 ;;		wreg, status,2
   496 ;; Tracked objects:
   497 ;;		On entry : 0/0
   498 ;;		On exit  : 0/0
   499 ;;		Unchanged: 0/0
   500 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   501 ;;      Params:         0       0       0       0       0       0       0       0       0
   502 ;;      Locals:         0       0       0       0       0       0       0       0       0
   503 ;;      Temps:          0       0       0       0       0       0       0       0       0
   504 ;;      Totals:         0       0       0       0       0       0       0       0       0
   505 ;;Total ram usage:        0 bytes
   506 ;; Hardware stack levels used:    1
   507 ;; Hardware stack levels required when called:    1
   508 ;; This function calls:
   509 ;;		Nothing
   510 ;; This function is called by:
   511 ;;		_main
   512 ;; This function uses a non-reentrant model
   513 ;;
   514                           
   515                           	psect	text3
   516  000A5A                     __ptext3:
   517                           	opt stack 0
   518  000A5A                     _setup:
   519                           	opt stack 29
   520                           
   521                           ;main.c: 47: INTCONbits.GIEH=0;
   522                           
   523                           ;incstack = 0
   524  000A5A  9EF2               	bcf	intcon,7,c	;volatile
   525                           
   526                           ;main.c: 49: ADCON1 = 0x0F;
   527  000A5C  0E0F               	movlw	15
   528  000A5E  6EC1               	movwf	4033,c	;volatile
   529                           
   530                           ;main.c: 50: CMCON = 0x07;
   531  000A60  0E07               	movlw	7
   532  000A62  6EB4               	movwf	4020,c	;volatile
   533                           
   534                           ;main.c: 52: TRISD = 0x00;
   535  000A64  0E00               	movlw	0
   536  000A66  6E95               	movwf	3989,c	;volatile
   537                           
   538                           ;main.c: 53: TRISB = 0xF0;
   539  000A68  0EF0               	movlw	240
   540  000A6A  6E93               	movwf	3987,c	;volatile
   541                           
   542                           ;main.c: 55: T0CON = 0b10001000;
   543  000A6C  0E88               	movlw	136
   544  000A6E  6ED5               	movwf	4053,c	;volatile
   545                           
   546                           ;main.c: 57: INTCONbits.TMR0IF = 0;
   547  000A70  94F2               	bcf	intcon,2,c	;volatile
   548                           
   549                           ;main.c: 58: INTCONbits.TMR0IE = 1;
   550  000A72  8AF2               	bsf	intcon,5,c	;volatile
   551                           
   552                           ;main.c: 59: INTCON2bits.TMR0IP = 1;
   553  000A74  84F1               	bsf	intcon2,2,c	;volatile
   554                           
   555                           ;main.c: 61: T1CON = 0b00001011;
   556  000A76  0E0B               	movlw	11
   557  000A78  6ECD               	movwf	4045,c	;volatile
   558                           
   559                           ;main.c: 63: PIR1bits.TMR1IF = 0;
   560  000A7A  909E               	bcf	3998,0,c	;volatile
   561                           
   562                           ;main.c: 64: PIE1bits.TMR1IE = 1;
   563  000A7C  809D               	bsf	3997,0,c	;volatile
   564                           
   565                           ;main.c: 65: IPR1bits.TMR1IP = 1;
   566  000A7E  809F               	bsf	3999,0,c	;volatile
   567                           
   568                           ;main.c: 67: RCONbits.IPEN = 1;
   569  000A80  8ED0               	bsf	4048,7,c	;volatile
   570                           
   571                           ;main.c: 68: flag_t = 1;
   572  000A82  8027               	bsf	_flag_t/(0+8),_flag_t& (0+7),c
   573                           
   574                           ;main.c: 70: INTCONbits.GIEL = 0;
   575  000A84  9CF2               	bcf	intcon,6,c	;volatile
   576                           
   577                           ;main.c: 71: INTCONbits.GIEH = 1;
   578  000A86  8EF2               	bsf	intcon,7,c	;volatile
   579  000A88  0012               	return		;funcret
   580  000A8A                     __end_of_setup:
   581                           	opt stack 0
   582                           tblptru	equ	0xFF8
   583                           tblptrh	equ	0xFF7
   584                           tblptrl	equ	0xFF6
   585                           tablat	equ	0xFF5
   586                           prodh	equ	0xFF4
   587                           prodl	equ	0xFF3
   588                           intcon	equ	0xFF2
   589                           intcon2	equ	0xFF1
   590                           postinc0	equ	0xFEE
   591                           wreg	equ	0xFE8
   592                           indf2	equ	0xFDF
   593                           fsr2h	equ	0xFDA
   594                           fsr2l	equ	0xFD9
   595                           status	equ	0xFD8
   596                           
   597 ;; *************** function _ntan *****************
   598 ;; Defined at:
   599 ;;		line 74 in file "main.c"
   600 ;; Parameters:    Size  Location     Type
   601 ;;  ptr             2   25[COMRAM] PTR unsigned char 
   602 ;;		 -> numDisplay(4), 
   603 ;;  num             2   27[COMRAM] unsigned int 
   604 ;;  len             1   29[COMRAM] unsigned char 
   605 ;; Auto vars:     Size  Location     Type
   606 ;;  index           1   30[COMRAM] unsigned char 
   607 ;; Return value:  Size  Location     Type
   608 ;;                  1    wreg      void 
   609 ;; Registers used:
   610 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   611 ;; Tracked objects:
   612 ;;		On entry : 0/0
   613 ;;		On exit  : 0/0
   614 ;;		Unchanged: 0/0
   615 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   616 ;;      Params:         5       0       0       0       0       0       0       0       0
   617 ;;      Locals:         1       0       0       0       0       0       0       0       0
   618 ;;      Temps:          0       0       0       0       0       0       0       0       0
   619 ;;      Totals:         6       0       0       0       0       0       0       0       0
   620 ;;Total ram usage:        6 bytes
   621 ;; Hardware stack levels used:    1
   622 ;; Hardware stack levels required when called:    2
   623 ;; This function calls:
   624 ;;		___lwdiv
   625 ;;		___lwmod
   626 ;; This function is called by:
   627 ;;		_main
   628 ;; This function uses a non-reentrant model
   629 ;;
   630                           
   631                           	psect	text4
   632  0008D8                     __ptext4:
   633                           	opt stack 0
   634  0008D8                     _ntan:
   635                           	opt stack 28
   636                           
   637                           ;main.c: 75: unsigned char index = 0;
   638                           
   639                           ;incstack = 0
   640  0008D8  0E00               	movlw	0
   641  0008DA  6E1F               	movwf	ntan@index,c
   642  0008DC                     
   643                           ;main.c: 76: for(;len>0;*(ptr + --len)=0);
   644  0008DC  501E               	movf	ntan@len,w,c
   645  0008DE  B4D8               	btfsc	status,2,c
   646  0008E0  D00C               	goto	u250
   647  0008E2  061E               	decf	ntan@len,f,c
   648  0008E4  501E               	movf	ntan@len,w,c
   649  0008E6  0D01               	mullw	1
   650  0008E8  50F3               	movf	prodl,w,c
   651  0008EA  241A               	addwf	ntan@ptr,w,c
   652  0008EC  6ED9               	movwf	fsr2l,c
   653  0008EE  50F4               	movf	prodh,w,c
   654  0008F0  201B               	addwfc	ntan@ptr+1,w,c
   655  0008F2  6EDA               	movwf	fsr2h,c
   656  0008F4  0E00               	movlw	0
   657  0008F6  6EDF               	movwf	indf2,c
   658  0008F8  D7F1               	goto	L1
   659  0008FA                     u250:
   660                           
   661                           ;main.c: 77: for(;num>9;*(ptr + index++) = num%10,num/=10);
   662  0008FA  501D               	movf	ntan@num+1,w,c
   663  0008FC  E104               	bnz	l893
   664  0008FE  0E0A               	movlw	10
   665  000900  5C1C               	subwf	ntan@num,w,c
   666  000902  A0D8               	btfss	status,0,c
   667  000904  D024               	goto	u270
   668  000906                     l893:
   669  000906  501F               	movf	ntan@index,w,c
   670  000908  0D01               	mullw	1
   671  00090A  50F3               	movf	prodl,w,c
   672  00090C  241A               	addwf	ntan@ptr,w,c
   673  00090E  6ED9               	movwf	fsr2l,c
   674  000910  50F4               	movf	prodh,w,c
   675  000912  201B               	addwfc	ntan@ptr+1,w,c
   676  000914  6EDA               	movwf	fsr2h,c
   677  000916  C01C  F013         	movff	ntan@num,___lwmod@dividend
   678  00091A  C01D  F014         	movff	ntan@num+1,___lwmod@dividend+1
   679  00091E  0E00               	movlw	0
   680  000920  6E16               	movwf	___lwmod@divisor+1,c
   681  000922  0E0A               	movlw	10
   682  000924  6E15               	movwf	___lwmod@divisor,c
   683  000926  EC0C  F005         	call	___lwmod	;wreg free
   684  00092A  5013               	movf	?___lwmod,w,c
   685  00092C  6EDF               	movwf	indf2,c
   686  00092E  2A1F               	incf	ntan@index,f,c
   687  000930  C01C  F013         	movff	ntan@num,___lwdiv@dividend
   688  000934  C01D  F014         	movff	ntan@num+1,___lwdiv@dividend+1
   689  000938  0E00               	movlw	0
   690  00093A  6E16               	movwf	___lwdiv@divisor+1,c
   691  00093C  0E0A               	movlw	10
   692  00093E  6E15               	movwf	___lwdiv@divisor,c
   693  000940  ECBC  F004         	call	___lwdiv	;wreg free
   694  000944  C013  F01C         	movff	?___lwdiv,ntan@num
   695  000948  C014  F01D         	movff	?___lwdiv+1,ntan@num+1
   696  00094C  D7D6               	goto	u250
   697  00094E                     u270:
   698                           
   699                           ;main.c: 78: *(ptr + index) = num%10;
   700  00094E  501F               	movf	ntan@index,w,c
   701  000950  0D01               	mullw	1
   702  000952  50F3               	movf	prodl,w,c
   703  000954  241A               	addwf	ntan@ptr,w,c
   704  000956  6ED9               	movwf	fsr2l,c
   705  000958  50F4               	movf	prodh,w,c
   706  00095A  201B               	addwfc	ntan@ptr+1,w,c
   707  00095C  6EDA               	movwf	fsr2h,c
   708  00095E  C01C  F013         	movff	ntan@num,___lwmod@dividend
   709  000962  C01D  F014         	movff	ntan@num+1,___lwmod@dividend+1
   710  000966  0E00               	movlw	0
   711  000968  6E16               	movwf	___lwmod@divisor+1,c
   712  00096A  0E0A               	movlw	10
   713  00096C  6E15               	movwf	___lwmod@divisor,c
   714  00096E  EC0C  F005         	call	___lwmod	;wreg free
   715  000972  5013               	movf	?___lwmod,w,c
   716  000974  6EDF               	movwf	indf2,c
   717  000976  0012               	return		;funcret
   718  000978                     __end_of_ntan:
   719                           	opt stack 0
   720                           tblptru	equ	0xFF8
   721                           tblptrh	equ	0xFF7
   722                           tblptrl	equ	0xFF6
   723                           tablat	equ	0xFF5
   724                           prodh	equ	0xFF4
   725                           prodl	equ	0xFF3
   726                           intcon	equ	0xFF2
   727                           intcon2	equ	0xFF1
   728                           postinc0	equ	0xFEE
   729                           wreg	equ	0xFE8
   730                           indf2	equ	0xFDF
   731                           fsr2h	equ	0xFDA
   732                           fsr2l	equ	0xFD9
   733                           status	equ	0xFD8
   734                           
   735 ;; *************** function ___lwmod *****************
   736 ;; Defined at:
   737 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
   738 ;; Parameters:    Size  Location     Type
   739 ;;  dividend        2   18[COMRAM] unsigned int 
   740 ;;  divisor         2   20[COMRAM] unsigned int 
   741 ;; Auto vars:     Size  Location     Type
   742 ;;  counter         1   22[COMRAM] unsigned char 
   743 ;; Return value:  Size  Location     Type
   744 ;;                  2   18[COMRAM] unsigned int 
   745 ;; Registers used:
   746 ;;		wreg, status,2, status,0
   747 ;; Tracked objects:
   748 ;;		On entry : 0/0
   749 ;;		On exit  : 0/0
   750 ;;		Unchanged: 0/0
   751 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   752 ;;      Params:         4       0       0       0       0       0       0       0       0
   753 ;;      Locals:         1       0       0       0       0       0       0       0       0
   754 ;;      Temps:          0       0       0       0       0       0       0       0       0
   755 ;;      Totals:         5       0       0       0       0       0       0       0       0
   756 ;;Total ram usage:        5 bytes
   757 ;; Hardware stack levels used:    1
   758 ;; Hardware stack levels required when called:    1
   759 ;; This function calls:
   760 ;;		Nothing
   761 ;; This function is called by:
   762 ;;		_ntan
   763 ;; This function uses a non-reentrant model
   764 ;;
   765                           
   766                           	psect	text5
   767  000A18                     __ptext5:
   768                           	opt stack 0
   769  000A18                     ___lwmod:
   770                           	opt stack 28
   771                           
   772                           ;incstack = 0
   773  000A18  5015               	movf	___lwmod@divisor,w,c
   774  000A1A  1016               	iorwf	___lwmod@divisor+1,w,c
   775  000A1C  B4D8               	btfsc	status,2,c
   776  000A1E  D018               	goto	l508
   777  000A20  0E01               	movlw	1
   778  000A22  6E17               	movwf	___lwmod@counter,c
   779  000A24  D004               	goto	l503
   780  000A26  90D8               	bcf	status,0,c
   781  000A28  3615               	rlcf	___lwmod@divisor,f,c
   782  000A2A  3616               	rlcf	___lwmod@divisor+1,f,c
   783  000A2C  2A17               	incf	___lwmod@counter,f,c
   784  000A2E                     l503:
   785  000A2E  AE16               	btfss	___lwmod@divisor+1,7,c
   786  000A30  D7FA               	goto	l504
   787  000A32                     u220:
   788  000A32  5015               	movf	___lwmod@divisor,w,c
   789  000A34  5C13               	subwf	___lwmod@dividend,w,c
   790  000A36  5016               	movf	___lwmod@divisor+1,w,c
   791  000A38  5814               	subwfb	___lwmod@dividend+1,w,c
   792  000A3A  A0D8               	btfss	status,0,c
   793  000A3C  D004               	goto	l507
   794  000A3E  5015               	movf	___lwmod@divisor,w,c
   795  000A40  5E13               	subwf	___lwmod@dividend,f,c
   796  000A42  5016               	movf	___lwmod@divisor+1,w,c
   797  000A44  5A14               	subwfb	___lwmod@dividend+1,f,c
   798  000A46                     l507:
   799  000A46  90D8               	bcf	status,0,c
   800  000A48  3216               	rrcf	___lwmod@divisor+1,f,c
   801  000A4A  3215               	rrcf	___lwmod@divisor,f,c
   802  000A4C  2E17               	decfsz	___lwmod@counter,f,c
   803  000A4E  D7F1               	goto	u220
   804  000A50                     l508:
   805  000A50  C013  F013         	movff	___lwmod@dividend,?___lwmod
   806  000A54  C014  F014         	movff	___lwmod@dividend+1,?___lwmod+1
   807  000A58  0012               	return		;funcret
   808  000A5A                     __end_of___lwmod:
   809                           	opt stack 0
   810                           tblptru	equ	0xFF8
   811                           tblptrh	equ	0xFF7
   812                           tblptrl	equ	0xFF6
   813                           tablat	equ	0xFF5
   814                           prodh	equ	0xFF4
   815                           prodl	equ	0xFF3
   816                           intcon	equ	0xFF2
   817                           intcon2	equ	0xFF1
   818                           postinc0	equ	0xFEE
   819                           wreg	equ	0xFE8
   820                           indf2	equ	0xFDF
   821                           fsr2h	equ	0xFDA
   822                           fsr2l	equ	0xFD9
   823                           status	equ	0xFD8
   824                           
   825 ;; *************** function ___lwdiv *****************
   826 ;; Defined at:
   827 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
   828 ;; Parameters:    Size  Location     Type
   829 ;;  dividend        2   18[COMRAM] unsigned int 
   830 ;;  divisor         2   20[COMRAM] unsigned int 
   831 ;; Auto vars:     Size  Location     Type
   832 ;;  quotient        2   22[COMRAM] unsigned int 
   833 ;;  counter         1   24[COMRAM] unsigned char 
   834 ;; Return value:  Size  Location     Type
   835 ;;                  2   18[COMRAM] unsigned int 
   836 ;; Registers used:
   837 ;;		wreg, status,2, status,0
   838 ;; Tracked objects:
   839 ;;		On entry : 0/0
   840 ;;		On exit  : 0/0
   841 ;;		Unchanged: 0/0
   842 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   843 ;;      Params:         4       0       0       0       0       0       0       0       0
   844 ;;      Locals:         3       0       0       0       0       0       0       0       0
   845 ;;      Temps:          0       0       0       0       0       0       0       0       0
   846 ;;      Totals:         7       0       0       0       0       0       0       0       0
   847 ;;Total ram usage:        7 bytes
   848 ;; Hardware stack levels used:    1
   849 ;; Hardware stack levels required when called:    1
   850 ;; This function calls:
   851 ;;		Nothing
   852 ;; This function is called by:
   853 ;;		_ntan
   854 ;; This function uses a non-reentrant model
   855 ;;
   856                           
   857                           	psect	text6
   858  000978                     __ptext6:
   859                           	opt stack 0
   860  000978                     ___lwdiv:
   861                           	opt stack 28
   862                           
   863                           ;incstack = 0
   864  000978  0E00               	movlw	0
   865  00097A  6E18               	movwf	___lwdiv@quotient+1,c
   866  00097C  0E00               	movlw	0
   867  00097E  6E17               	movwf	___lwdiv@quotient,c
   868  000980  5015               	movf	___lwdiv@divisor,w,c
   869  000982  1016               	iorwf	___lwdiv@divisor+1,w,c
   870  000984  B4D8               	btfsc	status,2,c
   871  000986  D01C               	goto	l498
   872  000988  0E01               	movlw	1
   873  00098A  6E19               	movwf	___lwdiv@counter,c
   874  00098C  D004               	goto	l493
   875  00098E  90D8               	bcf	status,0,c
   876  000990  3615               	rlcf	___lwdiv@divisor,f,c
   877  000992  3616               	rlcf	___lwdiv@divisor+1,f,c
   878  000994  2A19               	incf	___lwdiv@counter,f,c
   879  000996                     l493:
   880  000996  AE16               	btfss	___lwdiv@divisor+1,7,c
   881  000998  D7FA               	goto	l494
   882  00099A                     u190:
   883  00099A  90D8               	bcf	status,0,c
   884  00099C  3617               	rlcf	___lwdiv@quotient,f,c
   885  00099E  3618               	rlcf	___lwdiv@quotient+1,f,c
   886  0009A0  5015               	movf	___lwdiv@divisor,w,c
   887  0009A2  5C13               	subwf	___lwdiv@dividend,w,c
   888  0009A4  5016               	movf	___lwdiv@divisor+1,w,c
   889  0009A6  5814               	subwfb	___lwdiv@dividend+1,w,c
   890  0009A8  A0D8               	btfss	status,0,c
   891  0009AA  D005               	goto	l497
   892  0009AC  5015               	movf	___lwdiv@divisor,w,c
   893  0009AE  5E13               	subwf	___lwdiv@dividend,f,c
   894  0009B0  5016               	movf	___lwdiv@divisor+1,w,c
   895  0009B2  5A14               	subwfb	___lwdiv@dividend+1,f,c
   896  0009B4  8017               	bsf	___lwdiv@quotient,0,c
   897  0009B6                     l497:
   898  0009B6  90D8               	bcf	status,0,c
   899  0009B8  3216               	rrcf	___lwdiv@divisor+1,f,c
   900  0009BA  3215               	rrcf	___lwdiv@divisor,f,c
   901  0009BC  2E19               	decfsz	___lwdiv@counter,f,c
   902  0009BE  D7ED               	goto	u190
   903  0009C0                     l498:
   904  0009C0  C017  F013         	movff	___lwdiv@quotient,?___lwdiv
   905  0009C4  C018  F014         	movff	___lwdiv@quotient+1,?___lwdiv+1
   906  0009C8  0012               	return		;funcret
   907  0009CA                     __end_of___lwdiv:
   908                           	opt stack 0
   909                           tblptru	equ	0xFF8
   910                           tblptrh	equ	0xFF7
   911                           tblptrl	equ	0xFF6
   912                           tablat	equ	0xFF5
   913                           prodh	equ	0xFF4
   914                           prodl	equ	0xFF3
   915                           intcon	equ	0xFF2
   916                           intcon2	equ	0xFF1
   917                           postinc0	equ	0xFEE
   918                           wreg	equ	0xFE8
   919                           indf2	equ	0xFDF
   920                           fsr2h	equ	0xFDA
   921                           fsr2l	equ	0xFD9
   922                           status	equ	0xFD8
   923                           
   924 ;; *************** function _ISR *****************
   925 ;; Defined at:
   926 ;;		line 24 in file "main.c"
   927 ;; Parameters:    Size  Location     Type
   928 ;;		None
   929 ;; Auto vars:     Size  Location     Type
   930 ;;		None
   931 ;; Return value:  Size  Location     Type
   932 ;;                  1    wreg      void 
   933 ;; Registers used:
   934 ;;		wreg, status,2, status,0
   935 ;; Tracked objects:
   936 ;;		On entry : 0/0
   937 ;;		On exit  : 0/0
   938 ;;		Unchanged: 0/0
   939 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   940 ;;      Params:         0       0       0       0       0       0       0       0       0
   941 ;;      Locals:         0       0       0       0       0       0       0       0       0
   942 ;;      Temps:         18       0       0       0       0       0       0       0       0
   943 ;;      Totals:        18       0       0       0       0       0       0       0       0
   944 ;;Total ram usage:       18 bytes
   945 ;; Hardware stack levels used:    1
   946 ;; This function calls:
   947 ;;		Nothing
   948 ;; This function is called by:
   949 ;;		Interrupt level 2
   950 ;; This function uses a non-reentrant model
   951 ;;
   952                           
   953                           	psect	intcode
   954  000008                     __pintcode:
   955                           	opt stack 0
   956  000008                     _ISR:
   957                           	opt stack 28
   958                           
   959                           ;incstack = 0
   960  000008  8228               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
   961  00000A  ED09  F004         	call	int_func,f	;refresh shadow registers
   962                           tblptru	equ	0xFF8
   963                           tblptrh	equ	0xFF7
   964                           tblptrl	equ	0xFF6
   965                           tablat	equ	0xFF5
   966                           prodh	equ	0xFF4
   967                           prodl	equ	0xFF3
   968                           intcon	equ	0xFF2
   969                           intcon2	equ	0xFF1
   970                           postinc0	equ	0xFEE
   971                           wreg	equ	0xFE8
   972                           indf2	equ	0xFDF
   973                           fsr2h	equ	0xFDA
   974                           fsr2l	equ	0xFD9
   975                           status	equ	0xFD8
   976                           
   977                           	psect	intcode_body
   978  000812                     __pintcode_body:
   979                           	opt stack 28
   980  000812                     int_func:
   981                           	opt stack 28
   982  000812  0006               	pop		; remove dummy address from shadow register refresh
   983  000814  CFFA F001          	movff	pclath,??_ISR
   984  000818  CFFB F002          	movff	pclatu,??_ISR+1
   985  00081C  CFE9 F003          	movff	fsr0l,??_ISR+2
   986  000820  CFEA F004          	movff	fsr0h,??_ISR+3
   987  000824  CFE1 F005          	movff	fsr1l,??_ISR+4
   988  000828  CFE2 F006          	movff	fsr1h,??_ISR+5
   989  00082C  CFD9 F007          	movff	fsr2l,??_ISR+6
   990  000830  CFDA F008          	movff	fsr2h,??_ISR+7
   991  000834  CFF3 F009          	movff	prodl,??_ISR+8
   992  000838  CFF4 F00A          	movff	prodh,??_ISR+9
   993  00083C  CFF6 F00B          	movff	tblptrl,??_ISR+10
   994  000840  CFF7 F00C          	movff	tblptrh,??_ISR+11
   995  000844  CFF8 F00D          	movff	tblptru,??_ISR+12
   996  000848  CFF5 F00E          	movff	tablat,??_ISR+13
   997  00084C  C028  F00F         	movff	btemp,??_ISR+14
   998  000850  C029  F010         	movff	btemp+1,??_ISR+15
   999  000854  C02A  F011         	movff	btemp+2,??_ISR+16
  1000  000858  C02B  F012         	movff	btemp+3,??_ISR+17
  1001                           
  1002                           ;main.c: 25: if(PIR1bits.TMR1IF){
  1003  00085C  A09E               	btfss	3998,0,c	;volatile
  1004  00085E  D00E               	goto	i2l56
  1005                           
  1006                           ;main.c: 26: TMR1H |= 0x80;
  1007  000860  8ECF               	bsf	4047,7,c	;volatile
  1008                           
  1009                           ;main.c: 27: PIR1bits.TMR1IF = 0;
  1010  000862  909E               	bcf	3998,0,c	;volatile
  1011                           
  1012                           ;main.c: 28: if(++count>9999)
  1013  000864  4A20               	infsnz	_count,f,c
  1014  000866  2A21               	incf	_count+1,f,c
  1015  000868  0E10               	movlw	16
  1016  00086A  5C20               	subwf	_count,w,c
  1017  00086C  0E27               	movlw	39
  1018  00086E  5821               	subwfb	_count+1,w,c
  1019  000870  A0D8               	btfss	status,0,c
  1020  000872  D004               	goto	i2l56
  1021                           
  1022                           ;main.c: 29: count = 0;
  1023  000874  0E00               	movlw	0
  1024  000876  6E21               	movwf	_count+1,c
  1025  000878  0E00               	movlw	0
  1026  00087A  6E20               	movwf	_count,c
  1027  00087C                     i2l56:
  1028                           
  1029                           ;main.c: 30: }
  1030                           ;main.c: 31: if(INTCONbits.TMR0IF){
  1031  00087C  A4F2               	btfss	intcon,2,c	;volatile
  1032  00087E  D006               	goto	i2l57
  1033                           
  1034                           ;main.c: 32: TMR0L = 0x58;
  1035  000880  0E58               	movlw	88
  1036  000882  6ED6               	movwf	4054,c	;volatile
  1037                           
  1038                           ;main.c: 33: TMR0H = 0x9E;
  1039  000884  0E9E               	movlw	158
  1040  000886  6ED7               	movwf	4055,c	;volatile
  1041                           
  1042                           ;main.c: 34: INTCONbits.TMR0IF = 0;
  1043  000888  94F2               	bcf	intcon,2,c	;volatile
  1044                           
  1045                           ;main.c: 35: flag_t = 1;
  1046  00088A  8027               	bsf	_flag_t/(0+8),_flag_t& (0+7),c
  1047  00088C                     i2l57:
  1048  00088C  C012  F02B         	movff	??_ISR+17,btemp+3
  1049  000890  C011  F02A         	movff	??_ISR+16,btemp+2
  1050  000894  C010  F029         	movff	??_ISR+15,btemp+1
  1051  000898  C00F  F028         	movff	??_ISR+14,btemp
  1052  00089C  C00E  FFF5         	movff	??_ISR+13,tablat
  1053  0008A0  C00D  FFF8         	movff	??_ISR+12,tblptru
  1054  0008A4  C00C  FFF7         	movff	??_ISR+11,tblptrh
  1055  0008A8  C00B  FFF6         	movff	??_ISR+10,tblptrl
  1056  0008AC  C00A  FFF4         	movff	??_ISR+9,prodh
  1057  0008B0  C009  FFF3         	movff	??_ISR+8,prodl
  1058  0008B4  C008  FFDA         	movff	??_ISR+7,fsr2h
  1059  0008B8  C007  FFD9         	movff	??_ISR+6,fsr2l
  1060  0008BC  C006  FFE2         	movff	??_ISR+5,fsr1h
  1061  0008C0  C005  FFE1         	movff	??_ISR+4,fsr1l
  1062  0008C4  C004  FFEA         	movff	??_ISR+3,fsr0h
  1063  0008C8  C003  FFE9         	movff	??_ISR+2,fsr0l
  1064  0008CC  C002  FFFB         	movff	??_ISR+1,pclatu
  1065  0008D0  C001  FFFA         	movff	??_ISR,pclath
  1066  0008D4  9228               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  1067  0008D6  0011               	retfie		f
  1068  0008D8                     __end_of_ISR:
  1069                           	opt stack 0
  1070                           pclatu	equ	0xFFB
  1071                           pclath	equ	0xFFA
  1072                           tblptru	equ	0xFF8
  1073                           tblptrh	equ	0xFF7
  1074                           tblptrl	equ	0xFF6
  1075                           tablat	equ	0xFF5
  1076                           prodh	equ	0xFF4
  1077                           prodl	equ	0xFF3
  1078                           intcon	equ	0xFF2
  1079                           intcon2	equ	0xFF1
  1080                           postinc0	equ	0xFEE
  1081                           fsr0h	equ	0xFEA
  1082                           fsr0l	equ	0xFE9
  1083                           wreg	equ	0xFE8
  1084                           fsr1h	equ	0xFE2
  1085                           fsr1l	equ	0xFE1
  1086                           indf2	equ	0xFDF
  1087                           fsr2h	equ	0xFDA
  1088                           fsr2l	equ	0xFD9
  1089                           status	equ	0xFD8
  1090                           pclatu	equ	0xFFB
  1091                           pclath	equ	0xFFA
  1092                           tblptru	equ	0xFF8
  1093                           tblptrh	equ	0xFF7
  1094                           tblptrl	equ	0xFF6
  1095                           tablat	equ	0xFF5
  1096                           prodh	equ	0xFF4
  1097                           prodl	equ	0xFF3
  1098                           intcon	equ	0xFF2
  1099                           intcon2	equ	0xFF1
  1100                           postinc0	equ	0xFEE
  1101                           fsr0h	equ	0xFEA
  1102                           fsr0l	equ	0xFE9
  1103                           wreg	equ	0xFE8
  1104                           fsr1h	equ	0xFE2
  1105                           fsr1l	equ	0xFE1
  1106                           indf2	equ	0xFDF
  1107                           fsr2h	equ	0xFDA
  1108                           fsr2l	equ	0xFD9
  1109                           status	equ	0xFD8
  1110                           
  1111                           	psect	rparam
  1112  0000                     pclatu	equ	0xFFB
  1113                           pclath	equ	0xFFA
  1114                           tblptru	equ	0xFF8
  1115                           tblptrh	equ	0xFF7
  1116                           tblptrl	equ	0xFF6
  1117                           tablat	equ	0xFF5
  1118                           prodh	equ	0xFF4
  1119                           prodl	equ	0xFF3
  1120                           intcon	equ	0xFF2
  1121                           intcon2	equ	0xFF1
  1122                           postinc0	equ	0xFEE
  1123                           fsr0h	equ	0xFEA
  1124                           fsr0l	equ	0xFE9
  1125                           wreg	equ	0xFE8
  1126                           fsr1h	equ	0xFE2
  1127                           fsr1l	equ	0xFE1
  1128                           indf2	equ	0xFDF
  1129                           fsr2h	equ	0xFDA
  1130                           fsr2l	equ	0xFD9
  1131                           status	equ	0xFD8
  1132                           
  1133                           	psect	temp
  1134  000028                     btemp:
  1135                           	opt stack 0
  1136  000028                     	ds	1
  1137  0000                     int$flags	set	btemp
  1138  0000                     wtemp6	set	btemp+1
  1139                           pclatu	equ	0xFFB
  1140                           pclath	equ	0xFFA
  1141                           tblptru	equ	0xFF8
  1142                           tblptrh	equ	0xFF7
  1143                           tblptrl	equ	0xFF6
  1144                           tablat	equ	0xFF5
  1145                           prodh	equ	0xFF4
  1146                           prodl	equ	0xFF3
  1147                           intcon	equ	0xFF2
  1148                           intcon2	equ	0xFF1
  1149                           postinc0	equ	0xFEE
  1150                           fsr0h	equ	0xFEA
  1151                           fsr0l	equ	0xFE9
  1152                           wreg	equ	0xFE8
  1153                           fsr1h	equ	0xFE2
  1154                           fsr1l	equ	0xFE1
  1155                           indf2	equ	0xFDF
  1156                           fsr2h	equ	0xFDA
  1157                           fsr2l	equ	0xFD9
  1158                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    16
    Data        0
    BSS         7
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     31      39
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    show_count@ptr	PTR unsigned char  size(2) Largest target is 4
		 -> numDisplay(COMRAM[4]), 

    ntan@ptr	PTR unsigned char  size(2) Largest target is 4
		 -> numDisplay(COMRAM[4]), 


Critical Paths under _main in COMRAM

    _main->_ntan
    _show_count->_wait_timer
    _ntan->___lwdiv

Critical Paths under _ISR in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    1499
                               _ntan
                              _setup
                         _show_count
 ---------------------------------------------------------------------------------
 (1) _show_count                                           5     3      2     205
                                             19 COMRAM     5     3      2
                         _wait_timer
 ---------------------------------------------------------------------------------
 (2) _wait_timer                                           1     1      0      15
                                             18 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ntan                                                 6     1      5    1294
                                             25 COMRAM     6     1      5
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     463
                                             18 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     314
                                             18 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _ISR                                                 18    18      0       0
                                              0 COMRAM    18    18      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ntan
     ___lwdiv
     ___lwmod
   _setup
   _show_count
     _wait_timer

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5E      0       1       0        1.1%
COMRAM              5E     1F      27       1       41.5%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      27      20        0.0%
DATA                 0      0      27       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Thu May 31 23:19:30 2018

                     l63 0A8E                       l78 0ADE                       l79 0AD6  
                     l87 09DA              __CFG_BORV$3 000000             __CFG_CP0$OFF 000000  
           __CFG_CP1$OFF 000000             __CFG_CP2$OFF 000000             __CFG_CP3$OFF 000000  
                    l503 0A2E                      l504 0A26                      l507 0A46  
                    l508 0A50                      l493 0996                      l494 098E  
                    l497 09B6                      l905 09D2                      l498 09C0  
                    l893 0906             __CFG_CPB$OFF 000000                      u220 0A32  
                    u250 08FA                      u190 099A                      u270 094E  
           __CFG_CPD$OFF 000000                      _ISR 0008             __CFG_BOR$OFF 000000  
                    wreg 000FE8             __CFG_FOSC$HS 000000             __CFG_LVP$OFF 000000  
                   ?_ISR 0001             __CFG_WDT$OFF 000000                     _LATB 000F8A  
                   _LATD 000F8C                     i2l56 087C                     i2l57 088C  
                   _main 0A8A                     _ntan 08D8                     fsr0h 000FEA  
                   fsr1h 000FE2                     fsr2h 000FDA                     fsr0l 000FE9  
                   indf2 000FDF                     fsr1l 000FE1                     fsr2l 000FD9  
                   btemp 0028                     prodh 000FF4                     prodl 000FF3  
                   start 000E            __CFG_IESO$OFF 000000            __CFG_MCLRE$ON 000000  
           ___param_bank 000000                    ??_ISR 0001            __CFG_PLLDIV$1 000000  
          show_count@ptr 0014           __CFG_CCP2MX$ON 000000                    ?_main 0001  
                  ?_ntan 001A                    _CMCON 000FB4                    _T0CON 000FD5  
                  _T1CON 000FCD          __end_of___lwdiv 09CA          __end_of___lwmod 0A5A  
                  _TMR0H 000FD7                    _TMR1H 000FCF                    _TMR0L 000FD6  
          __CFG_USBDIV$1 000000                    _TRISB 000F93                    _TRISD 000F95  
        __end_of_dectoDy 0811            __CFG_PWRT$OFF 000000            __CFG_WRT0$OFF 000000  
          __CFG_WRT1$OFF 000000            __CFG_WRT2$OFF 000000            __CFG_WRT3$OFF 000000  
         __CFG_EBTR0$OFF 000000           __CFG_FCMEN$OFF 000000           __CFG_EBTR1$OFF 000000  
         __CFG_EBTR2$OFF 000000           __CFG_EBTR3$OFF 000000            __CFG_WRTB$OFF 000000  
          __CFG_WRTC$OFF 000000            __CFG_WRTD$OFF 000000           __CFG_EBTRB$OFF 000000  
                  _count 0020                    _setup 0A5A                    pclath 000FFA  
                  tablat 000FF5                    status 000FD8                    wtemp6 0029  
         __CFG_ICPRT$OFF 000000          __initialization 0AB4             __end_of_main 0AB4  
           __end_of_ntan 0978                   ??_main 0020                   ??_ntan 001F  
          __activetblptr 000001                   _ADCON1 000FC1                   ?_setup 0001  
         __CFG_XINST$OFF 000000           __CFG_STVREN$ON 000000                   _flag_t 0138  
              ??___lwdiv 0017                ??___lwmod 0017                   clear_0 0ABA  
           __mediumconst 0000                   tblptrh 000FF7                   tblptrl 000FF6  
                 tblptru 000FF8               __accesstop 0060  __end_of__initialization 0AC0  
        __CFG_PBADEN$OFF 000000            ___rparam_used 000001           __pcstackCOMRAM 0001  
          __end_of_setup 0A8A                  ??_setup 0013          __CFG_VREGEN$OFF 000000  
                __Hparam 0000                  __Lparam 0000                  ___lwdiv 0978  
                ___lwmod 0A18             __psmallconst 0800                  _dectoDy 0801  
                __pcinit 0AB4                  __ramtop 0800                  __ptext0 0A8A  
                __ptext1 09CA                  __ptext2 0AD2                  __ptext3 0A5A  
                __ptext4 08D8                  __ptext5 0A18                  __ptext6 0978  
           __size_of_ISR 08D0                  _count_t 0022           __pintcode_body 0812  
   end_of_initialization 0AC0               _numDisplay 0023                  int_func 0812  
                ntan@len 001E                  ntan@num 001C                  ntan@ptr 001A  
                postinc0 000FEE               _wait_timer 0AD2              wait_timer@n 0013  
             _show_count 09CA              show_count@a 0017              show_count@i 0018  
          __pbitnvCOMRAM 0138      start_initialization 0AB4              __end_of_ISR 08D8  
       __CFG_LPT1OSC$OFF 000000              ?_wait_timer 0001              ?_show_count 0014  
            __pbssCOMRAM 0020         ___lwdiv@dividend 0013                __pintcode 0008  
               ?___lwdiv 0013                 ?___lwmod 0013              __smallconst 0800  
       ___lwdiv@quotient 0017           __size_of_setup 0030      __size_of_wait_timer 0014  
               _IPR1bits 000F9F                 _PIE1bits 000F9D      __size_of_show_count 004E  
               _PIR1bits 000F9E                 _RCONbits 000FD0         __CFG_WDTPS$32768 000000  
            _INTCON2bits 000FF1                 __Hrparam 0000                 __Lrparam 0000  
           __Lsmallconst 0800         __size_of___lwdiv 0052         __size_of___lwmod 0042  
              ntan@index 001F          ___lwdiv@divisor 0015          ___lwdiv@counter 0019  
          __size_of_main 002A            __size_of_ntan 00A0                 int$flags 0028  
           ??_wait_timer 0013             ??_show_count 0016    __CFG_CPUDIV$OSC1_PLL2 000000  
             _INTCONbits 000FF2                 intlevel2 0000         ___lwmod@dividend 0013  
     __end_of_wait_timer 0AE6       __end_of_show_count 0A18          ___lwmod@divisor 0015  
        ___lwmod@counter 0017  
