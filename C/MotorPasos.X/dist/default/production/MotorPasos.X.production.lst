

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Fri Apr 13 05:14:02 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    18                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    19  0000                     
    20                           ; Version 1.45
    21                           ; Generated 16/11/2017 GMT
    22                           ; 
    23                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    24                           ; All rights reserved.
    25                           ; 
    26                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    27                           ; 
    28                           ; Redistribution and use in source and binary forms, with or without modification, are
    29                           ; permitted provided that the following conditions are met:
    30                           ; 
    31                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    32                           ;        conditions and the following disclaimer.
    33                           ; 
    34                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    35                           ;        of conditions and the following disclaimer in the documentation and/or other
    36                           ;        materials provided with the distribution.
    37                           ; 
    38                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    39                           ;        software without specific prior written permission.
    40                           ; 
    41                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    42                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    43                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    44                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    45                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    46                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    47                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    48                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    49                           ; 
    50                           ; 
    51                           ; Code-generator required, PIC18F4550 Definitions
    52                           ; 
    53                           ; SFR Addresses
    54  0000                     
    55                           	psect	smallconst
    56  000800                     __psmallconst:
    57                           	opt stack 0
    58  000800  00                 	db	0
    59  000801                     _medium_step:
    60                           	opt stack 0
    61  000801  01                 	db	1
    62  000802  03                 	db	3
    63  000803  02                 	db	2
    64  000804  06                 	db	6
    65  000805  04                 	db	4
    66  000806  0C                 	db	12
    67  000807  08                 	db	8
    68  000808  09                 	db	9
    69  000809                     __end_of_medium_step:
    70                           	opt stack 0
    71  000809                     _complete_step:
    72                           	opt stack 0
    73  000809  01                 	db	1
    74  00080A  02                 	db	2
    75  00080B  04                 	db	4
    76  00080C  08                 	db	8
    77  00080D                     __end_of_complete_step:
    78                           	opt stack 0
    79  0000                     _LATB	set	3978
    80  0000                     _TRISB	set	3987
    81                           
    82                           ; #config settings
    83  00080D  00                 	db	0	; dummy byte at the end
    84  0000                     
    85                           	psect	cinit
    86  000A60                     __pcinit:
    87                           	opt stack 0
    88  000A60                     start_initialization:
    89                           	opt stack 0
    90  000A60                     __initialization:
    91                           	opt stack 0
    92                           
    93                           ; Clear objects allocated to COMRAM (1 bytes)
    94  000A60  6A22               	clrf	__pbssCOMRAM& (0+255),c
    95  000A62                     end_of_initialization:
    96                           	opt stack 0
    97  000A62                     __end_of__initialization:
    98                           	opt stack 0
    99  000A62  0E00               	movlw	low (__Lsmallconst shr (0+16))
   100  000A64  6EF8               	movwf	tblptru,c
   101  000A66  0E08               	movlw	high __Lsmallconst
   102  000A68  6EF7               	movwf	tblptrh,c
   103  000A6A  0100               	movlb	0
   104  000A6C  EFBA  F004         	goto	_main	;jump to C main() function
   105                           tblptru	equ	0xFF8
   106                           tblptrh	equ	0xFF7
   107                           
   108                           	psect	bssCOMRAM
   109  000022                     __pbssCOMRAM:
   110                           	opt stack 0
   111  000022                     _Step:
   112                           	opt stack 0
   113  000022                     	ds	1
   114                           tblptru	equ	0xFF8
   115                           tblptrh	equ	0xFF7
   116                           
   117                           	psect	cstackCOMRAM
   118  000001                     __pcstackCOMRAM:
   119                           	opt stack 0
   120  000001                     ??_set_step:
   121  000001                     ?___wmul:
   122                           	opt stack 0
   123  000001                     ___wmul@multiplier:
   124                           	opt stack 0
   125  000001                     delay@t:
   126                           	opt stack 0
   127                           
   128                           ; 4 bytes @ 0x0
   129  000001                     	ds	1
   130  000002                     set_step@type:
   131                           	opt stack 0
   132                           
   133                           ; 1 bytes @ 0x1
   134  000002                     	ds	1
   135  000003                     _set_step$67:
   136                           	opt stack 0
   137  000003                     ___wmul@multiplicand:
   138                           	opt stack 0
   139                           
   140                           ; 2 bytes @ 0x2
   141  000003                     	ds	2
   142  000005                     ??_delay:
   143  000005                     next_step@type:
   144                           	opt stack 0
   145  000005                     ___wmul@product:
   146                           	opt stack 0
   147                           
   148                           ; 2 bytes @ 0x4
   149  000005                     	ds	1
   150  000006                     ??_next_step:
   151                           
   152                           ; 1 bytes @ 0x5
   153  000006                     	ds	7
   154  00000D                     next_step@dir:
   155                           	opt stack 0
   156                           
   157                           ; 1 bytes @ 0xC
   158  00000D                     	ds	1
   159  00000E                     _next_step$58:
   160                           	opt stack 0
   161                           
   162                           ; 2 bytes @ 0xD
   163  00000E                     	ds	2
   164  000010                     _next_step$59:
   165                           	opt stack 0
   166                           
   167                           ; 2 bytes @ 0xF
   168  000010                     	ds	2
   169  000012                     _next_step$60:
   170                           	opt stack 0
   171                           
   172                           ; 2 bytes @ 0x11
   173  000012                     	ds	2
   174  000014                     move_step@HowMany:
   175                           	opt stack 0
   176                           
   177                           ; 4 bytes @ 0x13
   178  000014                     	ds	4
   179  000018                     move_step@type:
   180                           	opt stack 0
   181                           
   182                           ; 1 bytes @ 0x17
   183  000018                     	ds	1
   184  000019                     full_turn@steps:
   185                           	opt stack 0
   186                           
   187                           ; 4 bytes @ 0x18
   188  000019                     	ds	4
   189  00001D                     ??_full_turn:
   190                           
   191                           ; 1 bytes @ 0x1C
   192  00001D                     	ds	4
   193  000021                     main@i:
   194                           	opt stack 0
   195                           
   196                           ; 1 bytes @ 0x20
   197  000021                     	ds	1
   198                           tblptru	equ	0xFF8
   199                           tblptrh	equ	0xFF7
   200                           
   201 ;;
   202 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   203 ;;
   204 ;; *************** function _main *****************
   205 ;; Defined at:
   206 ;;		line 28 in file "main.c"
   207 ;; Parameters:    Size  Location     Type
   208 ;;		None
   209 ;; Auto vars:     Size  Location     Type
   210 ;;  i               1   32[COMRAM] unsigned char 
   211 ;; Return value:  Size  Location     Type
   212 ;;                  1    wreg      void 
   213 ;; Registers used:
   214 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   215 ;; Tracked objects:
   216 ;;		On entry : 0/0
   217 ;;		On exit  : 0/0
   218 ;;		Unchanged: 0/0
   219 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   220 ;;      Params:         0       0       0       0       0       0       0       0       0
   221 ;;      Locals:         1       0       0       0       0       0       0       0       0
   222 ;;      Temps:          0       0       0       0       0       0       0       0       0
   223 ;;      Totals:         1       0       0       0       0       0       0       0       0
   224 ;;Total ram usage:        1 bytes
   225 ;; Hardware stack levels required when called:    4
   226 ;; This function calls:
   227 ;;		___wmul
   228 ;;		_full_turn
   229 ;;		_setup
   230 ;; This function is called by:
   231 ;;		Startup code after reset
   232 ;; This function uses a non-reentrant model
   233 ;;
   234                           
   235                           	psect	text0
   236  000974                     __ptext0:
   237                           	opt stack 0
   238  000974                     _main:
   239                           	opt stack 27
   240                           
   241                           ;main.c: 29: setup();
   242                           
   243                           ;incstack = 0
   244  000974  EC38  F005         	call	_setup	;wreg free
   245  000978                     
   246                           ;main.c: 31: full_turn(4096);
   247  000978  0E00               	movlw	0
   248  00097A  6E19               	movwf	full_turn@steps,c
   249  00097C  0E10               	movlw	16
   250  00097E  6E1A               	movwf	full_turn@steps+1,c
   251  000980  0E00               	movlw	0
   252  000982  6E1B               	movwf	full_turn@steps+2,c
   253  000984  0E00               	movlw	0
   254  000986  6E1C               	movwf	full_turn@steps+3,c
   255  000988  EC49  F004         	call	_full_turn	;wreg free
   256                           
   257                           ;main.c: 32: for (byte i = 1; i <= 11; ++i)
   258  00098C  0E01               	movlw	1
   259  00098E  6E21               	movwf	main@i,c
   260  000990                     l842:
   261  000990  0E0B               	movlw	11
   262  000992  6421               	cpfsgt	main@i,c
   263  000994  D001               	goto	l24
   264  000996  D7F0               	goto	l23
   265  000998                     l24:
   266                           
   267                           ;main.c: 33: full_turn(341*i);
   268  000998  C021  F001         	movff	main@i,___wmul@multiplier
   269  00099C  6A02               	clrf	___wmul@multiplier+1,c
   270  00099E  0E01               	movlw	1
   271  0009A0  6E04               	movwf	___wmul@multiplicand+1,c
   272  0009A2  0E55               	movlw	85
   273  0009A4  6E03               	movwf	___wmul@multiplicand,c
   274  0009A6  EC1D  F005         	call	___wmul	;wreg free
   275  0009AA  C001  F019         	movff	?___wmul,full_turn@steps
   276  0009AE  C002  F01A         	movff	?___wmul+1,full_turn@steps+1
   277  0009B2  0E00               	movlw	0
   278  0009B4  BE1A               	btfsc	full_turn@steps+1,7,c
   279  0009B6  0EFF               	movlw	-1
   280  0009B8  6E1B               	movwf	full_turn@steps+2,c
   281  0009BA  6E1C               	movwf	full_turn@steps+3,c
   282  0009BC  EC49  F004         	call	_full_turn	;wreg free
   283  0009C0  2A21               	incf	main@i,f,c
   284  0009C2  D7E6               	goto	l842
   285  0009C4                     __end_of_main:
   286                           	opt stack 0
   287                           tblptru	equ	0xFF8
   288                           tblptrh	equ	0xFF7
   289                           
   290 ;; *************** function _setup *****************
   291 ;; Defined at:
   292 ;;		line 37 in file "main.c"
   293 ;; Parameters:    Size  Location     Type
   294 ;;		None
   295 ;; Auto vars:     Size  Location     Type
   296 ;;		None
   297 ;; Return value:  Size  Location     Type
   298 ;;                  1    wreg      void 
   299 ;; Registers used:
   300 ;;		wreg, status,2
   301 ;; Tracked objects:
   302 ;;		On entry : 0/0
   303 ;;		On exit  : 0/0
   304 ;;		Unchanged: 0/0
   305 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   306 ;;      Params:         0       0       0       0       0       0       0       0       0
   307 ;;      Locals:         0       0       0       0       0       0       0       0       0
   308 ;;      Temps:          0       0       0       0       0       0       0       0       0
   309 ;;      Totals:         0       0       0       0       0       0       0       0       0
   310 ;;Total ram usage:        0 bytes
   311 ;; Hardware stack levels used:    1
   312 ;; This function calls:
   313 ;;		Nothing
   314 ;; This function is called by:
   315 ;;		_main
   316 ;; This function uses a non-reentrant model
   317 ;;
   318                           
   319                           	psect	text1
   320  000A70                     __ptext1:
   321                           	opt stack 0
   322  000A70                     _setup:
   323                           	opt stack 30
   324                           
   325                           ;main.c: 38: TRISB = 0xF0;
   326                           
   327                           ;incstack = 0
   328  000A70  0EF0               	movlw	240
   329  000A72  6E93               	movwf	3987,c	;volatile
   330                           
   331                           ;main.c: 39: LATB = 0;
   332  000A74  0E00               	movlw	0
   333  000A76  6E8A               	movwf	3978,c	;volatile
   334  000A78  0012               	return		;funcret
   335  000A7A                     __end_of_setup:
   336                           	opt stack 0
   337                           tblptru	equ	0xFF8
   338                           tblptrh	equ	0xFF7
   339                           
   340 ;; *************** function _full_turn *****************
   341 ;; Defined at:
   342 ;;		line 61 in file "main.c"
   343 ;; Parameters:    Size  Location     Type
   344 ;;  steps           4   24[COMRAM] long 
   345 ;; Auto vars:     Size  Location     Type
   346 ;;		None
   347 ;; Return value:  Size  Location     Type
   348 ;;                  1    wreg      void 
   349 ;; Registers used:
   350 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   351 ;; Tracked objects:
   352 ;;		On entry : 0/0
   353 ;;		On exit  : 0/0
   354 ;;		Unchanged: 0/0
   355 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   356 ;;      Params:         4       0       0       0       0       0       0       0       0
   357 ;;      Locals:         0       0       0       0       0       0       0       0       0
   358 ;;      Temps:          4       0       0       0       0       0       0       0       0
   359 ;;      Totals:         8       0       0       0       0       0       0       0       0
   360 ;;Total ram usage:        8 bytes
   361 ;; Hardware stack levels used:    1
   362 ;; Hardware stack levels required when called:    3
   363 ;; This function calls:
   364 ;;		_delay
   365 ;;		_move_step
   366 ;; This function is called by:
   367 ;;		_main
   368 ;; This function uses a non-reentrant model
   369 ;;
   370                           
   371                           	psect	text2
   372  000892                     __ptext2:
   373                           	opt stack 0
   374  000892                     _full_turn:
   375                           	opt stack 27
   376                           
   377                           ;main.c: 62: move_step(steps*-1,8);
   378                           
   379                           ;incstack = 0
   380  000892  C019  F01D         	movff	full_turn@steps,??_full_turn
   381  000896  C01A  F01E         	movff	full_turn@steps+1,??_full_turn+1
   382  00089A  C01B  F01F         	movff	full_turn@steps+2,??_full_turn+2
   383  00089E  C01C  F020         	movff	full_turn@steps+3,??_full_turn+3
   384  0008A2  1E1D               	comf	??_full_turn,f,c
   385  0008A4  1E1E               	comf	??_full_turn+1,f,c
   386  0008A6  1E1F               	comf	??_full_turn+2,f,c
   387  0008A8  1E20               	comf	??_full_turn+3,f,c
   388  0008AA  2A1D               	incf	??_full_turn,f,c
   389  0008AC  0E00               	movlw	0
   390  0008AE  221E               	addwfc	??_full_turn+1,f,c
   391  0008B0  221F               	addwfc	??_full_turn+2,f,c
   392  0008B2  2220               	addwfc	??_full_turn+3,f,c
   393  0008B4  C01D  F014         	movff	??_full_turn,move_step@HowMany
   394  0008B8  C01E  F015         	movff	??_full_turn+1,move_step@HowMany+1
   395  0008BC  C01F  F016         	movff	??_full_turn+2,move_step@HowMany+2
   396  0008C0  C020  F017         	movff	??_full_turn+3,move_step@HowMany+3
   397  0008C4  0E08               	movlw	8
   398  0008C6  6E18               	movwf	move_step@type,c
   399  0008C8  EC87  F004         	call	_move_step	;wreg free
   400                           
   401                           ;main.c: 63: delay(250);
   402  0008CC  0EFA               	movlw	250
   403  0008CE  6E01               	movwf	delay@t,c
   404  0008D0  0E00               	movlw	0
   405  0008D2  6E02               	movwf	delay@t+1,c
   406  0008D4  0E00               	movlw	0
   407  0008D6  6E03               	movwf	delay@t+2,c
   408  0008D8  0E00               	movlw	0
   409  0008DA  6E04               	movwf	delay@t+3,c
   410  0008DC  EC05  F005         	call	_delay	;wreg free
   411                           
   412                           ;main.c: 64: move_step(steps,8);
   413  0008E0  C019  F014         	movff	full_turn@steps,move_step@HowMany
   414  0008E4  C01A  F015         	movff	full_turn@steps+1,move_step@HowMany+1
   415  0008E8  C01B  F016         	movff	full_turn@steps+2,move_step@HowMany+2
   416  0008EC  C01C  F017         	movff	full_turn@steps+3,move_step@HowMany+3
   417  0008F0  0E08               	movlw	8
   418  0008F2  6E18               	movwf	move_step@type,c
   419  0008F4  EC87  F004         	call	_move_step	;wreg free
   420                           
   421                           ;main.c: 65: delay(250);
   422  0008F8  0EFA               	movlw	250
   423  0008FA  6E01               	movwf	delay@t,c
   424  0008FC  0E00               	movlw	0
   425  0008FE  6E02               	movwf	delay@t+1,c
   426  000900  0E00               	movlw	0
   427  000902  6E03               	movwf	delay@t+2,c
   428  000904  0E00               	movlw	0
   429  000906  6E04               	movwf	delay@t+3,c
   430  000908  EC05  F005         	call	_delay	;wreg free
   431  00090C  0012               	return		;funcret
   432  00090E                     __end_of_full_turn:
   433                           	opt stack 0
   434                           tblptru	equ	0xFF8
   435                           tblptrh	equ	0xFF7
   436                           
   437 ;; *************** function _move_step *****************
   438 ;; Defined at:
   439 ;;		line 49 in file "main.c"
   440 ;; Parameters:    Size  Location     Type
   441 ;;  HowMany         4   19[COMRAM] long 
   442 ;;  type            1   23[COMRAM] unsigned char 
   443 ;; Auto vars:     Size  Location     Type
   444 ;;		None
   445 ;; Return value:  Size  Location     Type
   446 ;;                  1    wreg      void 
   447 ;; Registers used:
   448 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   449 ;; Tracked objects:
   450 ;;		On entry : 0/0
   451 ;;		On exit  : 0/0
   452 ;;		Unchanged: 0/0
   453 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   454 ;;      Params:         5       0       0       0       0       0       0       0       0
   455 ;;      Locals:         0       0       0       0       0       0       0       0       0
   456 ;;      Temps:          0       0       0       0       0       0       0       0       0
   457 ;;      Totals:         5       0       0       0       0       0       0       0       0
   458 ;;Total ram usage:        5 bytes
   459 ;; Hardware stack levels used:    1
   460 ;; Hardware stack levels required when called:    2
   461 ;; This function calls:
   462 ;;		_next_step
   463 ;; This function is called by:
   464 ;;		_full_turn
   465 ;; This function uses a non-reentrant model
   466 ;;
   467                           
   468                           	psect	text3
   469  00090E                     __ptext3:
   470                           	opt stack 0
   471  00090E                     _move_step:
   472                           	opt stack 27
   473                           
   474                           ;main.c: 50: if(HowMany>0)
   475                           
   476                           ;incstack = 0
   477  00090E  BE17               	btfsc	move_step@HowMany+3,7,c
   478  000910  D024               	goto	l59
   479  000912  5017               	movf	move_step@HowMany+3,w,c
   480  000914  1016               	iorwf	move_step@HowMany+2,w,c
   481  000916  1015               	iorwf	move_step@HowMany+1,w,c
   482  000918  E109               	bnz	l818
   483  00091A  0414               	decf	move_step@HowMany,w,c
   484  00091C  B0D8               	btfsc	status,0,c
   485  00091E  D006               	goto	l55
   486  000920  D01C               	goto	l59
   487  000922                     l816:
   488                           
   489                           ;main.c: 52: next_step(1,type);
   490  000922  C018  F005         	movff	move_step@type,next_step@type
   491  000926  0E01               	movlw	1
   492  000928  EC07  F004         	call	_next_step
   493  00092C                     l55:
   494  00092C                     l818:
   495  00092C  0EFF               	movlw	255
   496  00092E  2614               	addwf	move_step@HowMany,f,c
   497  000930  0EFF               	movlw	255
   498  000932  2215               	addwfc	move_step@HowMany+1,f,c
   499  000934  0EFF               	movlw	255
   500  000936  2216               	addwfc	move_step@HowMany+2,f,c
   501  000938  0EFF               	movlw	255
   502  00093A  2217               	addwfc	move_step@HowMany+3,f,c
   503  00093C  2814               	incf	move_step@HowMany,w,c
   504  00093E  E1F1               	bnz	l816
   505  000940  2815               	incf	move_step@HowMany+1,w,c
   506  000942  E1EF               	bnz	l816
   507  000944  2816               	incf	move_step@HowMany+2,w,c
   508  000946  E1ED               	bnz	l816
   509  000948  2817               	incf	move_step@HowMany+3,w,c
   510  00094A  B4D8               	btfsc	status,2,c
   511  00094C  0012               	return	
   512  00094E  D7E9               	goto	l56
   513  000950                     
   514                           ;main.c: 55: next_step(0,type);
   515  000950  C018  F005         	movff	move_step@type,next_step@type
   516  000954  0E00               	movlw	0
   517  000956  EC07  F004         	call	_next_step
   518  00095A                     l59:
   519  00095A  0E01               	movlw	1
   520  00095C  2614               	addwf	move_step@HowMany,f,c
   521  00095E  0E00               	movlw	0
   522  000960  2215               	addwfc	move_step@HowMany+1,f,c
   523  000962  2216               	addwfc	move_step@HowMany+2,f,c
   524  000964  2217               	addwfc	move_step@HowMany+3,f,c
   525  000966  0414               	decf	move_step@HowMany,w,c
   526  000968  1015               	iorwf	move_step@HowMany+1,w,c
   527  00096A  1016               	iorwf	move_step@HowMany+2,w,c
   528  00096C  1017               	iorwf	move_step@HowMany+3,w,c
   529  00096E  B4D8               	btfsc	status,2,c
   530  000970  0012               	return	
   531  000972  D7EE               	goto	l60
   532  000974                     __end_of_move_step:
   533                           	opt stack 0
   534                           tblptru	equ	0xFF8
   535                           tblptrh	equ	0xFF7
   536                           status	equ	0xFD8
   537                           
   538 ;; *************** function _next_step *****************
   539 ;; Defined at:
   540 ;;		line 45 in file "main.c"
   541 ;; Parameters:    Size  Location     Type
   542 ;;  dir             1    wreg     unsigned char 
   543 ;;  type            1    4[COMRAM] unsigned char 
   544 ;; Auto vars:     Size  Location     Type
   545 ;;  dir             1   12[COMRAM] unsigned char 
   546 ;; Return value:  Size  Location     Type
   547 ;;                  1    wreg      void 
   548 ;; Registers used:
   549 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   550 ;; Tracked objects:
   551 ;;		On entry : 0/0
   552 ;;		On exit  : 0/0
   553 ;;		Unchanged: 0/0
   554 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   555 ;;      Params:         1       0       0       0       0       0       0       0       0
   556 ;;      Locals:         7       0       0       0       0       0       0       0       0
   557 ;;      Temps:          7       0       0       0       0       0       0       0       0
   558 ;;      Totals:        15       0       0       0       0       0       0       0       0
   559 ;;Total ram usage:       15 bytes
   560 ;; Hardware stack levels used:    1
   561 ;; Hardware stack levels required when called:    1
   562 ;; This function calls:
   563 ;;		_set_step
   564 ;; This function is called by:
   565 ;;		_move_step
   566 ;; This function uses a non-reentrant model
   567 ;;
   568                           
   569                           	psect	text4
   570  00080E                     __ptext4:
   571                           	opt stack 0
   572  00080E                     _next_step:
   573                           	opt stack 27
   574                           
   575                           ;incstack = 0
   576                           ;next_step@dir stored from wreg
   577  00080E  6E0D               	movwf	next_step@dir,c
   578                           
   579                           ;main.c: 46: Step = dir? (Step>=type-1? 0 : Step+1) : (Step<=0? type-1 : Step-1);
   580  000810  500D               	movf	next_step@dir,w,c
   581  000812  A4D8               	btfss	status,2,c
   582  000814  D011               	goto	l40
   583  000816  5022               	movf	_Step,w,c
   584  000818  B4D8               	btfsc	status,2,c
   585  00081A  D003               	goto	l44
   586  00081C  0EFF               	movlw	255
   587  00081E  2422               	addwf	_Step,w,c
   588  000820  D002               	goto	L1
   589  000822                     l44:
   590  000822  0EFF               	movlw	255
   591  000824  2405               	addwf	next_step@type,w,c
   592  000826                     L1:
   593  000826  6E10               	movwf	_next_step$59,c
   594  000828  6A11               	clrf	_next_step$59+1,c
   595  00082A  0EFF               	movlw	255
   596  00082C  2211               	addwfc	_next_step$59+1,f,c
   597  00082E  C010  F00E         	movff	_next_step$59,_next_step$58
   598  000832  C011  F00F         	movff	_next_step$59+1,_next_step$58+1
   599  000836  D027               	goto	l42
   600  000838                     l40:
   601  000838  0EFF               	movlw	255
   602  00083A  6E06               	movwf	??_next_step& (0+255),c
   603  00083C  0EFF               	movlw	255
   604  00083E  6E07               	movwf	(??_next_step+1)& (0+255),c
   605  000840  5005               	movf	next_step@type,w,c
   606  000842  6E08               	movwf	(??_next_step+2)& (0+255),c
   607  000844  6A09               	clrf	(??_next_step+3)& (0+255),c
   608  000846  5006               	movf	??_next_step,w,c
   609  000848  2608               	addwf	??_next_step+2,f,c
   610  00084A  5007               	movf	??_next_step+1,w,c
   611  00084C  2209               	addwfc	??_next_step+3,f,c
   612  00084E  5022               	movf	_Step,w,c
   613  000850  6E0A               	movwf	(??_next_step+4)& (0+255),c
   614  000852  6A0B               	clrf	(??_next_step+5)& (0+255),c
   615  000854  5008               	movf	??_next_step+2,w,c
   616  000856  5C0A               	subwf	??_next_step+4,w,c
   617  000858  500B               	movf	??_next_step+5,w,c
   618  00085A  0A80               	xorlw	128
   619  00085C  6E0C               	movwf	(??_next_step+6)& (0+255),c
   620  00085E  5009               	movf	??_next_step+3,w,c
   621  000860  0A80               	xorlw	128
   622  000862  580C               	subwfb	(??_next_step+6)& (0+255),w,c
   623  000864  B0D8               	btfsc	status,0,c
   624  000866  D007               	goto	l48
   625  000868  0E01               	movlw	1
   626  00086A  2422               	addwf	_Step,w,c
   627  00086C  6E12               	movwf	_next_step$60,c
   628  00086E  6A13               	clrf	_next_step$60+1,c
   629  000870  0E00               	movlw	0
   630  000872  2213               	addwfc	_next_step$60+1,f,c
   631  000874  D004               	goto	l50
   632  000876                     l48:
   633  000876  0E00               	movlw	0
   634  000878  6E13               	movwf	_next_step$60+1,c
   635  00087A  0E00               	movlw	0
   636  00087C  6E12               	movwf	_next_step$60,c
   637  00087E                     l50:
   638  00087E  C012  F00E         	movff	_next_step$60,_next_step$58
   639  000882  C013  F00F         	movff	_next_step$60+1,_next_step$58+1
   640  000886                     l42:
   641  000886  C00E  F022         	movff	_next_step$58,_Step
   642                           
   643                           ;main.c: 47: set_step(type);
   644  00088A  5005               	movf	next_step@type,w,c
   645  00088C  ECE2  F004         	call	_set_step
   646  000890  0012               	return		;funcret
   647  000892                     __end_of_next_step:
   648                           	opt stack 0
   649                           tblptru	equ	0xFF8
   650                           tblptrh	equ	0xFF7
   651                           status	equ	0xFD8
   652                           
   653 ;; *************** function _set_step *****************
   654 ;; Defined at:
   655 ;;		line 57 in file "main.c"
   656 ;; Parameters:    Size  Location     Type
   657 ;;  type            1    wreg     unsigned char 
   658 ;; Auto vars:     Size  Location     Type
   659 ;;  type            1    1[COMRAM] unsigned char 
   660 ;; Return value:  Size  Location     Type
   661 ;;                  1    wreg      void 
   662 ;; Registers used:
   663 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
   664 ;; Tracked objects:
   665 ;;		On entry : 0/0
   666 ;;		On exit  : 0/0
   667 ;;		Unchanged: 0/0
   668 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   669 ;;      Params:         0       0       0       0       0       0       0       0       0
   670 ;;      Locals:         3       0       0       0       0       0       0       0       0
   671 ;;      Temps:          1       0       0       0       0       0       0       0       0
   672 ;;      Totals:         4       0       0       0       0       0       0       0       0
   673 ;;Total ram usage:        4 bytes
   674 ;; Hardware stack levels used:    1
   675 ;; This function calls:
   676 ;;		Nothing
   677 ;; This function is called by:
   678 ;;		_next_step
   679 ;; This function uses a non-reentrant model
   680 ;;
   681                           
   682                           	psect	text5
   683  0009C4                     __ptext5:
   684                           	opt stack 0
   685  0009C4                     _set_step:
   686                           	opt stack 27
   687                           
   688                           ;incstack = 0
   689                           ;set_step@type stored from wreg
   690  0009C4  6E02               	movwf	set_step@type,c
   691                           
   692                           ;main.c: 58: LATB = 0x0F & (type==4? complete_step[Step] : medium_step[Step]);
   693  0009C6  0E04               	movlw	4
   694  0009C8  1802               	xorwf	set_step@type,w,c
   695  0009CA  B4D8               	btfsc	status,2,c
   696  0009CC  D007               	goto	l66
   697  0009CE  5022               	movf	_Step,w,c
   698  0009D0  0D01               	mullw	1
   699  0009D2  0E01               	movlw	low _medium_step
   700  0009D4  24F3               	addwf	prodl,w,c
   701  0009D6  6EF6               	movwf	tblptrl,c
   702  0009D8  0E08               	movlw	high _medium_step
   703  0009DA  D006               	goto	L2
   704  0009DC                     l66:
   705  0009DC  5022               	movf	_Step,w,c
   706  0009DE  0D01               	mullw	1
   707  0009E0  0E09               	movlw	low _complete_step
   708  0009E2  24F3               	addwf	prodl,w,c
   709  0009E4  6EF6               	movwf	tblptrl,c
   710  0009E6  0E08               	movlw	high _complete_step
   711  0009E8                     L2:
   712  0009E8  20F4               	addwfc	prodh,w,c
   713  0009EA  6EF7               	movwf	tblptrh,c
   714  0009EC                     	if	0	;There are less than 3 active tblptr bytes
   715  0009EC                     	endif
   716  0009EC  0008               	tblrd		*
   717  0009EE  50F5               	movf	tablat,w,c
   718  0009F0  6E03               	movwf	_set_step$67,c
   719  0009F2  6A04               	clrf	_set_step$67+1,c
   720  0009F4  5003               	movf	_set_step$67,w,c
   721  0009F6  0B0F               	andlw	15
   722  0009F8  6E8A               	movwf	3978,c	;volatile
   723                           
   724                           ;main.c: 59: _delay((unsigned long)((2)*(20000000/4000.0)));
   725  0009FA  0E0D               	movlw	13
   726  0009FC  6E01               	movwf	??_set_step& (0+255),c
   727  0009FE  0EFC               	movlw	252
   728  000A00                     u217:
   729  000A00  2EE8               	decfsz	wreg,f,c
   730  000A02  D7FE               	bra	u217
   731  000A04  2E01               	decfsz	??_set_step& (0+255),f,c
   732  000A06  D7FC               	bra	u217
   733  000A08  0012               	return		;funcret
   734  000A0A                     __end_of_set_step:
   735                           	opt stack 0
   736                           tblptru	equ	0xFF8
   737                           tblptrh	equ	0xFF7
   738                           tblptrl	equ	0xFF6
   739                           tablat	equ	0xFF5
   740                           prodh	equ	0xFF4
   741                           prodl	equ	0xFF3
   742                           wreg	equ	0xFE8
   743                           status	equ	0xFD8
   744                           
   745 ;; *************** function _delay *****************
   746 ;; Defined at:
   747 ;;		line 41 in file "main.c"
   748 ;; Parameters:    Size  Location     Type
   749 ;;  t               4    0[COMRAM] unsigned long 
   750 ;; Auto vars:     Size  Location     Type
   751 ;;		None
   752 ;; Return value:  Size  Location     Type
   753 ;;                  1    wreg      void 
   754 ;; Registers used:
   755 ;;		wreg, status,2, status,0
   756 ;; Tracked objects:
   757 ;;		On entry : 0/0
   758 ;;		On exit  : 0/0
   759 ;;		Unchanged: 0/0
   760 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   761 ;;      Params:         4       0       0       0       0       0       0       0       0
   762 ;;      Locals:         0       0       0       0       0       0       0       0       0
   763 ;;      Temps:          1       0       0       0       0       0       0       0       0
   764 ;;      Totals:         5       0       0       0       0       0       0       0       0
   765 ;;Total ram usage:        5 bytes
   766 ;; Hardware stack levels used:    1
   767 ;; This function calls:
   768 ;;		Nothing
   769 ;; This function is called by:
   770 ;;		_full_turn
   771 ;; This function uses a non-reentrant model
   772 ;;
   773                           
   774                           	psect	text6
   775  000A0A                     __ptext6:
   776                           	opt stack 0
   777  000A0A                     _delay:
   778                           	opt stack 29
   779                           
   780                           ;main.c: 42: while(t--)
   781                           
   782                           ;incstack = 0
   783  000A0A  D008               	goto	l33
   784  000A0C                     l808:
   785                           
   786                           ;main.c: 43: _delay((unsigned long)((1)*(20000000/4000.0)));
   787  000A0C  0E07               	movlw	7
   788  000A0E  6E05               	movwf	??_delay& (0+255),c
   789  000A10  0E7D               	movlw	125
   790  000A12                     u227:
   791  000A12  2EE8               	decfsz	wreg,f,c
   792  000A14  D7FE               	bra	u227
   793  000A16  2E05               	decfsz	??_delay& (0+255),f,c
   794  000A18  D7FC               	bra	u227
   795  000A1A  F000               	nop	
   796  000A1C                     l33:
   797  000A1C  0601               	decf	delay@t,f,c
   798  000A1E  0E00               	movlw	0
   799  000A20  5A02               	subwfb	delay@t+1,f,c
   800  000A22  5A03               	subwfb	delay@t+2,f,c
   801  000A24  5A04               	subwfb	delay@t+3,f,c
   802  000A26  2801               	incf	delay@t,w,c
   803  000A28  E1F1               	bnz	l808
   804  000A2A  2802               	incf	delay@t+1,w,c
   805  000A2C  E1EF               	bnz	l808
   806  000A2E  2803               	incf	delay@t+2,w,c
   807  000A30  E1ED               	bnz	l808
   808  000A32  2804               	incf	delay@t+3,w,c
   809  000A34  B4D8               	btfsc	status,2,c
   810  000A36  0012               	return	
   811  000A38  D7E9               	goto	l34
   812  000A3A                     __end_of_delay:
   813                           	opt stack 0
   814                           tblptru	equ	0xFF8
   815                           tblptrh	equ	0xFF7
   816                           tblptrl	equ	0xFF6
   817                           tablat	equ	0xFF5
   818                           prodh	equ	0xFF4
   819                           prodl	equ	0xFF3
   820                           wreg	equ	0xFE8
   821                           status	equ	0xFD8
   822                           
   823 ;; *************** function ___wmul *****************
   824 ;; Defined at:
   825 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
   826 ;; Parameters:    Size  Location     Type
   827 ;;  multiplier      2    0[COMRAM] unsigned int 
   828 ;;  multiplicand    2    2[COMRAM] unsigned int 
   829 ;; Auto vars:     Size  Location     Type
   830 ;;  product         2    4[COMRAM] unsigned int 
   831 ;; Return value:  Size  Location     Type
   832 ;;                  2    0[COMRAM] unsigned int 
   833 ;; Registers used:
   834 ;;		wreg, status,2, status,0, prodl, prodh
   835 ;; Tracked objects:
   836 ;;		On entry : 0/0
   837 ;;		On exit  : 0/0
   838 ;;		Unchanged: 0/0
   839 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   840 ;;      Params:         4       0       0       0       0       0       0       0       0
   841 ;;      Locals:         2       0       0       0       0       0       0       0       0
   842 ;;      Temps:          0       0       0       0       0       0       0       0       0
   843 ;;      Totals:         6       0       0       0       0       0       0       0       0
   844 ;;Total ram usage:        6 bytes
   845 ;; Hardware stack levels used:    1
   846 ;; This function calls:
   847 ;;		Nothing
   848 ;; This function is called by:
   849 ;;		_main
   850 ;; This function uses a non-reentrant model
   851 ;;
   852                           
   853                           	psect	text7
   854  000A3A                     __ptext7:
   855                           	opt stack 0
   856  000A3A                     ___wmul:
   857                           	opt stack 30
   858                           
   859                           ;incstack = 0
   860  000A3A  5001               	movf	___wmul@multiplier,w,c
   861  000A3C  0203               	mulwf	___wmul@multiplicand,c
   862  000A3E  CFF3 F005          	movff	prodl,___wmul@product
   863  000A42  CFF4 F006          	movff	prodh,___wmul@product+1
   864  000A46  5001               	movf	___wmul@multiplier,w,c
   865  000A48  0204               	mulwf	___wmul@multiplicand+1,c
   866  000A4A  50F3               	movf	prodl,w,c
   867  000A4C  2606               	addwf	___wmul@product+1,f,c
   868  000A4E  5002               	movf	___wmul@multiplier+1,w,c
   869  000A50  0203               	mulwf	___wmul@multiplicand,c
   870  000A52  50F3               	movf	prodl,w,c
   871  000A54  2606               	addwf	___wmul@product+1,f,c
   872  000A56  C005  F001         	movff	___wmul@product,?___wmul
   873  000A5A  C006  F002         	movff	___wmul@product+1,?___wmul+1
   874  000A5E  0012               	return	
   875  000A60                     __end_of___wmul:
   876                           	opt stack 0
   877                           tblptru	equ	0xFF8
   878                           tblptrh	equ	0xFF7
   879                           tblptrl	equ	0xFF6
   880                           tablat	equ	0xFF5
   881                           prodh	equ	0xFF4
   882                           prodl	equ	0xFF3
   883                           wreg	equ	0xFE8
   884                           status	equ	0xFD8
   885                           tblptru	equ	0xFF8
   886                           tblptrh	equ	0xFF7
   887                           tblptrl	equ	0xFF6
   888                           tablat	equ	0xFF5
   889                           prodh	equ	0xFF4
   890                           prodl	equ	0xFF3
   891                           wreg	equ	0xFE8
   892                           status	equ	0xFD8
   893                           
   894                           	psect	rparam
   895  0000                     tblptru	equ	0xFF8
   896                           tblptrh	equ	0xFF7
   897                           tblptrl	equ	0xFF6
   898                           tablat	equ	0xFF5
   899                           prodh	equ	0xFF4
   900                           prodl	equ	0xFF3
   901                           wreg	equ	0xFE8
   902                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    12
    Data        0
    BSS         1
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     33      34
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_full_turn
    _full_turn->_move_step
    _move_step->_next_step
    _next_step->_set_step

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0    1521
                                             32 COMRAM     1     1      0
                             ___wmul
                          _full_turn
                              _setup
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _full_turn                                            8     4      4    1142
                                             24 COMRAM     8     4      4
                             ___wmul (ARG)
                              _delay
                          _move_step
 ---------------------------------------------------------------------------------
 (2) _move_step                                            5     0      5     772
                                             19 COMRAM     5     0      5
                          _next_step
 ---------------------------------------------------------------------------------
 (3) _next_step                                           15    14      1     358
                                              4 COMRAM    15    14      1
                           _set_step
 ---------------------------------------------------------------------------------
 (4) _set_step                                             4     4      0      46
                                              0 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (2) _delay                                                5     1      4     174
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (1) ___wmul                                               6     2      4     311
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___wmul
   _full_turn
     ___wmul (ARG)
     _delay (ARG)
     _move_step (ARG)
       _next_step
         _set_step
   _setup

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     21      22       1       35.8%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      22      20        0.0%
DATA                 0      0      22       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Fri Apr 13 05:14:02 2018

                     l23 0978                       l40 0838                       l24 0998  
                     l33 0A1C                       l34 0A0C                       l42 0886  
                     l50 087E                       l44 0822                       l60 0950  
                     l55 092C                       l48 0876                       l56 0922  
                     l66 09DC                       l59 095A      ___wmul@multiplicand 0003  
            __CFG_BORV$3 000000             __CFG_CP0$OFF 000000             __CFG_CP1$OFF 000000  
           __CFG_CP2$OFF 000000             __CFG_CP3$OFF 000000            _complete_step 0809  
                    l808 0A0C                      l816 0922                      l818 092C  
                    l842 0990             __CFG_CPB$OFF 000000                      u217 0A00  
                    u227 0A12             __CFG_CPD$OFF 000000             __CFG_BOR$OFF 000000  
                    wreg 000FE8             __CFG_FOSC$HS 000000             __CFG_LVP$OFF 000000  
           __CFG_WDT$OFF 000000                     _LATB 000F8A                     _Step 0022  
                   _main 0974                     prodh 000FF4                     prodl 000FF3  
                   start 0000            __CFG_IESO$OFF 000000            __CFG_MCLRE$ON 000000  
           ___param_bank 000000            __CFG_PLLDIV$1 000000           __CFG_CCP2MX$ON 000000  
                  ?_main 0001            __CFG_USBDIV$1 000000                    _TRISB 000F93  
          __CFG_PWRT$OFF 000000            __CFG_WRT0$OFF 000000            __CFG_WRT1$OFF 000000  
          __CFG_WRT2$OFF 000000            __CFG_WRT3$OFF 000000           __CFG_EBTR0$OFF 000000  
         __CFG_FCMEN$OFF 000000           __CFG_EBTR1$OFF 000000           __CFG_EBTR2$OFF 000000  
         __CFG_EBTR3$OFF 000000            __CFG_WRTB$OFF 000000            __CFG_WRTC$OFF 000000  
          __CFG_WRTD$OFF 000000           __CFG_EBTRB$OFF 000000                    _delay 0A0A  
                  _setup 0A70                    main@i 0021                    tablat 000FF5  
                  status 000FD8           __CFG_ICPRT$OFF 000000          __initialization 0A60  
           __end_of_main 09C4                   ??_main 0021            __activetblptr 000001  
                 ?_delay 0001                   ?_setup 0001           __CFG_XINST$OFF 000000  
                 ___wmul 0A3A           __CFG_STVREN$ON 000000                   delay@t 0001  
       __end_of_set_step 0A0A             __mediumconst 0000                   tblptrh 000FF7  
                 tblptrl 000FF6                   tblptru 000FF8               __accesstop 0060  
__end_of__initialization 0A62          __CFG_PBADEN$OFF 000000            ___rparam_used 000001  
         __pcstackCOMRAM 0001            __end_of_delay 0A3A            __end_of_setup 0A7A  
                ??_delay 0005                  ??_setup 0001       __size_of_full_turn 007C  
                ?___wmul 0001       __size_of_next_step 0084       __size_of_move_step 0066  
        __CFG_VREGEN$OFF 000000                  __Hparam 0000                  __Lparam 0000  
              ?_set_step 0001          __size_of___wmul 0026             __psmallconst 0800  
                __pcinit 0A60                  __ramtop 0800                  __ptext0 0974  
                __ptext1 0A70                  __ptext2 0892                  __ptext3 090E  
                __ptext4 080E                  __ptext5 09C4                  __ptext6 0A0A  
                __ptext7 0A3A        __end_of_full_turn 090E     end_of_initialization 0A62  
      __end_of_next_step 0892        __end_of_move_step 0974               ??_set_step 0001  
          next_step@type 0005           __end_of___wmul 0A60    __end_of_complete_step 080D  
    start_initialization 0A60                 ??___wmul 0005         __CFG_LPT1OSC$OFF 000000  
            __pbssCOMRAM 0022        __size_of_set_step 0046      __end_of_medium_step 0809  
            __smallconst 0800           __size_of_delay 0030                _full_turn 0892  
         __size_of_setup 000A           ___wmul@product 0005                _next_step 080E  
          move_step@type 0018                _move_step 090E         __CFG_WDTPS$32768 000000  
           next_step@dir 000D        ___wmul@multiplier 0001               ?_full_turn 0019  
             ?_next_step 0005         move_step@HowMany 0014                 __Hrparam 0000  
            _medium_step 0801               ?_move_step 0014                 __Lrparam 0000  
           __Lsmallconst 0800             _next_step$60 0012             _next_step$58 000E  
           _next_step$59 0010            __size_of_main 0050                 _set_step 09C4  
  __CFG_CPUDIV$OSC1_PLL2 000000              ??_full_turn 001D             set_step@type 0002  
            ??_next_step 0006              ??_move_step 0019              _set_step$67 0003  
         full_turn@steps 0019  
